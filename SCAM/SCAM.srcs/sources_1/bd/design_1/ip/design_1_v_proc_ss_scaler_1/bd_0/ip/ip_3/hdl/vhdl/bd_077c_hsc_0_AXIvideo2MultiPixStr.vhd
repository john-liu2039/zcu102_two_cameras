-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_077c_hsc_0_AXIvideo2MultiPixStr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (5 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (5 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    img_V_val_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_0_V_full_n : IN STD_LOGIC;
    img_V_val_0_V_write : OUT STD_LOGIC;
    img_V_val_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_1_V_full_n : IN STD_LOGIC;
    img_V_val_1_V_write : OUT STD_LOGIC;
    img_V_val_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_2_V_full_n : IN STD_LOGIC;
    img_V_val_2_V_write : OUT STD_LOGIC;
    img_V_val_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_3_V_full_n : IN STD_LOGIC;
    img_V_val_3_V_write : OUT STD_LOGIC;
    img_V_val_4_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_4_V_full_n : IN STD_LOGIC;
    img_V_val_4_V_write : OUT STD_LOGIC;
    img_V_val_5_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_V_val_5_V_full_n : IN STD_LOGIC;
    img_V_val_5_V_write : OUT STD_LOGIC;
    HwReg_Height_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_Height_empty_n : IN STD_LOGIC;
    HwReg_Height_read : OUT STD_LOGIC;
    HwReg_WidthIn_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_WidthIn_empty_n : IN STD_LOGIC;
    HwReg_WidthIn_read : OUT STD_LOGIC;
    HwReg_ColorMode_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    HwReg_ColorMode_empty_n : IN STD_LOGIC;
    HwReg_ColorMode_read : OUT STD_LOGIC;
    HwReg_Height_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    HwReg_Height_out_full_n : IN STD_LOGIC;
    HwReg_Height_out_write : OUT STD_LOGIC;
    HwReg_WidthIn_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    HwReg_WidthIn_out_full_n : IN STD_LOGIC;
    HwReg_WidthIn_out_write : OUT STD_LOGIC;
    HwReg_ColorMode_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    HwReg_ColorMode_out_full_n : IN STD_LOGIC;
    HwReg_ColorMode_out_write : OUT STD_LOGIC );
end;


architecture behav of bd_077c_hsc_0_AXIvideo2MultiPixStr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_data_out : STD_LOGIC_VECTOR (47 downto 0);
    signal AXI_video_strm_V_data_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_payload_A : STD_LOGIC_VECTOR (47 downto 0);
    signal AXI_video_strm_V_data_V_0_payload_B : STD_LOGIC_VECTOR (47 downto 0);
    signal AXI_video_strm_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_data_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_user_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_vld_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_ack_in : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_video_strm_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal AXI_video_strm_V_last_V_0_sel : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_load_A : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_load_B : STD_LOGIC;
    signal AXI_video_strm_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal AXI_video_strm_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_vld_in : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_ack_out : STD_LOGIC;
    signal AXI_video_strm_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal eol_2_i_i_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_V_val_0_V_blk_n : STD_LOGIC;
    signal img_V_val_1_V_blk_n : STD_LOGIC;
    signal img_V_val_2_V_blk_n : STD_LOGIC;
    signal img_V_val_3_V_blk_n : STD_LOGIC;
    signal img_V_val_4_V_blk_n : STD_LOGIC;
    signal img_V_val_5_V_blk_n : STD_LOGIC;
    signal HwReg_Height_blk_n : STD_LOGIC;
    signal HwReg_WidthIn_blk_n : STD_LOGIC;
    signal HwReg_ColorMode_blk_n : STD_LOGIC;
    signal HwReg_Height_out_blk_n : STD_LOGIC;
    signal HwReg_WidthIn_out_blk_n : STD_LOGIC;
    signal HwReg_ColorMode_out_blk_n : STD_LOGIC;
    signal eol_i_i_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_i_reg_409 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_i_reg_431 : STD_LOGIC_VECTOR (47 downto 0);
    signal axi_last_V_3_i_i_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_3_i_i_reg_490 : STD_LOGIC_VECTOR (47 downto 0);
    signal HwReg_Height_read_reg_699 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal HwReg_WidthIn_read_reg_704 : STD_LOGIC_VECTOR (11 downto 0);
    signal HwReg_ColorMode_read_reg_709 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_data_V_reg_715 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_last_V_reg_723 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_735 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sel_tmp_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_545_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_761 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op81_read_state6 : BOOLEAN;
    signal img_V_val_0_V1_status : STD_LOGIC;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal brmerge_i_i_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_eol_2_i_i_phi_fu_470_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V1_i_i_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal axi_data_V1_i_i_reg_376 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_i_i_reg_386 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_eol_i_i_phi_fu_401_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_459_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_455 : STD_LOGIC_VECTOR (47 downto 0);
    signal img_V_val_0_V1_update : STD_LOGIC;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_i_i_fu_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_val_3_V_fu_600_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_5_V_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp1_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_4_V_1_fu_610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp5_fu_645_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_0_V_fu_576_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp9_fu_660_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_1_fu_586_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_512_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_548 : BOOLEAN;


begin




    AXI_video_strm_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_out))) then 
                                        AXI_video_strm_V_data_V_0_sel_rd <= not(AXI_video_strm_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in))) then 
                                        AXI_video_strm_V_data_V_0_sel_wr <= not(AXI_video_strm_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((AXI_video_strm_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in)) or ((AXI_video_strm_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out)))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((AXI_video_strm_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out)) or ((AXI_video_strm_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in)))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_data_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in))) and (AXI_video_strm_V_data_V_0_state = ap_const_lv2_3)) or ((AXI_video_strm_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_ack_out)) or ((AXI_video_strm_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_1 = AXI_video_strm_V_data_V_0_vld_in)))) then 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out)))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in)))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_dest_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = AXI_video_strm_V_dest_V_0_state)) or ((ap_const_lv2_1 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = AXI_video_strm_V_dest_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_dest_V_0_vld_in)))) then 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_out))) then 
                                        AXI_video_strm_V_last_V_0_sel_rd <= not(AXI_video_strm_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in))) then 
                                        AXI_video_strm_V_last_V_0_sel_wr <= not(AXI_video_strm_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out)))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in)))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = AXI_video_strm_V_last_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_last_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in))) and (ap_const_lv2_3 = AXI_video_strm_V_last_V_0_state)) or ((ap_const_lv2_1 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = AXI_video_strm_V_last_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_last_V_0_vld_in)))) then 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_out))) then 
                                        AXI_video_strm_V_user_V_0_sel_rd <= not(AXI_video_strm_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in))) then 
                                        AXI_video_strm_V_user_V_0_sel_wr <= not(AXI_video_strm_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    AXI_video_strm_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                AXI_video_strm_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in)) or ((ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out)))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out)) or ((ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in)))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = AXI_video_strm_V_user_V_0_vld_in) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = AXI_video_strm_V_user_V_0_ack_out) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in))) and (ap_const_lv2_3 = AXI_video_strm_V_user_V_0_state)) or ((ap_const_lv2_1 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_ack_out)) or ((ap_const_lv2_2 = AXI_video_strm_V_user_V_0_state) and (ap_const_logic_1 = AXI_video_strm_V_user_V_0_vld_in)))) then 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    AXI_video_strm_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = exitcond_fu_551_p2) and (ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_phi_mux_eol_2_i_i_phi_fu_470_p4) and (ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_0 = start_once_reg) or (ap_const_logic_1 = internal_ap_ready)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = start_control_reg)) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V1_i_i_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                axi_data_V1_i_i_reg_376 <= axi_data_V_3_i_i_reg_490;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_data_V1_i_i_reg_376 <= tmp_data_V_reg_715;
            end if; 
        end if;
    end process;

    axi_data_V_1_i_i_reg_431_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                axi_data_V_1_i_i_reg_431 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4;
            elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                axi_data_V_1_i_i_reg_431 <= axi_data_V1_i_i_reg_376;
            end if; 
        end if;
    end process;

    axi_data_V_3_i_i_reg_490_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_data_V_3_i_i_reg_490 <= axi_data_V_1_i_i_reg_431;
            elsif (((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axi_data_V_3_i_i_reg_490 <= AXI_video_strm_V_data_V_0_data_out;
            end if; 
        end if;
    end process;

    axi_last_V1_i_i_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                axi_last_V1_i_i_reg_366 <= axi_last_V_3_i_i_reg_478;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                axi_last_V1_i_i_reg_366 <= tmp_last_V_reg_723;
            end if; 
        end if;
    end process;

    axi_last_V_3_i_i_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                axi_last_V_3_i_i_reg_478 <= eol_reg_420;
            elsif (((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axi_last_V_3_i_i_reg_478 <= AXI_video_strm_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_2_i_i_reg_467_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                eol_2_i_i_reg_467 <= eol_i_i_reg_397;
            elsif (((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                eol_2_i_i_reg_467 <= AXI_video_strm_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_i_i_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_i_i_reg_397 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
            elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_i_i_reg_397 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_reg_420 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
            elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                eol_reg_420 <= axi_last_V1_i_i_reg_366;
            end if; 
        end if;
    end process;

    i_i_i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_i_i_reg_386 <= i_reg_761;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_i_reg_386 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_i_i_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_fu_551_p2) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_i_i_reg_409 <= j_fu_556_p2;
            elsif (((ap_const_lv1_0 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_i_i_reg_409 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    sof_1_i_i_fu_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_fu_551_p2) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                sof_1_i_i_fu_280 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sof_1_i_i_fu_280 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_load_A)) then
                AXI_video_strm_V_data_V_0_payload_A <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_load_B)) then
                AXI_video_strm_V_data_V_0_payload_B <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_load_A)) then
                AXI_video_strm_V_last_V_0_payload_A <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_load_B)) then
                AXI_video_strm_V_last_V_0_payload_B <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_load_A)) then
                AXI_video_strm_V_user_V_0_payload_A <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_load_B)) then
                AXI_video_strm_V_user_V_0_payload_B <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                HwReg_ColorMode_read_reg_709 <= HwReg_ColorMode_dout;
                HwReg_Height_read_reg_699 <= HwReg_Height_dout;
                HwReg_WidthIn_read_reg_704 <= HwReg_WidthIn_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_fu_551_p2) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                brmerge_i_i_reg_775 <= brmerge_i_i_fu_565_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_reg_766 <= exitcond_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_reg_761 <= i_fu_545_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                sel_tmp2_reg_747 <= sel_tmp2_fu_530_p2;
                sel_tmp_reg_740 <= sel_tmp_fu_525_p2;
                tmp_reg_735 <= HwReg_WidthIn_read_reg_704(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_data_V_reg_715 <= AXI_video_strm_V_data_V_0_data_out;
                tmp_last_V_reg_723 <= AXI_video_strm_V_last_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, AXI_video_strm_V_data_V_0_vld_out, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, exitcond_i_i_fu_540_p2, ap_CS_fsm_state4, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_subdone, tmp_user_V_fu_512_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_0 = tmp_user_V_fu_512_p1) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_lv1_1 = tmp_user_V_fu_512_p1) and (AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_lv1_1 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    AXI_video_strm_V_data_V_0_ack_in <= AXI_video_strm_V_data_V_0_state(1);

    AXI_video_strm_V_data_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467, ap_predicate_op81_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op81_read_state6) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            AXI_video_strm_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_data_V_0_data_out_assign_proc : process(AXI_video_strm_V_data_V_0_payload_A, AXI_video_strm_V_data_V_0_payload_B, AXI_video_strm_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_data_V_0_sel)) then 
            AXI_video_strm_V_data_V_0_data_out <= AXI_video_strm_V_data_V_0_payload_B;
        else 
            AXI_video_strm_V_data_V_0_data_out <= AXI_video_strm_V_data_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_data_V_0_load_A <= (not(AXI_video_strm_V_data_V_0_sel_wr) and AXI_video_strm_V_data_V_0_state_cmp_full);
    AXI_video_strm_V_data_V_0_load_B <= (AXI_video_strm_V_data_V_0_state_cmp_full and AXI_video_strm_V_data_V_0_sel_wr);
    AXI_video_strm_V_data_V_0_sel <= AXI_video_strm_V_data_V_0_sel_rd;
    AXI_video_strm_V_data_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_data_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_data_V_0_vld_in <= s_axis_video_TVALID;
    AXI_video_strm_V_data_V_0_vld_out <= AXI_video_strm_V_data_V_0_state(0);

    AXI_video_strm_V_dest_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467, ap_predicate_op81_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op81_read_state6) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            AXI_video_strm_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    AXI_video_strm_V_dest_V_0_vld_in <= s_axis_video_TVALID;
    AXI_video_strm_V_last_V_0_ack_in <= AXI_video_strm_V_last_V_0_state(1);

    AXI_video_strm_V_last_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467, ap_predicate_op81_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op81_read_state6) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            AXI_video_strm_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_last_V_0_data_out_assign_proc : process(AXI_video_strm_V_last_V_0_payload_A, AXI_video_strm_V_last_V_0_payload_B, AXI_video_strm_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_last_V_0_sel)) then 
            AXI_video_strm_V_last_V_0_data_out <= AXI_video_strm_V_last_V_0_payload_B;
        else 
            AXI_video_strm_V_last_V_0_data_out <= AXI_video_strm_V_last_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_last_V_0_load_A <= (not(AXI_video_strm_V_last_V_0_sel_wr) and AXI_video_strm_V_last_V_0_state_cmp_full);
    AXI_video_strm_V_last_V_0_load_B <= (AXI_video_strm_V_last_V_0_state_cmp_full and AXI_video_strm_V_last_V_0_sel_wr);
    AXI_video_strm_V_last_V_0_sel <= AXI_video_strm_V_last_V_0_sel_rd;
    AXI_video_strm_V_last_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_last_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_last_V_0_vld_in <= s_axis_video_TVALID;
    AXI_video_strm_V_last_V_0_vld_out <= AXI_video_strm_V_last_V_0_state(0);
    AXI_video_strm_V_user_V_0_ack_in <= AXI_video_strm_V_user_V_0_state(1);

    AXI_video_strm_V_user_V_0_ack_out_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467, ap_predicate_op81_read_state6, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op81_read_state6) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((AXI_video_strm_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            AXI_video_strm_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            AXI_video_strm_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    AXI_video_strm_V_user_V_0_data_out_assign_proc : process(AXI_video_strm_V_user_V_0_payload_A, AXI_video_strm_V_user_V_0_payload_B, AXI_video_strm_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = AXI_video_strm_V_user_V_0_sel)) then 
            AXI_video_strm_V_user_V_0_data_out <= AXI_video_strm_V_user_V_0_payload_B;
        else 
            AXI_video_strm_V_user_V_0_data_out <= AXI_video_strm_V_user_V_0_payload_A;
        end if; 
    end process;

    AXI_video_strm_V_user_V_0_load_A <= (not(AXI_video_strm_V_user_V_0_sel_wr) and AXI_video_strm_V_user_V_0_state_cmp_full);
    AXI_video_strm_V_user_V_0_load_B <= (AXI_video_strm_V_user_V_0_state_cmp_full and AXI_video_strm_V_user_V_0_sel_wr);
    AXI_video_strm_V_user_V_0_sel <= AXI_video_strm_V_user_V_0_sel_rd;
    AXI_video_strm_V_user_V_0_state_cmp_full <= '0' when (AXI_video_strm_V_user_V_0_state = ap_const_lv2_1) else '1';
    AXI_video_strm_V_user_V_0_vld_in <= s_axis_video_TVALID;
    AXI_video_strm_V_user_V_0_vld_out <= AXI_video_strm_V_user_V_0_state(0);

    HwReg_ColorMode_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_ColorMode_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_ColorMode_blk_n <= HwReg_ColorMode_empty_n;
        else 
            HwReg_ColorMode_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_ColorMode_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_ColorMode_out_blk_n <= HwReg_ColorMode_out_full_n;
        else 
            HwReg_ColorMode_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_ColorMode_out_din <= HwReg_ColorMode_dout;

    HwReg_ColorMode_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_ColorMode_out_write <= ap_const_logic_1;
        else 
            HwReg_ColorMode_out_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_ColorMode_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_ColorMode_read <= ap_const_logic_1;
        else 
            HwReg_ColorMode_read <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_Height_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_Height_blk_n <= HwReg_Height_empty_n;
        else 
            HwReg_Height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_Height_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_Height_out_blk_n <= HwReg_Height_out_full_n;
        else 
            HwReg_Height_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_Height_out_din <= HwReg_Height_dout;

    HwReg_Height_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_Height_out_write <= ap_const_logic_1;
        else 
            HwReg_Height_out_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_Height_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_Height_read <= ap_const_logic_1;
        else 
            HwReg_Height_read <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_WidthIn_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_WidthIn_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_WidthIn_blk_n <= HwReg_WidthIn_empty_n;
        else 
            HwReg_WidthIn_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_WidthIn_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_WidthIn_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_WidthIn_out_blk_n <= HwReg_WidthIn_out_full_n;
        else 
            HwReg_WidthIn_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HwReg_WidthIn_out_din <= HwReg_WidthIn_dout;

    HwReg_WidthIn_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_WidthIn_out_write <= ap_const_logic_1;
        else 
            HwReg_WidthIn_out_write <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_WidthIn_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_WidthIn_read <= ap_const_logic_1;
        else 
            HwReg_WidthIn_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_reg_766, ap_predicate_op81_read_state6, img_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op81_read_state6)) or ((ap_const_lv1_0 = exitcond_reg_766) and (ap_const_logic_0 = img_V_val_0_V1_status))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_reg_766, ap_predicate_op81_read_state6, img_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op81_read_state6)) or ((ap_const_lv1_0 = exitcond_reg_766) and (ap_const_logic_0 = img_V_val_0_V1_status))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_reg_766, ap_predicate_op81_read_state6, img_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op81_read_state6)) or ((ap_const_lv1_0 = exitcond_reg_766) and (ap_const_logic_0 = img_V_val_0_V1_status))));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_467)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, HwReg_Height_empty_n, HwReg_WidthIn_empty_n, HwReg_ColorMode_empty_n, HwReg_Height_out_full_n, HwReg_WidthIn_out_full_n, HwReg_ColorMode_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = HwReg_ColorMode_out_full_n) or (ap_const_logic_0 = HwReg_WidthIn_out_full_n) or (ap_const_logic_0 = HwReg_Height_out_full_n) or (ap_const_logic_0 = HwReg_ColorMode_empty_n) or (ap_const_logic_0 = HwReg_WidthIn_empty_n) or (ap_const_logic_0 = HwReg_Height_empty_n) or (ap_const_logic_0 = real_start));
    end process;

        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp1_stage0_iter1_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, exitcond_reg_766, ap_predicate_op81_read_state6, img_V_val_0_V1_status)
    begin
                ap_block_state6_pp1_stage0_iter1 <= (((ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op81_read_state6)) or ((ap_const_lv1_0 = exitcond_reg_766) and (ap_const_logic_0 = img_V_val_0_V1_status)));
    end process;

        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp2_stage0_iter1_assign_proc : process(AXI_video_strm_V_data_V_0_vld_out, eol_2_i_i_reg_467)
    begin
                ap_block_state9_pp2_stage0_iter1 <= ((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_const_logic_0 = AXI_video_strm_V_data_V_0_vld_out));
    end process;


    ap_condition_548_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
                ap_condition_548 <= ((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond_i_i_fu_540_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4_assign_proc : process(AXI_video_strm_V_last_V_0_data_out, brmerge_i_i_reg_775, eol_reg_420, ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442, ap_condition_548)
    begin
        if ((ap_condition_548 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = brmerge_i_i_reg_775)) then 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 <= eol_reg_420;
            elsif ((ap_const_lv1_0 = brmerge_i_i_reg_775)) then 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 <= AXI_video_strm_V_last_V_0_data_out;
            else 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442;
            end if;
        else 
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442;
        end if; 
    end process;


    ap_phi_mux_eol_2_i_i_phi_fu_470_p4_assign_proc : process(AXI_video_strm_V_last_V_0_data_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_i_i_reg_467)
    begin
        if (((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_eol_2_i_i_phi_fu_470_p4 <= AXI_video_strm_V_last_V_0_data_out;
        else 
            ap_phi_mux_eol_2_i_i_phi_fu_470_p4 <= eol_2_i_i_reg_467;
        end if; 
    end process;


    ap_phi_mux_eol_i_i_phi_fu_401_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766, eol_i_i_reg_397, ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_i_i_phi_fu_401_p4 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
        else 
            ap_phi_mux_eol_i_i_phi_fu_401_p4 <= eol_i_i_reg_397;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_459_p4_assign_proc : process(AXI_video_strm_V_data_V_0_data_out, brmerge_i_i_reg_775, axi_data_V_1_i_i_reg_431, ap_phi_reg_pp1_iter1_p_Val2_s_reg_455, ap_condition_548)
    begin
        if ((ap_condition_548 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = brmerge_i_i_reg_775)) then 
                ap_phi_mux_p_Val2_s_phi_fu_459_p4 <= axi_data_V_1_i_i_reg_431;
            elsif ((ap_const_lv1_0 = brmerge_i_i_reg_775)) then 
                ap_phi_mux_p_Val2_s_phi_fu_459_p4 <= AXI_video_strm_V_data_V_0_data_out;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_459_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_455;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_459_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_455;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442 <= "X";
    ap_phi_reg_pp1_iter1_p_Val2_s_reg_455 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op81_read_state6_assign_proc : process(exitcond_reg_766, brmerge_i_i_reg_775)
    begin
                ap_predicate_op81_read_state6 <= ((ap_const_lv1_0 = brmerge_i_i_reg_775) and (ap_const_lv1_0 = exitcond_reg_766));
    end process;

    ap_ready <= internal_ap_ready;
    brmerge_i_i_fu_565_p2 <= (sof_1_i_i_fu_280 or ap_phi_mux_eol_i_i_phi_fu_401_p4);
    exitcond_fu_551_p2 <= "1" when (j_i_i_reg_409 = tmp_reg_735) else "0";
    exitcond_i_i_fu_540_p2 <= "1" when (i_i_i_reg_386 = HwReg_Height_read_reg_699) else "0";
    i_fu_545_p2 <= std_logic_vector(unsigned(i_i_i_reg_386) + unsigned(ap_const_lv12_1));
    img_V_val_0_V1_status <= (img_V_val_5_V_full_n and img_V_val_4_V_full_n and img_V_val_3_V_full_n and img_V_val_2_V_full_n and img_V_val_1_V_full_n and img_V_val_0_V_full_n);

    img_V_val_0_V1_update_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_reg_766, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_0_V1_update <= ap_const_logic_1;
        else 
            img_V_val_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    img_V_val_0_V_blk_n_assign_proc : process(img_V_val_0_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_0_V_blk_n <= img_V_val_0_V_full_n;
        else 
            img_V_val_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_0_V_din <= 
        pix_val_0_V_fu_576_p4 when (sel_tmp2_reg_747(0) = '1') else 
        pix_val_1_V_1_fu_586_p1;
    img_V_val_0_V_write <= img_V_val_0_V1_update;

    img_V_val_1_V_blk_n_assign_proc : process(img_V_val_1_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_1_V_blk_n <= img_V_val_1_V_full_n;
        else 
            img_V_val_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_1_V_din <= 
        pix_val_1_V_1_fu_586_p1 when (sel_tmp2_reg_747(0) = '1') else 
        pix_val_2_V_fu_590_p4;
    img_V_val_1_V_write <= img_V_val_0_V1_update;

    img_V_val_2_V_blk_n_assign_proc : process(img_V_val_2_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_2_V_blk_n <= img_V_val_2_V_full_n;
        else 
            img_V_val_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_2_V_din <= 
        pix_val_2_V_fu_590_p4 when (sel_tmp2_reg_747(0) = '1') else 
        pix_val_0_V_fu_576_p4;
    img_V_val_2_V_write <= img_V_val_0_V1_update;

    img_V_val_3_V_blk_n_assign_proc : process(img_V_val_3_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_3_V_blk_n <= img_V_val_3_V_full_n;
        else 
            img_V_val_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_3_V_din <= 
        pix_val_3_V_fu_600_p4 when (sel_tmp2_reg_747(0) = '1') else 
        sel_tmp9_fu_660_p3;
    img_V_val_3_V_write <= img_V_val_0_V1_update;

    img_V_val_4_V_blk_n_assign_proc : process(img_V_val_4_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_4_V_blk_n <= img_V_val_4_V_full_n;
        else 
            img_V_val_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_4_V_din <= 
        pix_val_4_V_1_fu_610_p4 when (sel_tmp2_reg_747(0) = '1') else 
        sel_tmp5_fu_645_p3;
    img_V_val_4_V_write <= img_V_val_0_V1_update;

    img_V_val_5_V_blk_n_assign_proc : process(img_V_val_5_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766)
    begin
        if (((ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            img_V_val_5_V_blk_n <= img_V_val_5_V_full_n;
        else 
            img_V_val_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    img_V_val_5_V_din <= 
        pix_val_5_V_fu_620_p4 when (sel_tmp2_reg_747(0) = '1') else 
        sel_tmp1_fu_630_p3;
    img_V_val_5_V_write <= img_V_val_0_V1_update;

    internal_ap_ready_assign_proc : process(exitcond_i_i_fu_540_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = exitcond_i_i_fu_540_p2) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_556_p2 <= std_logic_vector(unsigned(j_i_i_reg_409) + unsigned(ap_const_lv11_1));
    pix_val_0_V_fu_576_p4 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(23 downto 16);
    pix_val_1_V_1_fu_586_p1 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(8 - 1 downto 0);
    pix_val_2_V_fu_590_p4 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(15 downto 8);
    pix_val_3_V_fu_600_p4 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(47 downto 40);
    pix_val_4_V_1_fu_610_p4 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(31 downto 24);
    pix_val_5_V_fu_620_p4 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4(39 downto 32);

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    s_axis_video_TDATA_blk_n_assign_proc : process(AXI_video_strm_V_data_V_0_state, ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_reg_766, brmerge_i_i_reg_775, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_i_i_reg_467)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_lv1_0 = eol_2_i_i_reg_467) and (ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_lv1_0 = brmerge_i_i_reg_775) and (ap_const_lv1_0 = exitcond_reg_766) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            s_axis_video_TDATA_blk_n <= AXI_video_strm_V_data_V_0_state(0);
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_video_TREADY <= AXI_video_strm_V_dest_V_0_state(1);
    sel_tmp1_fu_630_p3 <= 
        pix_val_3_V_fu_600_p4 when (sel_tmp_reg_740(0) = '1') else 
        pix_val_5_V_fu_620_p4;
    sel_tmp2_fu_530_p2 <= "1" when (HwReg_ColorMode_read_reg_709 = ap_const_lv8_0) else "0";
    sel_tmp5_fu_645_p3 <= 
        pix_val_5_V_fu_620_p4 when (sel_tmp_reg_740(0) = '1') else 
        pix_val_4_V_1_fu_610_p4;
    sel_tmp9_fu_660_p3 <= 
        pix_val_4_V_1_fu_610_p4 when (sel_tmp_reg_740(0) = '1') else 
        pix_val_0_V_fu_576_p4;
    sel_tmp_fu_525_p2 <= "1" when (HwReg_ColorMode_read_reg_709 = ap_const_lv8_1) else "0";
    start_out <= real_start;
    start_write <= start_control_reg;
    tmp_user_V_fu_512_p1 <= AXI_video_strm_V_user_V_0_data_out;
end behav;
