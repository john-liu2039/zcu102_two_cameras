// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_077c_hsc_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        img_V_val_0_V_din,
        img_V_val_0_V_full_n,
        img_V_val_0_V_write,
        img_V_val_1_V_din,
        img_V_val_1_V_full_n,
        img_V_val_1_V_write,
        img_V_val_2_V_din,
        img_V_val_2_V_full_n,
        img_V_val_2_V_write,
        img_V_val_3_V_din,
        img_V_val_3_V_full_n,
        img_V_val_3_V_write,
        img_V_val_4_V_din,
        img_V_val_4_V_full_n,
        img_V_val_4_V_write,
        img_V_val_5_V_din,
        img_V_val_5_V_full_n,
        img_V_val_5_V_write,
        HwReg_Height_dout,
        HwReg_Height_empty_n,
        HwReg_Height_read,
        HwReg_WidthIn_dout,
        HwReg_WidthIn_empty_n,
        HwReg_WidthIn_read,
        HwReg_ColorMode_dout,
        HwReg_ColorMode_empty_n,
        HwReg_ColorMode_read,
        HwReg_Height_out_din,
        HwReg_Height_out_full_n,
        HwReg_Height_out_write,
        HwReg_WidthIn_out_din,
        HwReg_WidthIn_out_full_n,
        HwReg_WidthIn_out_write,
        HwReg_ColorMode_out_din,
        HwReg_ColorMode_out_full_n,
        HwReg_ColorMode_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_pp1_stage0 = 8'd16;
parameter    ap_ST_fsm_state7 = 8'd32;
parameter    ap_ST_fsm_pp2_stage0 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [47:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [5:0] s_axis_video_TKEEP;
input  [5:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] img_V_val_0_V_din;
input   img_V_val_0_V_full_n;
output   img_V_val_0_V_write;
output  [7:0] img_V_val_1_V_din;
input   img_V_val_1_V_full_n;
output   img_V_val_1_V_write;
output  [7:0] img_V_val_2_V_din;
input   img_V_val_2_V_full_n;
output   img_V_val_2_V_write;
output  [7:0] img_V_val_3_V_din;
input   img_V_val_3_V_full_n;
output   img_V_val_3_V_write;
output  [7:0] img_V_val_4_V_din;
input   img_V_val_4_V_full_n;
output   img_V_val_4_V_write;
output  [7:0] img_V_val_5_V_din;
input   img_V_val_5_V_full_n;
output   img_V_val_5_V_write;
input  [11:0] HwReg_Height_dout;
input   HwReg_Height_empty_n;
output   HwReg_Height_read;
input  [11:0] HwReg_WidthIn_dout;
input   HwReg_WidthIn_empty_n;
output   HwReg_WidthIn_read;
input  [7:0] HwReg_ColorMode_dout;
input   HwReg_ColorMode_empty_n;
output   HwReg_ColorMode_read;
output  [11:0] HwReg_Height_out_din;
input   HwReg_Height_out_full_n;
output   HwReg_Height_out_write;
output  [11:0] HwReg_WidthIn_out_din;
input   HwReg_WidthIn_out_full_n;
output   HwReg_WidthIn_out_write;
output  [7:0] HwReg_ColorMode_out_din;
input   HwReg_ColorMode_out_full_n;
output   HwReg_ColorMode_out_write;

reg ap_done;
reg ap_idle;
reg HwReg_Height_read;
reg HwReg_WidthIn_read;
reg HwReg_ColorMode_read;
reg HwReg_Height_out_write;
reg HwReg_WidthIn_out_write;
reg HwReg_ColorMode_out_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg   [47:0] AXI_video_strm_V_data_V_0_data_out;
wire    AXI_video_strm_V_data_V_0_vld_in;
wire    AXI_video_strm_V_data_V_0_vld_out;
wire    AXI_video_strm_V_data_V_0_ack_in;
reg    AXI_video_strm_V_data_V_0_ack_out;
reg   [47:0] AXI_video_strm_V_data_V_0_payload_A;
reg   [47:0] AXI_video_strm_V_data_V_0_payload_B;
reg    AXI_video_strm_V_data_V_0_sel_rd;
reg    AXI_video_strm_V_data_V_0_sel_wr;
wire    AXI_video_strm_V_data_V_0_sel;
wire    AXI_video_strm_V_data_V_0_load_A;
wire    AXI_video_strm_V_data_V_0_load_B;
reg   [1:0] AXI_video_strm_V_data_V_0_state;
wire    AXI_video_strm_V_data_V_0_state_cmp_full;
reg   [0:0] AXI_video_strm_V_user_V_0_data_out;
wire    AXI_video_strm_V_user_V_0_vld_in;
wire    AXI_video_strm_V_user_V_0_vld_out;
wire    AXI_video_strm_V_user_V_0_ack_in;
reg    AXI_video_strm_V_user_V_0_ack_out;
reg   [0:0] AXI_video_strm_V_user_V_0_payload_A;
reg   [0:0] AXI_video_strm_V_user_V_0_payload_B;
reg    AXI_video_strm_V_user_V_0_sel_rd;
reg    AXI_video_strm_V_user_V_0_sel_wr;
wire    AXI_video_strm_V_user_V_0_sel;
wire    AXI_video_strm_V_user_V_0_load_A;
wire    AXI_video_strm_V_user_V_0_load_B;
reg   [1:0] AXI_video_strm_V_user_V_0_state;
wire    AXI_video_strm_V_user_V_0_state_cmp_full;
reg   [0:0] AXI_video_strm_V_last_V_0_data_out;
wire    AXI_video_strm_V_last_V_0_vld_in;
wire    AXI_video_strm_V_last_V_0_vld_out;
wire    AXI_video_strm_V_last_V_0_ack_in;
reg    AXI_video_strm_V_last_V_0_ack_out;
reg   [0:0] AXI_video_strm_V_last_V_0_payload_A;
reg   [0:0] AXI_video_strm_V_last_V_0_payload_B;
reg    AXI_video_strm_V_last_V_0_sel_rd;
reg    AXI_video_strm_V_last_V_0_sel_wr;
wire    AXI_video_strm_V_last_V_0_sel;
wire    AXI_video_strm_V_last_V_0_load_A;
wire    AXI_video_strm_V_last_V_0_load_B;
reg   [1:0] AXI_video_strm_V_last_V_0_state;
wire    AXI_video_strm_V_last_V_0_state_cmp_full;
wire    AXI_video_strm_V_dest_V_0_vld_in;
reg    AXI_video_strm_V_dest_V_0_ack_out;
reg   [1:0] AXI_video_strm_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_reg_766;
reg   [0:0] brmerge_i_i_reg_775;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] eol_2_i_i_reg_467;
reg    img_V_val_0_V_blk_n;
reg    img_V_val_1_V_blk_n;
reg    img_V_val_2_V_blk_n;
reg    img_V_val_3_V_blk_n;
reg    img_V_val_4_V_blk_n;
reg    img_V_val_5_V_blk_n;
reg    HwReg_Height_blk_n;
reg    HwReg_WidthIn_blk_n;
reg    HwReg_ColorMode_blk_n;
reg    HwReg_Height_out_blk_n;
reg    HwReg_WidthIn_out_blk_n;
reg    HwReg_ColorMode_out_blk_n;
reg   [0:0] eol_i_i_reg_397;
reg   [10:0] j_i_i_reg_409;
reg   [0:0] eol_reg_420;
reg   [47:0] axi_data_V_1_i_i_reg_431;
reg   [0:0] axi_last_V_3_i_i_reg_478;
reg   [47:0] axi_data_V_3_i_i_reg_490;
reg   [11:0] HwReg_Height_read_reg_699;
reg    ap_block_state1;
reg   [11:0] HwReg_WidthIn_read_reg_704;
reg   [7:0] HwReg_ColorMode_read_reg_709;
reg   [47:0] tmp_data_V_reg_715;
reg   [0:0] tmp_last_V_reg_723;
reg   [10:0] tmp_reg_735;
wire    ap_CS_fsm_state3;
wire   [0:0] sel_tmp_fu_525_p2;
reg   [0:0] sel_tmp_reg_740;
wire   [0:0] sel_tmp2_fu_530_p2;
reg   [0:0] sel_tmp2_reg_747;
wire   [0:0] exitcond_i_i_fu_540_p2;
wire    ap_CS_fsm_state4;
wire   [11:0] i_fu_545_p2;
reg   [11:0] i_reg_761;
wire   [0:0] exitcond_fu_551_p2;
wire    ap_block_state5_pp1_stage0_iter0;
reg    ap_predicate_op81_read_state6;
wire    img_V_val_0_V1_status;
reg    ap_block_state6_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_556_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] brmerge_i_i_fu_565_p2;
wire    ap_block_state8_pp2_stage0_iter0;
reg    ap_block_state9_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp2_iter0;
wire    ap_CS_fsm_state7;
reg    ap_block_pp2_stage0_subdone;
reg   [0:0] ap_phi_mux_eol_2_i_i_phi_fu_470_p4;
reg   [0:0] axi_last_V1_i_i_reg_366;
wire    ap_CS_fsm_state10;
reg   [47:0] axi_data_V1_i_i_reg_376;
reg   [11:0] i_i_i_reg_386;
reg   [0:0] ap_phi_mux_eol_i_i_phi_fu_401_p4;
reg   [0:0] ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
reg   [47:0] ap_phi_mux_p_Val2_s_phi_fu_459_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442;
wire   [47:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_455;
reg    img_V_val_0_V1_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_i_fu_280;
wire   [7:0] pix_val_3_V_fu_600_p4;
wire   [7:0] pix_val_5_V_fu_620_p4;
wire   [7:0] sel_tmp1_fu_630_p3;
wire   [7:0] pix_val_4_V_1_fu_610_p4;
wire   [7:0] sel_tmp5_fu_645_p3;
wire   [7:0] pix_val_0_V_fu_576_p4;
wire   [7:0] sel_tmp9_fu_660_p3;
wire   [7:0] pix_val_2_V_fu_590_p4;
wire   [7:0] pix_val_1_V_1_fu_586_p1;
wire   [0:0] tmp_user_V_fu_512_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_548;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 AXI_video_strm_V_data_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_data_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_data_V_0_state = 2'd0;
#0 AXI_video_strm_V_user_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_user_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_user_V_0_state = 2'd0;
#0 AXI_video_strm_V_last_V_0_sel_rd = 1'b0;
#0 AXI_video_strm_V_last_V_0_sel_wr = 1'b0;
#0 AXI_video_strm_V_last_V_0_state = 2'd0;
#0 AXI_video_strm_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_0_ack_out) & (1'b1 == AXI_video_strm_V_data_V_0_vld_out))) begin
            AXI_video_strm_V_data_V_0_sel_rd <= ~AXI_video_strm_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_data_V_0_ack_in) & (1'b1 == AXI_video_strm_V_data_V_0_vld_in))) begin
            AXI_video_strm_V_data_V_0_sel_wr <= ~AXI_video_strm_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((AXI_video_strm_V_data_V_0_state == 2'd2) & (1'b0 == AXI_video_strm_V_data_V_0_vld_in)) | ((AXI_video_strm_V_data_V_0_state == 2'd3) & (1'b0 == AXI_video_strm_V_data_V_0_vld_in) & (1'b1 == AXI_video_strm_V_data_V_0_ack_out)))) begin
            AXI_video_strm_V_data_V_0_state <= 2'd2;
        end else if ((((AXI_video_strm_V_data_V_0_state == 2'd1) & (1'b0 == AXI_video_strm_V_data_V_0_ack_out)) | ((AXI_video_strm_V_data_V_0_state == 2'd3) & (1'b0 == AXI_video_strm_V_data_V_0_ack_out) & (1'b1 == AXI_video_strm_V_data_V_0_vld_in)))) begin
            AXI_video_strm_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_data_V_0_vld_in) & (1'b1 == AXI_video_strm_V_data_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_data_V_0_ack_out) & (1'b1 == AXI_video_strm_V_data_V_0_vld_in)) & (AXI_video_strm_V_data_V_0_state == 2'd3)) | ((AXI_video_strm_V_data_V_0_state == 2'd1) & (1'b1 == AXI_video_strm_V_data_V_0_ack_out)) | ((AXI_video_strm_V_data_V_0_state == 2'd2) & (1'b1 == AXI_video_strm_V_data_V_0_vld_in)))) begin
            AXI_video_strm_V_data_V_0_state <= 2'd3;
        end else begin
            AXI_video_strm_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_dest_V_0_state) & (1'b0 == AXI_video_strm_V_dest_V_0_vld_in)) | ((2'd3 == AXI_video_strm_V_dest_V_0_state) & (1'b0 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_0_ack_out)))) begin
            AXI_video_strm_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_dest_V_0_state) & (1'b0 == AXI_video_strm_V_dest_V_0_ack_out)) | ((2'd3 == AXI_video_strm_V_dest_V_0_state) & (1'b0 == AXI_video_strm_V_dest_V_0_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_0_vld_in)))) begin
            AXI_video_strm_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_dest_V_0_vld_in) & (1'b1 == AXI_video_strm_V_dest_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_dest_V_0_ack_out) & (1'b1 == AXI_video_strm_V_dest_V_0_vld_in)) & (2'd3 == AXI_video_strm_V_dest_V_0_state)) | ((2'd1 == AXI_video_strm_V_dest_V_0_state) & (1'b1 == AXI_video_strm_V_dest_V_0_ack_out)) | ((2'd2 == AXI_video_strm_V_dest_V_0_state) & (1'b1 == AXI_video_strm_V_dest_V_0_vld_in)))) begin
            AXI_video_strm_V_dest_V_0_state <= 2'd3;
        end else begin
            AXI_video_strm_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_0_ack_out) & (1'b1 == AXI_video_strm_V_last_V_0_vld_out))) begin
            AXI_video_strm_V_last_V_0_sel_rd <= ~AXI_video_strm_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_last_V_0_ack_in) & (1'b1 == AXI_video_strm_V_last_V_0_vld_in))) begin
            AXI_video_strm_V_last_V_0_sel_wr <= ~AXI_video_strm_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_last_V_0_state) & (1'b0 == AXI_video_strm_V_last_V_0_vld_in)) | ((2'd3 == AXI_video_strm_V_last_V_0_state) & (1'b0 == AXI_video_strm_V_last_V_0_vld_in) & (1'b1 == AXI_video_strm_V_last_V_0_ack_out)))) begin
            AXI_video_strm_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_last_V_0_state) & (1'b0 == AXI_video_strm_V_last_V_0_ack_out)) | ((2'd3 == AXI_video_strm_V_last_V_0_state) & (1'b0 == AXI_video_strm_V_last_V_0_ack_out) & (1'b1 == AXI_video_strm_V_last_V_0_vld_in)))) begin
            AXI_video_strm_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_last_V_0_vld_in) & (1'b1 == AXI_video_strm_V_last_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_last_V_0_ack_out) & (1'b1 == AXI_video_strm_V_last_V_0_vld_in)) & (2'd3 == AXI_video_strm_V_last_V_0_state)) | ((2'd1 == AXI_video_strm_V_last_V_0_state) & (1'b1 == AXI_video_strm_V_last_V_0_ack_out)) | ((2'd2 == AXI_video_strm_V_last_V_0_state) & (1'b1 == AXI_video_strm_V_last_V_0_vld_in)))) begin
            AXI_video_strm_V_last_V_0_state <= 2'd3;
        end else begin
            AXI_video_strm_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_0_ack_out) & (1'b1 == AXI_video_strm_V_user_V_0_vld_out))) begin
            AXI_video_strm_V_user_V_0_sel_rd <= ~AXI_video_strm_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == AXI_video_strm_V_user_V_0_ack_in) & (1'b1 == AXI_video_strm_V_user_V_0_vld_in))) begin
            AXI_video_strm_V_user_V_0_sel_wr <= ~AXI_video_strm_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        AXI_video_strm_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == AXI_video_strm_V_user_V_0_state) & (1'b0 == AXI_video_strm_V_user_V_0_vld_in)) | ((2'd3 == AXI_video_strm_V_user_V_0_state) & (1'b0 == AXI_video_strm_V_user_V_0_vld_in) & (1'b1 == AXI_video_strm_V_user_V_0_ack_out)))) begin
            AXI_video_strm_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == AXI_video_strm_V_user_V_0_state) & (1'b0 == AXI_video_strm_V_user_V_0_ack_out)) | ((2'd3 == AXI_video_strm_V_user_V_0_state) & (1'b0 == AXI_video_strm_V_user_V_0_ack_out) & (1'b1 == AXI_video_strm_V_user_V_0_vld_in)))) begin
            AXI_video_strm_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == AXI_video_strm_V_user_V_0_vld_in) & (1'b1 == AXI_video_strm_V_user_V_0_ack_out)) & ~((1'b0 == AXI_video_strm_V_user_V_0_ack_out) & (1'b1 == AXI_video_strm_V_user_V_0_vld_in)) & (2'd3 == AXI_video_strm_V_user_V_0_state)) | ((2'd1 == AXI_video_strm_V_user_V_0_state) & (1'b1 == AXI_video_strm_V_user_V_0_ack_out)) | ((2'd2 == AXI_video_strm_V_user_V_0_state) & (1'b1 == AXI_video_strm_V_user_V_0_vld_in)))) begin
            AXI_video_strm_V_user_V_0_state <= 2'd3;
        end else begin
            AXI_video_strm_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'd1 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == exitcond_fu_551_p2) & (ap_block_pp1_stage0_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'd1 == ap_phi_mux_eol_2_i_i_phi_fu_470_p4) & (ap_block_pp2_stage0_subdone == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b0 == start_once_reg) | (1'b1 == internal_ap_ready)))) begin
            start_control_reg <= 1'b1;
        end else if ((1'b1 == start_control_reg)) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V1_i_i_reg_376 <= axi_data_V_3_i_i_reg_490;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_data_V1_i_i_reg_376 <= tmp_data_V_reg_715;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_i_reg_431 <= ap_phi_mux_p_Val2_s_phi_fu_459_p4;
    end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        axi_data_V_1_i_i_reg_431 <= axi_data_V1_i_i_reg_376;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_data_V_3_i_i_reg_490 <= axi_data_V_1_i_i_reg_431;
    end else if (((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_data_V_3_i_i_reg_490 <= AXI_video_strm_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V1_i_i_reg_366 <= axi_last_V_3_i_i_reg_478;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        axi_last_V1_i_i_reg_366 <= tmp_last_V_reg_723;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        axi_last_V_3_i_i_reg_478 <= eol_reg_420;
    end else if (((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_last_V_3_i_i_reg_478 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        eol_2_i_i_reg_467 <= eol_i_i_reg_397;
    end else if (((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        eol_2_i_i_reg_467 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_i_reg_397 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
    end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_i_i_reg_397 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_420 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
    end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        eol_reg_420 <= axi_last_V1_i_i_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_i_i_reg_386 <= i_reg_761;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_i_reg_386 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_fu_551_p2) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_i_i_reg_409 <= j_fu_556_p2;
    end else if (((1'd0 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        j_i_i_reg_409 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_fu_551_p2) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_i_fu_280 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sof_1_i_i_fu_280 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_load_A)) begin
        AXI_video_strm_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_load_B)) begin
        AXI_video_strm_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_load_A)) begin
        AXI_video_strm_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_load_B)) begin
        AXI_video_strm_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_load_A)) begin
        AXI_video_strm_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_load_B)) begin
        AXI_video_strm_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorMode_read_reg_709 <= HwReg_ColorMode_dout;
        HwReg_Height_read_reg_699 <= HwReg_Height_dout;
        HwReg_WidthIn_read_reg_704 <= HwReg_WidthIn_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_fu_551_p2) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        brmerge_i_i_reg_775 <= brmerge_i_i_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_766 <= exitcond_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_761 <= i_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        sel_tmp2_reg_747 <= sel_tmp2_fu_530_p2;
        sel_tmp_reg_740 <= sel_tmp_fu_525_p2;
        tmp_reg_735 <= {{HwReg_WidthIn_read_reg_704[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_data_V_reg_715 <= AXI_video_strm_V_data_V_0_data_out;
        tmp_last_V_reg_723 <= AXI_video_strm_V_last_V_0_data_out;
    end
end

always @ (*) begin
    if ((((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op81_read_state6) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        AXI_video_strm_V_data_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_data_V_0_sel)) begin
        AXI_video_strm_V_data_V_0_data_out = AXI_video_strm_V_data_V_0_payload_B;
    end else begin
        AXI_video_strm_V_data_V_0_data_out = AXI_video_strm_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op81_read_state6) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        AXI_video_strm_V_dest_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op81_read_state6) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        AXI_video_strm_V_last_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_last_V_0_sel)) begin
        AXI_video_strm_V_last_V_0_data_out = AXI_video_strm_V_last_V_0_payload_B;
    end else begin
        AXI_video_strm_V_last_V_0_data_out = AXI_video_strm_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op81_read_state6) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        AXI_video_strm_V_user_V_0_ack_out = 1'b1;
    end else begin
        AXI_video_strm_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == AXI_video_strm_V_user_V_0_sel)) begin
        AXI_video_strm_V_user_V_0_data_out = AXI_video_strm_V_user_V_0_payload_B;
    end else begin
        AXI_video_strm_V_user_V_0_data_out = AXI_video_strm_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorMode_blk_n = HwReg_ColorMode_empty_n;
    end else begin
        HwReg_ColorMode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorMode_out_blk_n = HwReg_ColorMode_out_full_n;
    end else begin
        HwReg_ColorMode_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorMode_out_write = 1'b1;
    end else begin
        HwReg_ColorMode_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_ColorMode_read = 1'b1;
    end else begin
        HwReg_ColorMode_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_blk_n = HwReg_Height_empty_n;
    end else begin
        HwReg_Height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_out_blk_n = HwReg_Height_out_full_n;
    end else begin
        HwReg_Height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_out_write = 1'b1;
    end else begin
        HwReg_Height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_Height_read = 1'b1;
    end else begin
        HwReg_Height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthIn_blk_n = HwReg_WidthIn_empty_n;
    end else begin
        HwReg_WidthIn_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthIn_out_blk_n = HwReg_WidthIn_out_full_n;
    end else begin
        HwReg_WidthIn_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthIn_out_write = 1'b1;
    end else begin
        HwReg_WidthIn_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_WidthIn_read = 1'b1;
    end else begin
        HwReg_WidthIn_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_548 == 1'b1)) begin
        if ((1'd1 == brmerge_i_i_reg_775)) begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 = eol_reg_420;
        end else if ((1'd0 == brmerge_i_i_reg_775)) begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 = AXI_video_strm_V_last_V_0_data_out;
        end else begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442;
        end
    end else begin
        ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442;
    end
end

always @ (*) begin
    if (((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_eol_2_i_i_phi_fu_470_p4 = AXI_video_strm_V_last_V_0_data_out;
    end else begin
        ap_phi_mux_eol_2_i_i_phi_fu_470_p4 = eol_2_i_i_reg_467;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_i_phi_fu_401_p4 = ap_phi_mux_axi_last_V_2_i_i_phi_fu_447_p4;
    end else begin
        ap_phi_mux_eol_i_i_phi_fu_401_p4 = eol_i_i_reg_397;
    end
end

always @ (*) begin
    if ((ap_condition_548 == 1'b1)) begin
        if ((1'd1 == brmerge_i_i_reg_775)) begin
            ap_phi_mux_p_Val2_s_phi_fu_459_p4 = axi_data_V_1_i_i_reg_431;
        end else if ((1'd0 == brmerge_i_i_reg_775)) begin
            ap_phi_mux_p_Val2_s_phi_fu_459_p4 = AXI_video_strm_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_459_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_455;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_459_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_455;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_0_V1_update = 1'b1;
    end else begin
        img_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_0_V_blk_n = img_V_val_0_V_full_n;
    end else begin
        img_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_1_V_blk_n = img_V_val_1_V_full_n;
    end else begin
        img_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_2_V_blk_n = img_V_val_2_V_full_n;
    end else begin
        img_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_3_V_blk_n = img_V_val_3_V_full_n;
    end else begin
        img_V_val_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_4_V_blk_n = img_V_val_4_V_full_n;
    end else begin
        img_V_val_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_5_V_blk_n = img_V_val_5_V_full_n;
    end else begin
        img_V_val_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'd0 == eol_2_i_i_reg_467) & (ap_block_pp2_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'd0 == brmerge_i_i_reg_775) & (1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = AXI_video_strm_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd0 == tmp_user_V_fu_512_p1) & (AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'd1 == tmp_user_V_fu_512_p1) & (AXI_video_strm_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'd1 == exitcond_i_i_fu_540_p2) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AXI_video_strm_V_data_V_0_ack_in = AXI_video_strm_V_data_V_0_state[1'd1];

assign AXI_video_strm_V_data_V_0_load_A = (~AXI_video_strm_V_data_V_0_sel_wr & AXI_video_strm_V_data_V_0_state_cmp_full);

assign AXI_video_strm_V_data_V_0_load_B = (AXI_video_strm_V_data_V_0_state_cmp_full & AXI_video_strm_V_data_V_0_sel_wr);

assign AXI_video_strm_V_data_V_0_sel = AXI_video_strm_V_data_V_0_sel_rd;

assign AXI_video_strm_V_data_V_0_state_cmp_full = ((AXI_video_strm_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_data_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_data_V_0_vld_out = AXI_video_strm_V_data_V_0_state[1'd0];

assign AXI_video_strm_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_last_V_0_ack_in = AXI_video_strm_V_last_V_0_state[1'd1];

assign AXI_video_strm_V_last_V_0_load_A = (~AXI_video_strm_V_last_V_0_sel_wr & AXI_video_strm_V_last_V_0_state_cmp_full);

assign AXI_video_strm_V_last_V_0_load_B = (AXI_video_strm_V_last_V_0_state_cmp_full & AXI_video_strm_V_last_V_0_sel_wr);

assign AXI_video_strm_V_last_V_0_sel = AXI_video_strm_V_last_V_0_sel_rd;

assign AXI_video_strm_V_last_V_0_state_cmp_full = ((AXI_video_strm_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_last_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_last_V_0_vld_out = AXI_video_strm_V_last_V_0_state[1'd0];

assign AXI_video_strm_V_user_V_0_ack_in = AXI_video_strm_V_user_V_0_state[1'd1];

assign AXI_video_strm_V_user_V_0_load_A = (~AXI_video_strm_V_user_V_0_sel_wr & AXI_video_strm_V_user_V_0_state_cmp_full);

assign AXI_video_strm_V_user_V_0_load_B = (AXI_video_strm_V_user_V_0_state_cmp_full & AXI_video_strm_V_user_V_0_sel_wr);

assign AXI_video_strm_V_user_V_0_sel = AXI_video_strm_V_user_V_0_sel_rd;

assign AXI_video_strm_V_user_V_0_state_cmp_full = ((AXI_video_strm_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign AXI_video_strm_V_user_V_0_vld_in = s_axis_video_TVALID;

assign AXI_video_strm_V_user_V_0_vld_out = AXI_video_strm_V_user_V_0_state[1'd0];

assign HwReg_ColorMode_out_din = HwReg_ColorMode_dout;

assign HwReg_Height_out_din = HwReg_Height_dout;

assign HwReg_WidthIn_out_din = HwReg_WidthIn_dout;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op81_read_state6)) | ((1'd0 == exitcond_reg_766) & (1'b0 == img_V_val_0_V1_status))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op81_read_state6)) | ((1'd0 == exitcond_reg_766) & (1'b0 == img_V_val_0_V1_status))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op81_read_state6)) | ((1'd0 == exitcond_reg_766) & (1'b0 == img_V_val_0_V1_status))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'd0 == eol_2_i_i_reg_467) & (1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_enable_reg_pp2_iter1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'd0 == eol_2_i_i_reg_467) & (1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_enable_reg_pp2_iter1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (1'b0 == HwReg_ColorMode_out_full_n) | (1'b0 == HwReg_WidthIn_out_full_n) | (1'b0 == HwReg_Height_out_full_n) | (1'b0 == HwReg_ColorMode_empty_n) | (1'b0 == HwReg_WidthIn_empty_n) | (1'b0 == HwReg_Height_empty_n) | (1'b0 == real_start));
end

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp1_stage0_iter1 = (((1'b0 == AXI_video_strm_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op81_read_state6)) | ((1'd0 == exitcond_reg_766) & (1'b0 == img_V_val_0_V1_status)));
end

assign ap_block_state8_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp2_stage0_iter1 = ((1'd0 == eol_2_i_i_reg_467) & (1'b0 == AXI_video_strm_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_condition_548 = ((1'd0 == exitcond_reg_766) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_442 = 'bx;

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_455 = 'bx;

always @ (*) begin
    ap_predicate_op81_read_state6 = ((1'd0 == brmerge_i_i_reg_775) & (1'd0 == exitcond_reg_766));
end

assign ap_ready = internal_ap_ready;

assign brmerge_i_i_fu_565_p2 = (sof_1_i_i_fu_280 | ap_phi_mux_eol_i_i_phi_fu_401_p4);

assign exitcond_fu_551_p2 = ((j_i_i_reg_409 == tmp_reg_735) ? 1'b1 : 1'b0);

assign exitcond_i_i_fu_540_p2 = ((i_i_i_reg_386 == HwReg_Height_read_reg_699) ? 1'b1 : 1'b0);

assign i_fu_545_p2 = (i_i_i_reg_386 + 12'd1);

assign img_V_val_0_V1_status = (img_V_val_5_V_full_n & img_V_val_4_V_full_n & img_V_val_3_V_full_n & img_V_val_2_V_full_n & img_V_val_1_V_full_n & img_V_val_0_V_full_n);

assign img_V_val_0_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_0_V_fu_576_p4 : pix_val_1_V_1_fu_586_p1);

assign img_V_val_0_V_write = img_V_val_0_V1_update;

assign img_V_val_1_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_1_V_1_fu_586_p1 : pix_val_2_V_fu_590_p4);

assign img_V_val_1_V_write = img_V_val_0_V1_update;

assign img_V_val_2_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_2_V_fu_590_p4 : pix_val_0_V_fu_576_p4);

assign img_V_val_2_V_write = img_V_val_0_V1_update;

assign img_V_val_3_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_3_V_fu_600_p4 : sel_tmp9_fu_660_p3);

assign img_V_val_3_V_write = img_V_val_0_V1_update;

assign img_V_val_4_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_4_V_1_fu_610_p4 : sel_tmp5_fu_645_p3);

assign img_V_val_4_V_write = img_V_val_0_V1_update;

assign img_V_val_5_V_din = ((sel_tmp2_reg_747[0:0] === 1'b1) ? pix_val_5_V_fu_620_p4 : sel_tmp1_fu_630_p3);

assign img_V_val_5_V_write = img_V_val_0_V1_update;

assign j_fu_556_p2 = (j_i_i_reg_409 + 11'd1);

assign pix_val_0_V_fu_576_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_459_p4[23:16]}};

assign pix_val_1_V_1_fu_586_p1 = ap_phi_mux_p_Val2_s_phi_fu_459_p4[7:0];

assign pix_val_2_V_fu_590_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_459_p4[15:8]}};

assign pix_val_3_V_fu_600_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_459_p4[47:40]}};

assign pix_val_4_V_1_fu_610_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_459_p4[31:24]}};

assign pix_val_5_V_fu_620_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_459_p4[39:32]}};

assign s_axis_video_TREADY = AXI_video_strm_V_dest_V_0_state[1'd1];

assign sel_tmp1_fu_630_p3 = ((sel_tmp_reg_740[0:0] === 1'b1) ? pix_val_3_V_fu_600_p4 : pix_val_5_V_fu_620_p4);

assign sel_tmp2_fu_530_p2 = ((HwReg_ColorMode_read_reg_709 == 8'd0) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_645_p3 = ((sel_tmp_reg_740[0:0] === 1'b1) ? pix_val_5_V_fu_620_p4 : pix_val_4_V_1_fu_610_p4);

assign sel_tmp9_fu_660_p3 = ((sel_tmp_reg_740[0:0] === 1'b1) ? pix_val_4_V_1_fu_610_p4 : pix_val_0_V_fu_576_p4);

assign sel_tmp_fu_525_p2 = ((HwReg_ColorMode_read_reg_709 == 8'd1) ? 1'b1 : 1'b0);

assign start_out = real_start;

assign start_write = start_control_reg;

assign tmp_user_V_fu_512_p1 = AXI_video_strm_V_user_V_0_data_out;

endmodule //bd_077c_hsc_0_AXIvideo2MultiPixStr
