-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_077c_vsc_0_MultiPixStream2AXIvi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutYUV_V_val_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_0_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_0_V_read : OUT STD_LOGIC;
    OutYUV_V_val_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_1_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_1_V_read : OUT STD_LOGIC;
    OutYUV_V_val_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_2_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_2_V_read : OUT STD_LOGIC;
    OutYUV_V_val_3_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_3_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_3_V_read : OUT STD_LOGIC;
    OutYUV_V_val_4_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_4_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_4_V_read : OUT STD_LOGIC;
    OutYUV_V_val_5_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    OutYUV_V_val_5_V_empty_n : IN STD_LOGIC;
    OutYUV_V_val_5_V_read : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (5 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (5 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    HwReg_HeightOut_cast_1_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    HwReg_HeightOut_cast_1_empty_n : IN STD_LOGIC;
    HwReg_HeightOut_cast_1_read : OUT STD_LOGIC;
    HwReg_Width : IN STD_LOGIC_VECTOR (15 downto 0);
    p_HwReg_ColorMode_loc_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    p_HwReg_ColorMode_loc_empty_n : IN STD_LOGIC;
    p_HwReg_ColorMode_loc_read : OUT STD_LOGIC );
end;


architecture behav of bd_077c_vsc_0_MultiPixStream2AXIvi is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv40_FFFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "1111111111111111111111111111111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_axis_video_V_data_V_1_data_out : STD_LOGIC_VECTOR (47 downto 0);
    signal m_axis_video_V_data_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_payload_A : STD_LOGIC_VECTOR (47 downto 0);
    signal m_axis_video_V_data_V_1_payload_B : STD_LOGIC_VECTOR (47 downto 0);
    signal m_axis_video_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal m_axis_video_V_keep_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_keep_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_strb_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal m_axis_video_V_strb_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_strb_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_id_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_dest_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OutYUV_V_val_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal OutYUV_V_val_1_V_blk_n : STD_LOGIC;
    signal OutYUV_V_val_2_V_blk_n : STD_LOGIC;
    signal OutYUV_V_val_3_V_blk_n : STD_LOGIC;
    signal OutYUV_V_val_4_V_blk_n : STD_LOGIC;
    signal OutYUV_V_val_5_V_blk_n : STD_LOGIC;
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_exitcond_i_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal HwReg_HeightOut_cast_1_blk_n : STD_LOGIC;
    signal p_HwReg_ColorMode_loc_blk_n : STD_LOGIC;
    signal j_i_i_i_reg_292 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal HwReg_HeightOut_cast_reg_545 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_reg_550 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_reg_558 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_reg_unsigned_short_s_fu_307_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_i_reg_568 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_reg_unsigned_short_s_fu_307_ap_done : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_313_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal tmp_39_i_i_i_fu_336_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_39_i_i_i_reg_573 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_40_i_i_i_fu_350_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_40_i_i_i_reg_578 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond3_i_i_i_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3 : BOOLEAN;
    signal i_fu_361_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_587 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal OutYUV_V_val_0_V0_status : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_376_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal axi_last_V_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_601 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_fu_515_p5 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_307_ap_start : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_307_ap_idle : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_307_ap_ready : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_313_ap_start : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_313_ap_idle : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_313_ap_ready : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_313_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reg_unsigned_short_s_fu_313_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal i_i_i_i_reg_281 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call21 : BOOLEAN;
    signal ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call22 : BOOLEAN;
    signal OutYUV_V_val_0_V0_update : STD_LOGIC;
    signal tmp_user_V_fu_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_36_i_fu_346_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast_i_i_i_fu_367_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_0_i_i_i_fu_423_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_2_0_i_i_i_fu_415_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_i_88_fu_445_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_45_i_fu_459_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_i_fu_473_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_i_fu_487_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_i_fu_494_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_48_i_fu_480_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_i_fu_466_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_44_i_fu_452_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_438_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal axi_0_2_0_i_i_i_fu_431_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_51_i_fu_501_p6 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component bd_077c_vsc_0_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_reg_unsigned_short_s_fu_307 : component bd_077c_vsc_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reg_unsigned_short_s_fu_307_ap_start,
        ap_done => grp_reg_unsigned_short_s_fu_307_ap_done,
        ap_idle => grp_reg_unsigned_short_s_fu_307_ap_idle,
        ap_ready => grp_reg_unsigned_short_s_fu_307_ap_ready,
        in_r => HwReg_HeightOut_cast_reg_545,
        ap_return => grp_reg_unsigned_short_s_fu_307_ap_return);

    grp_reg_unsigned_short_s_fu_313 : component bd_077c_vsc_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reg_unsigned_short_s_fu_313_ap_start,
        ap_done => grp_reg_unsigned_short_s_fu_313_ap_done,
        ap_idle => grp_reg_unsigned_short_s_fu_313_ap_idle,
        ap_ready => grp_reg_unsigned_short_s_fu_313_ap_ready,
        in_r => grp_reg_unsigned_short_s_fu_313_in_r,
        ap_return => grp_reg_unsigned_short_s_fu_313_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_1 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_0 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_0 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_reg_unsigned_short_s_fu_307_ap_ready)) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_reg_unsigned_short_s_fu_313_ap_ready)) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_data_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_data_V_1_vld_out))) then 
                                        m_axis_video_V_data_V_1_sel_rd <= not(m_axis_video_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_data_V_1_ack_in) and (ap_const_logic_1 = m_axis_video_V_data_V_1_vld_in))) then 
                                        m_axis_video_V_data_V_1_sel_wr <= not(m_axis_video_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (ap_const_logic_0 = m_axis_video_V_data_V_1_vld_in)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (ap_const_logic_0 = m_axis_video_V_data_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_data_V_1_ack_out)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (ap_const_logic_0 = m_axis_video_V_data_V_1_ack_out)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (ap_const_logic_0 = m_axis_video_V_data_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_data_V_1_vld_in)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_data_V_1_vld_in))) and (m_axis_video_V_data_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (ap_const_logic_1 = m_axis_video_V_data_V_1_ack_out)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (ap_const_logic_1 = m_axis_video_V_data_V_1_vld_in)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_dest_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_vld_out))) then 
                                        m_axis_video_V_dest_V_1_sel_rd <= not(m_axis_video_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_0 = m_axis_video_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_0 = m_axis_video_V_dest_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_ack_out)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_vld_in)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_dest_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_dest_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_dest_V_1_state) and (ap_const_logic_1 = m_axis_video_V_dest_V_1_vld_in)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_id_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_id_V_1_vld_out))) then 
                                        m_axis_video_V_id_V_1_sel_rd <= not(m_axis_video_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_id_V_1_state) and (ap_const_logic_0 = m_axis_video_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_id_V_1_state) and (ap_const_logic_0 = m_axis_video_V_id_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_id_V_1_ack_out)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_id_V_1_state) and (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_id_V_1_state) and (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_id_V_1_vld_in)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_id_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_id_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_id_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_id_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_id_V_1_state) and (ap_const_logic_1 = m_axis_video_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_id_V_1_state) and (ap_const_logic_1 = m_axis_video_V_id_V_1_vld_in)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_keep_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_vld_out))) then 
                                        m_axis_video_V_keep_V_1_sel_rd <= not(m_axis_video_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_0 = m_axis_video_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_0 = m_axis_video_V_keep_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_ack_out)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_vld_in)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_keep_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_keep_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_keep_V_1_state) and (ap_const_logic_1 = m_axis_video_V_keep_V_1_vld_in)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_last_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_last_V_1_vld_out))) then 
                                        m_axis_video_V_last_V_1_sel_rd <= not(m_axis_video_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_last_V_1_ack_in) and (ap_const_logic_1 = m_axis_video_V_last_V_1_vld_in))) then 
                                        m_axis_video_V_last_V_1_sel_wr <= not(m_axis_video_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_last_V_1_state) and (ap_const_logic_0 = m_axis_video_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_last_V_1_state) and (ap_const_logic_0 = m_axis_video_V_last_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_last_V_1_ack_out)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_last_V_1_state) and (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_last_V_1_state) and (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_last_V_1_vld_in)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_last_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_last_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_last_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_last_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_last_V_1_state) and (ap_const_logic_1 = m_axis_video_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_last_V_1_state) and (ap_const_logic_1 = m_axis_video_V_last_V_1_vld_in)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_strb_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_vld_out))) then 
                                        m_axis_video_V_strb_V_1_sel_rd <= not(m_axis_video_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_0 = m_axis_video_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_0 = m_axis_video_V_strb_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_ack_out)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_vld_in)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_strb_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_strb_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_strb_V_1_state) and (ap_const_logic_1 = m_axis_video_V_strb_V_1_vld_in)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_user_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_user_V_1_vld_out))) then 
                                        m_axis_video_V_user_V_1_sel_rd <= not(m_axis_video_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = m_axis_video_V_user_V_1_ack_in) and (ap_const_logic_1 = m_axis_video_V_user_V_1_vld_in))) then 
                                        m_axis_video_V_user_V_1_sel_wr <= not(m_axis_video_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_axis_video_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = m_axis_video_V_user_V_1_state) and (ap_const_logic_0 = m_axis_video_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = m_axis_video_V_user_V_1_state) and (ap_const_logic_0 = m_axis_video_V_user_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_user_V_1_ack_out)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = m_axis_video_V_user_V_1_state) and (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_out)) or ((ap_const_lv2_3 = m_axis_video_V_user_V_1_state) and (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_user_V_1_vld_in)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = m_axis_video_V_user_V_1_vld_in) and (ap_const_logic_1 = m_axis_video_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = m_axis_video_V_user_V_1_ack_out) and (ap_const_logic_1 = m_axis_video_V_user_V_1_vld_in))) and (ap_const_lv2_3 = m_axis_video_V_user_V_1_state)) or ((ap_const_lv2_1 = m_axis_video_V_user_V_1_state) and (ap_const_logic_1 = m_axis_video_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = m_axis_video_V_user_V_1_state) and (ap_const_logic_1 = m_axis_video_V_user_V_1_vld_in)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_i_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_i_i_i_reg_281 <= i_reg_587;
            elsif (((ap_block_state2_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_i_i_reg_281 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_i_i_i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_0 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_i_i_i_reg_292 <= ap_const_lv11_0;
            elsif (((ap_const_lv1_0 = exitcond_i_fu_371_p2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_i_i_reg_292 <= j_fu_376_p2;
            end if; 
        end if;
    end process;

    tmp_user_V_fu_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_user_V_fu_214 <= ap_const_lv1_0;
            elsif ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_user_V_fu_214 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                HwReg_HeightOut_cast_reg_545 <= HwReg_HeightOut_cast_1_dout;
                sel_tmp2_i_reg_558 <= sel_tmp2_i_fu_325_p2;
                sel_tmp_i_reg_550 <= sel_tmp_i_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_reg_592 <= exitcond_i_reg_592;
                exitcond_i_reg_592 <= exitcond_i_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = exitcond_i_fu_371_p2) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_last_V_reg_601 <= axi_last_V_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                i_reg_587 <= i_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_data_V_1_load_A)) then
                m_axis_video_V_data_V_1_payload_A <= tmp_data_V_fu_515_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_data_V_1_load_B)) then
                m_axis_video_V_data_V_1_payload_B <= tmp_data_V_fu_515_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_last_V_1_load_A)) then
                m_axis_video_V_last_V_1_payload_A <= axi_last_V_reg_601;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_last_V_1_load_B)) then
                m_axis_video_V_last_V_1_payload_B <= axi_last_V_reg_601;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_user_V_1_load_A)) then
                m_axis_video_V_user_V_1_payload_A <= tmp_user_V_fu_214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = m_axis_video_V_user_V_1_load_B)) then
                m_axis_video_V_user_V_1_payload_B <= tmp_user_V_fu_214;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_state2_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_39_i_i_i_reg_573 <= grp_reg_unsigned_short_s_fu_313_ap_return(11 downto 1);
                tmp_40_i_i_i_reg_578 <= tmp_40_i_i_i_fu_350_p2;
                tmp_i_i_i_reg_568 <= grp_reg_unsigned_short_s_fu_307_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axis_video_V_data_V_1_ack_in, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_dest_V_1_ack_in, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, exitcond3_i_i_i_fu_356_p2, ap_CS_fsm_state3, exitcond_i_fu_371_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_block_state2_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_1 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_0 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_1 = exitcond_i_fu_371_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and not(((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_lv1_1 = exitcond_i_fu_371_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    HwReg_HeightOut_cast_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_HeightOut_cast_1_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_HeightOut_cast_1_blk_n <= HwReg_HeightOut_cast_1_empty_n;
        else 
            HwReg_HeightOut_cast_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_HeightOut_cast_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n)
    begin
        if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_HeightOut_cast_1_read <= ap_const_logic_1;
        else 
            HwReg_HeightOut_cast_1_read <= ap_const_logic_0;
        end if; 
    end process;

    OutYUV_V_val_0_V0_status <= (OutYUV_V_val_5_V_empty_n and OutYUV_V_val_4_V_empty_n and OutYUV_V_val_3_V_empty_n and OutYUV_V_val_2_V_empty_n and OutYUV_V_val_1_V_empty_n and OutYUV_V_val_0_V_empty_n);

    OutYUV_V_val_0_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_0_V0_update <= ap_const_logic_1;
        else 
            OutYUV_V_val_0_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    OutYUV_V_val_0_V_blk_n_assign_proc : process(OutYUV_V_val_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_0_V_blk_n <= OutYUV_V_val_0_V_empty_n;
        else 
            OutYUV_V_val_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_0_V_read <= OutYUV_V_val_0_V0_update;

    OutYUV_V_val_1_V_blk_n_assign_proc : process(OutYUV_V_val_1_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_1_V_blk_n <= OutYUV_V_val_1_V_empty_n;
        else 
            OutYUV_V_val_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_1_V_read <= OutYUV_V_val_0_V0_update;

    OutYUV_V_val_2_V_blk_n_assign_proc : process(OutYUV_V_val_2_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_2_V_blk_n <= OutYUV_V_val_2_V_empty_n;
        else 
            OutYUV_V_val_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_2_V_read <= OutYUV_V_val_0_V0_update;

    OutYUV_V_val_3_V_blk_n_assign_proc : process(OutYUV_V_val_3_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_3_V_blk_n <= OutYUV_V_val_3_V_empty_n;
        else 
            OutYUV_V_val_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_3_V_read <= OutYUV_V_val_0_V0_update;

    OutYUV_V_val_4_V_blk_n_assign_proc : process(OutYUV_V_val_4_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_4_V_blk_n <= OutYUV_V_val_4_V_empty_n;
        else 
            OutYUV_V_val_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_4_V_read <= OutYUV_V_val_0_V0_update;

    OutYUV_V_val_5_V_blk_n_assign_proc : process(OutYUV_V_val_5_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutYUV_V_val_5_V_blk_n <= OutYUV_V_val_5_V_empty_n;
        else 
            OutYUV_V_val_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OutYUV_V_val_5_V_read <= OutYUV_V_val_0_V0_update;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_592, OutYUV_V_val_0_V0_status)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_const_logic_0 = OutYUV_V_val_0_V0_status) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_enable_reg_pp0_iter2, OutYUV_V_val_0_V0_status, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_const_logic_0 = OutYUV_V_val_0_V0_status)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_enable_reg_pp0_iter2, OutYUV_V_val_0_V0_status, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and ((ap_const_boolean_1 = ap_block_state5_io) or ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_const_logic_0 = OutYUV_V_val_0_V0_status)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call21_assign_proc : process(ap_start, ap_done_reg, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n)
    begin
                ap_block_state1_ignore_call21 <= ((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call22_assign_proc : process(ap_start, ap_done_reg, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n)
    begin
                ap_block_state1_ignore_call22 <= ((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_reg_unsigned_short_s_fu_307_ap_done, grp_reg_unsigned_short_s_fu_313_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_const_logic_0 = grp_reg_unsigned_short_s_fu_313_ap_done) or (ap_const_logic_0 = grp_reg_unsigned_short_s_fu_307_ap_done));
    end process;


    ap_block_state3_assign_proc : process(m_axis_video_V_data_V_1_ack_in, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_dest_V_1_ack_in)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, exitcond_i_reg_592)
    begin
                ap_block_state5_io <= ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(exitcond_i_reg_592, OutYUV_V_val_0_V0_status)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_const_logic_0 = OutYUV_V_val_0_V0_status));
    end process;


    ap_block_state6_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, ap_reg_pp0_iter1_exitcond_i_reg_592)
    begin
                ap_block_state6_io <= ((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_reg_592) and (ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_i_fu_371_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i_fu_371_p2)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axis_video_V_data_V_1_ack_in, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_dest_V_1_ack_in, exitcond3_i_i_i_fu_356_p2, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_1 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axis_video_V_data_V_1_ack_in, m_axis_video_V_keep_V_1_ack_in, m_axis_video_V_strb_V_1_ack_in, m_axis_video_V_user_V_1_ack_in, m_axis_video_V_last_V_1_ack_in, m_axis_video_V_id_V_1_ack_in, m_axis_video_V_dest_V_1_ack_in, exitcond3_i_i_i_fu_356_p2, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = m_axis_video_V_data_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_dest_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_id_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_last_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_user_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_strb_V_1_ack_in) or (ap_const_logic_0 = m_axis_video_V_keep_V_1_ack_in))) and (ap_const_lv1_1 = exitcond3_i_i_i_fu_356_p2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axi_0_2_0_i_i_i_fu_431_p3 <= 
        p_Result_0_i_i_i_fu_423_p3 when (sel_tmp2_i_reg_558(0) = '1') else 
        p_Result_2_0_i_i_i_fu_415_p3;
    axi_last_V_fu_382_p2 <= "1" when (j_cast_i_i_i_fu_367_p1 = tmp_40_i_i_i_reg_578) else "0";
    exitcond3_i_i_i_fu_356_p2 <= "1" when (i_i_i_i_reg_281 = tmp_i_i_i_reg_568) else "0";
    exitcond_i_fu_371_p2 <= "1" when (j_i_i_i_reg_292 = tmp_39_i_i_i_reg_573) else "0";
    grp_reg_unsigned_short_s_fu_307_ap_start <= ap_reg_grp_reg_unsigned_short_s_fu_307_ap_start;
    grp_reg_unsigned_short_s_fu_313_ap_start <= ap_reg_grp_reg_unsigned_short_s_fu_313_ap_start;
    grp_reg_unsigned_short_s_fu_313_in_r <= HwReg_Width(12 - 1 downto 0);
    i_fu_361_p2 <= std_logic_vector(unsigned(i_i_i_i_reg_281) + unsigned(ap_const_lv12_1));
    j_cast_i_i_i_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_i_i_i_reg_292),12));
    j_fu_376_p2 <= std_logic_vector(unsigned(j_i_i_i_reg_292) + unsigned(ap_const_lv11_1));
    m_axis_video_TDATA <= m_axis_video_V_data_V_1_data_out;

    m_axis_video_TDATA_blk_n_assign_proc : process(m_axis_video_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_592, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_reg_592)
    begin
        if ((((ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_V_data_V_1_state(1);
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= m_axis_video_V_dest_V_1_data_out;
    m_axis_video_TID <= m_axis_video_V_id_V_1_data_out;
    m_axis_video_TKEEP <= m_axis_video_V_keep_V_1_data_out;
    m_axis_video_TLAST <= m_axis_video_V_last_V_1_data_out;
    m_axis_video_TSTRB <= m_axis_video_V_strb_V_1_data_out;
    m_axis_video_TUSER <= m_axis_video_V_user_V_1_data_out;
    m_axis_video_TVALID <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_data_V_1_ack_in <= m_axis_video_V_data_V_1_state(1);
    m_axis_video_V_data_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_data_V_1_data_out_assign_proc : process(m_axis_video_V_data_V_1_payload_A, m_axis_video_V_data_V_1_payload_B, m_axis_video_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = m_axis_video_V_data_V_1_sel)) then 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_B;
        else 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_data_V_1_load_A <= (m_axis_video_V_data_V_1_state_cmp_full and not(m_axis_video_V_data_V_1_sel_wr));
    m_axis_video_V_data_V_1_load_B <= (m_axis_video_V_data_V_1_state_cmp_full and m_axis_video_V_data_V_1_sel_wr);
    m_axis_video_V_data_V_1_sel <= m_axis_video_V_data_V_1_sel_rd;
    m_axis_video_V_data_V_1_state_cmp_full <= '0' when (m_axis_video_V_data_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_data_V_1_vld_out <= m_axis_video_V_data_V_1_state(0);
    m_axis_video_V_dest_V_1_ack_in <= m_axis_video_V_dest_V_1_state(1);
    m_axis_video_V_dest_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_dest_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_dest_V_1_sel <= m_axis_video_V_dest_V_1_sel_rd;

    m_axis_video_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_dest_V_1_vld_out <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_id_V_1_ack_in <= m_axis_video_V_id_V_1_state(1);
    m_axis_video_V_id_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_id_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_id_V_1_sel <= m_axis_video_V_id_V_1_sel_rd;

    m_axis_video_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_id_V_1_vld_out <= m_axis_video_V_id_V_1_state(0);
    m_axis_video_V_keep_V_1_ack_in <= m_axis_video_V_keep_V_1_state(1);
    m_axis_video_V_keep_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_keep_V_1_data_out <= ap_const_lv6_3F;
    m_axis_video_V_keep_V_1_sel <= m_axis_video_V_keep_V_1_sel_rd;

    m_axis_video_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_keep_V_1_vld_out <= m_axis_video_V_keep_V_1_state(0);
    m_axis_video_V_last_V_1_ack_in <= m_axis_video_V_last_V_1_state(1);
    m_axis_video_V_last_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_last_V_1_data_out_assign_proc : process(m_axis_video_V_last_V_1_payload_A, m_axis_video_V_last_V_1_payload_B, m_axis_video_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = m_axis_video_V_last_V_1_sel)) then 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_B;
        else 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_last_V_1_load_A <= (m_axis_video_V_last_V_1_state_cmp_full and not(m_axis_video_V_last_V_1_sel_wr));
    m_axis_video_V_last_V_1_load_B <= (m_axis_video_V_last_V_1_state_cmp_full and m_axis_video_V_last_V_1_sel_wr);
    m_axis_video_V_last_V_1_sel <= m_axis_video_V_last_V_1_sel_rd;
    m_axis_video_V_last_V_1_state_cmp_full <= '0' when (m_axis_video_V_last_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_last_V_1_vld_out <= m_axis_video_V_last_V_1_state(0);
    m_axis_video_V_strb_V_1_ack_in <= m_axis_video_V_strb_V_1_state(1);
    m_axis_video_V_strb_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_strb_V_1_data_out <= ap_const_lv6_0;
    m_axis_video_V_strb_V_1_sel <= m_axis_video_V_strb_V_1_sel_rd;

    m_axis_video_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_strb_V_1_vld_out <= m_axis_video_V_strb_V_1_state(0);
    m_axis_video_V_user_V_1_ack_in <= m_axis_video_V_user_V_1_state(1);
    m_axis_video_V_user_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_user_V_1_data_out_assign_proc : process(m_axis_video_V_user_V_1_payload_A, m_axis_video_V_user_V_1_payload_B, m_axis_video_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = m_axis_video_V_user_V_1_sel)) then 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_B;
        else 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_user_V_1_load_A <= (m_axis_video_V_user_V_1_state_cmp_full and not(m_axis_video_V_user_V_1_sel_wr));
    m_axis_video_V_user_V_1_load_B <= (m_axis_video_V_user_V_1_state_cmp_full and m_axis_video_V_user_V_1_sel_wr);
    m_axis_video_V_user_V_1_sel <= m_axis_video_V_user_V_1_sel_rd;
    m_axis_video_V_user_V_1_state_cmp_full <= '0' when (m_axis_video_V_user_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_592, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_592) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_user_V_1_vld_out <= m_axis_video_V_user_V_1_state(0);

    p_HwReg_ColorMode_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_HwReg_ColorMode_loc_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_HwReg_ColorMode_loc_blk_n <= p_HwReg_ColorMode_loc_empty_n;
        else 
            p_HwReg_ColorMode_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_HwReg_ColorMode_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_HeightOut_cast_1_empty_n, p_HwReg_ColorMode_loc_empty_n)
    begin
        if ((not(((ap_const_logic_0 = p_HwReg_ColorMode_loc_empty_n) or (ap_const_logic_0 = HwReg_HeightOut_cast_1_empty_n) or (ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_HwReg_ColorMode_loc_read <= ap_const_logic_1;
        else 
            p_HwReg_ColorMode_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_0_i_i_i_fu_423_p3 <= (ap_const_lv40_FFFFFFFFFF & OutYUV_V_val_1_V_dout);
    p_Result_2_0_i_i_i_fu_415_p3 <= (ap_const_lv40_FFFFFFFFFF & OutYUV_V_val_0_V_dout);
    sel_tmp2_i_fu_325_p2 <= "1" when (p_HwReg_ColorMode_loc_dout = ap_const_lv8_0) else "0";
    sel_tmp_i_fu_319_p2 <= "1" when (p_HwReg_ColorMode_loc_dout = ap_const_lv8_1) else "0";
    tmp_36_i_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_i_i_i_fu_336_p4),12));
    tmp_39_i_i_i_fu_336_p4 <= grp_reg_unsigned_short_s_fu_313_ap_return(11 downto 1);
    tmp_40_i_i_i_fu_350_p2 <= std_logic_vector(signed(ap_const_lv12_FFF) + signed(tmp_36_i_fu_346_p1));
    tmp_44_i_fu_452_p3 <= 
        OutYUV_V_val_0_V_dout when (sel_tmp2_i_reg_558(0) = '1') else 
        tmp_i_88_fu_445_p3;
    tmp_45_i_fu_459_p3 <= 
        OutYUV_V_val_3_V_dout when (sel_tmp_i_reg_550(0) = '1') else 
        OutYUV_V_val_4_V_dout;
    tmp_46_i_fu_466_p3 <= 
        OutYUV_V_val_4_V_dout when (sel_tmp2_i_reg_558(0) = '1') else 
        tmp_45_i_fu_459_p3;
    tmp_47_i_fu_473_p3 <= 
        OutYUV_V_val_4_V_dout when (sel_tmp_i_reg_550(0) = '1') else 
        OutYUV_V_val_5_V_dout;
    tmp_48_i_fu_480_p3 <= 
        OutYUV_V_val_5_V_dout when (sel_tmp2_i_reg_558(0) = '1') else 
        tmp_47_i_fu_473_p3;
    tmp_49_i_fu_487_p3 <= 
        OutYUV_V_val_5_V_dout when (sel_tmp_i_reg_550(0) = '1') else 
        OutYUV_V_val_2_V_dout;
    tmp_50_i_fu_494_p3 <= 
        OutYUV_V_val_3_V_dout when (sel_tmp2_i_reg_558(0) = '1') else 
        tmp_49_i_fu_487_p3;
    tmp_51_i_fu_501_p6 <= ((((tmp_50_i_fu_494_p3 & tmp_48_i_fu_480_p3) & tmp_46_i_fu_466_p3) & tmp_44_i_fu_452_p3) & tmp_i_fu_438_p3);
    tmp_data_V_fu_515_p5 <= (tmp_51_i_fu_501_p6 & axi_0_2_0_i_i_i_fu_431_p3(7 downto 0));
    tmp_i_88_fu_445_p3 <= 
        OutYUV_V_val_2_V_dout when (sel_tmp_i_reg_550(0) = '1') else 
        OutYUV_V_val_3_V_dout;
    tmp_i_fu_438_p3 <= 
        OutYUV_V_val_2_V_dout when (sel_tmp2_i_reg_558(0) = '1') else 
        OutYUV_V_val_1_V_dout;
end behav;
