-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_039a_csc_0_AXIvideo2MultiPixStr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (5 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (5 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_V_val_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_0_V_full_n : IN STD_LOGIC;
    stream_in_V_val_0_V_write : OUT STD_LOGIC;
    stream_in_V_val_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_1_V_full_n : IN STD_LOGIC;
    stream_in_V_val_1_V_write : OUT STD_LOGIC;
    stream_in_V_val_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_2_V_full_n : IN STD_LOGIC;
    stream_in_V_val_2_V_write : OUT STD_LOGIC;
    stream_in_V_val_3_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_3_V_full_n : IN STD_LOGIC;
    stream_in_V_val_3_V_write : OUT STD_LOGIC;
    stream_in_V_val_4_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_4_V_full_n : IN STD_LOGIC;
    stream_in_V_val_4_V_write : OUT STD_LOGIC;
    stream_in_V_val_5_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_in_V_val_5_V_full_n : IN STD_LOGIC;
    stream_in_V_val_5_V_write : OUT STD_LOGIC;
    HwReg_height : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_width : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_InVideoFormat : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of bd_039a_csc_0_AXIvideo2MultiPixStr is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_axis_video_V_data_V_0_data_out : STD_LOGIC_VECTOR (47 downto 0);
    signal s_axis_video_V_data_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_data_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_data_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_data_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_data_V_0_payload_A : STD_LOGIC_VECTOR (47 downto 0);
    signal s_axis_video_V_data_V_0_payload_B : STD_LOGIC_VECTOR (47 downto 0);
    signal s_axis_video_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_data_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_data_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_data_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_user_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_user_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_user_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_user_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_user_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_user_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_last_V_0_vld_out : STD_LOGIC;
    signal s_axis_video_V_last_V_0_ack_in : STD_LOGIC;
    signal s_axis_video_V_last_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal s_axis_video_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal s_axis_video_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal s_axis_video_V_last_V_0_sel : STD_LOGIC;
    signal s_axis_video_V_last_V_0_load_A : STD_LOGIC;
    signal s_axis_video_V_last_V_0_load_B : STD_LOGIC;
    signal s_axis_video_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_vld_in : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_ack_out : STD_LOGIC;
    signal s_axis_video_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal s_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_i_reg_692 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_reg_701 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal eol_2_i_i_reg_363 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_val_0_V_blk_n : STD_LOGIC;
    signal stream_in_V_val_1_V_blk_n : STD_LOGIC;
    signal stream_in_V_val_2_V_blk_n : STD_LOGIC;
    signal stream_in_V_val_3_V_blk_n : STD_LOGIC;
    signal stream_in_V_val_4_V_blk_n : STD_LOGIC;
    signal stream_in_V_val_5_V_blk_n : STD_LOGIC;
    signal eol_i_i_reg_293 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_i_i_reg_305 : STD_LOGIC_VECTOR (10 downto 0);
    signal eol_reg_316 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_1_i_i_reg_327 : STD_LOGIC_VECTOR (47 downto 0);
    signal axi_last_V_3_i_i_reg_374 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_data_V_3_i_i_reg_386 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_reg_unsigned_short_s_fu_416_ap_done : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_422_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_reg_unsigned_short_s_fu_416_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_reg_631 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reg_unsigned_short_s_fu_422_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_i_i_75_reg_636 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_data_V_reg_641 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_last_V_reg_649 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_661 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sel_tmp_i_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_i_i_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_461_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_687 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_i_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op72_read_state7 : BOOLEAN;
    signal stream_in_V_val_0_V1_status : STD_LOGIC;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal j_fu_472_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal brmerge_i_i_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_eol_2_i_i_phi_fu_366_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_reg_unsigned_short_s_fu_416_ap_start : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_416_ap_idle : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_416_ap_ready : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_416_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_reg_unsigned_short_s_fu_422_ap_start : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_422_ap_idle : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_422_ap_ready : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_422_in_r : STD_LOGIC_VECTOR (11 downto 0);
    signal axi_last_V1_i_i_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal axi_data_V1_i_i_reg_272 : STD_LOGIC_VECTOR (47 downto 0);
    signal i_i_i_reg_282 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_eol_i_i_phi_fu_297_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_355_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp1_iter1_p_Val2_s_reg_351 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call12 : BOOLEAN;
    signal ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call13 : BOOLEAN;
    signal stream_in_V_val_0_V1_update : STD_LOGIC;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal sof_1_i_i_fu_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_val_3_V_fu_516_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_5_V_fu_536_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp1_i_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_4_V_1_fu_526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp5_i_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_0_V_fu_492_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp9_i_fu_576_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_2_V_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pix_val_1_V_1_fu_502_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_user_V_fu_428_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_509 : BOOLEAN;

    component bd_039a_csc_0_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    grp_reg_unsigned_short_s_fu_416 : component bd_039a_csc_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reg_unsigned_short_s_fu_416_ap_start,
        ap_done => grp_reg_unsigned_short_s_fu_416_ap_done,
        ap_idle => grp_reg_unsigned_short_s_fu_416_ap_idle,
        ap_ready => grp_reg_unsigned_short_s_fu_416_ap_ready,
        in_r => grp_reg_unsigned_short_s_fu_416_in_r,
        ap_return => grp_reg_unsigned_short_s_fu_416_ap_return);

    grp_reg_unsigned_short_s_fu_422 : component bd_039a_csc_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reg_unsigned_short_s_fu_422_ap_start,
        ap_done => grp_reg_unsigned_short_s_fu_422_ap_done,
        ap_idle => grp_reg_unsigned_short_s_fu_422_ap_idle,
        ap_ready => grp_reg_unsigned_short_s_fu_422_ap_ready,
        in_r => grp_reg_unsigned_short_s_fu_422_in_r,
        ap_return => grp_reg_unsigned_short_s_fu_422_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i_fu_467_p2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_const_lv1_1 = ap_phi_mux_eol_2_i_i_phi_fu_366_p4) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_reg_unsigned_short_s_fu_416_ap_ready)) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_reg_unsigned_short_s_fu_422_ap_ready)) then 
                    ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_data_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_data_V_0_vld_out))) then 
                                        s_axis_video_V_data_V_0_sel_rd <= not(s_axis_video_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_data_V_0_ack_in) and (ap_const_logic_1 = s_axis_video_V_data_V_0_vld_in))) then 
                                        s_axis_video_V_data_V_0_sel_wr <= not(s_axis_video_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((s_axis_video_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_0 = s_axis_video_V_data_V_0_vld_in)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = s_axis_video_V_data_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_data_V_0_ack_out)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((s_axis_video_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_0 = s_axis_video_V_data_V_0_ack_out)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_3) and (ap_const_logic_0 = s_axis_video_V_data_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_data_V_0_vld_in)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = s_axis_video_V_data_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = s_axis_video_V_data_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_data_V_0_vld_in))) and (s_axis_video_V_data_V_0_state = ap_const_lv2_3)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_1) and (ap_const_logic_1 = s_axis_video_V_data_V_0_ack_out)) or ((s_axis_video_V_data_V_0_state = ap_const_lv2_2) and (ap_const_logic_1 = s_axis_video_V_data_V_0_vld_in)))) then 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_0 = s_axis_video_V_dest_V_0_vld_in)) or ((ap_const_lv2_3 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_0 = s_axis_video_V_dest_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_ack_out)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_0 = s_axis_video_V_dest_V_0_ack_out)) or ((ap_const_lv2_3 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_0 = s_axis_video_V_dest_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_vld_in)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = s_axis_video_V_dest_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_ack_out))) and not(((ap_const_logic_0 = s_axis_video_V_dest_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_vld_in))) and (ap_const_lv2_3 = s_axis_video_V_dest_V_0_state)) or ((ap_const_lv2_1 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_ack_out)) or ((ap_const_lv2_2 = s_axis_video_V_dest_V_0_state) and (ap_const_logic_1 = s_axis_video_V_dest_V_0_vld_in)))) then 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_last_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_last_V_0_vld_out))) then 
                                        s_axis_video_V_last_V_0_sel_rd <= not(s_axis_video_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_last_V_0_ack_in) and (ap_const_logic_1 = s_axis_video_V_last_V_0_vld_in))) then 
                                        s_axis_video_V_last_V_0_sel_wr <= not(s_axis_video_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = s_axis_video_V_last_V_0_state) and (ap_const_logic_0 = s_axis_video_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = s_axis_video_V_last_V_0_state) and (ap_const_logic_0 = s_axis_video_V_last_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_last_V_0_ack_out)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = s_axis_video_V_last_V_0_state) and (ap_const_logic_0 = s_axis_video_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = s_axis_video_V_last_V_0_state) and (ap_const_logic_0 = s_axis_video_V_last_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_last_V_0_vld_in)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = s_axis_video_V_last_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = s_axis_video_V_last_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_last_V_0_vld_in))) and (ap_const_lv2_3 = s_axis_video_V_last_V_0_state)) or ((ap_const_lv2_1 = s_axis_video_V_last_V_0_state) and (ap_const_logic_1 = s_axis_video_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = s_axis_video_V_last_V_0_state) and (ap_const_logic_1 = s_axis_video_V_last_V_0_vld_in)))) then 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_user_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_user_V_0_vld_out))) then 
                                        s_axis_video_V_user_V_0_sel_rd <= not(s_axis_video_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = s_axis_video_V_user_V_0_ack_in) and (ap_const_logic_1 = s_axis_video_V_user_V_0_vld_in))) then 
                                        s_axis_video_V_user_V_0_sel_wr <= not(s_axis_video_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    s_axis_video_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                s_axis_video_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = s_axis_video_V_user_V_0_state) and (ap_const_logic_0 = s_axis_video_V_user_V_0_vld_in)) or ((ap_const_lv2_3 = s_axis_video_V_user_V_0_state) and (ap_const_logic_0 = s_axis_video_V_user_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_user_V_0_ack_out)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = s_axis_video_V_user_V_0_state) and (ap_const_logic_0 = s_axis_video_V_user_V_0_ack_out)) or ((ap_const_lv2_3 = s_axis_video_V_user_V_0_state) and (ap_const_logic_0 = s_axis_video_V_user_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_user_V_0_vld_in)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = s_axis_video_V_user_V_0_vld_in) and (ap_const_logic_1 = s_axis_video_V_user_V_0_ack_out))) and not(((ap_const_logic_0 = s_axis_video_V_user_V_0_ack_out) and (ap_const_logic_1 = s_axis_video_V_user_V_0_vld_in))) and (ap_const_lv2_3 = s_axis_video_V_user_V_0_state)) or ((ap_const_lv2_1 = s_axis_video_V_user_V_0_state) and (ap_const_logic_1 = s_axis_video_V_user_V_0_ack_out)) or ((ap_const_lv2_2 = s_axis_video_V_user_V_0_state) and (ap_const_logic_1 = s_axis_video_V_user_V_0_vld_in)))) then 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    s_axis_video_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axi_data_V1_i_i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                axi_data_V1_i_i_reg_272 <= axi_data_V_3_i_i_reg_386;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                axi_data_V1_i_i_reg_272 <= tmp_data_V_reg_641;
            end if; 
        end if;
    end process;

    axi_data_V_1_i_i_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                axi_data_V_1_i_i_reg_327 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4;
            elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                axi_data_V_1_i_i_reg_327 <= axi_data_V1_i_i_reg_272;
            end if; 
        end if;
    end process;

    axi_data_V_3_i_i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_data_V_3_i_i_reg_386 <= axi_data_V_1_i_i_reg_327;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axi_data_V_3_i_i_reg_386 <= s_axis_video_V_data_V_0_data_out;
            end if; 
        end if;
    end process;

    axi_last_V1_i_i_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                axi_last_V1_i_i_reg_262 <= axi_last_V_3_i_i_reg_374;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                axi_last_V1_i_i_reg_262 <= tmp_last_V_reg_649;
            end if; 
        end if;
    end process;

    axi_last_V_3_i_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                axi_last_V_3_i_i_reg_374 <= eol_reg_316;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                axi_last_V_3_i_i_reg_374 <= s_axis_video_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_2_i_i_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                eol_2_i_i_reg_363 <= eol_i_i_reg_293;
            elsif (((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                eol_2_i_i_reg_363 <= s_axis_video_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    eol_i_i_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_i_i_reg_293 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4;
            elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                eol_i_i_reg_293 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    eol_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                eol_reg_316 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4;
            elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                eol_reg_316 <= axi_last_V1_i_i_reg_262;
            end if; 
        end if;
    end process;

    i_i_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_i_reg_282 <= i_reg_687;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_reg_282 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    j_i_i_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_467_p2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_i_i_reg_305 <= j_fu_472_p2;
            elsif (((ap_const_lv1_0 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_i_i_reg_305 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    sof_1_i_i_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_467_p2) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                sof_1_i_i_fu_200 <= ap_const_lv1_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                sof_1_i_i_fu_200 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_467_p2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                brmerge_i_i_reg_701 <= brmerge_i_i_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_i_reg_692 <= exitcond_i_fu_467_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_687 <= i_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_data_V_0_load_A)) then
                s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_data_V_0_load_B)) then
                s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_last_V_0_load_A)) then
                s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_last_V_0_load_B)) then
                s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_user_V_0_load_A)) then
                s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = s_axis_video_V_user_V_0_load_B)) then
                s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_data_V_reg_641 <= s_axis_video_V_data_V_0_data_out;
                tmp_last_V_reg_649 <= s_axis_video_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_state2_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_i_i_75_reg_636 <= grp_reg_unsigned_short_s_fu_422_ap_return;
                tmp_i_i_reg_631 <= grp_reg_unsigned_short_s_fu_416_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_i_reg_661 <= tmp_i_i_75_reg_636(11 downto 1);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, s_axis_video_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, exitcond3_i_i_fu_456_p2, ap_CS_fsm_state5, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_subdone, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_subdone, tmp_user_V_fu_428_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_block_state2_on_subcall_done = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_lv1_0 = tmp_user_V_fu_428_p1) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_const_lv1_1 = tmp_user_V_fu_428_p1) and (s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_lv1_1 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_block_pp1_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_block_pp2_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_i_reg_692, ap_predicate_op72_read_state7, stream_in_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_01001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op72_read_state7)) or ((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_0 = stream_in_V_val_0_V1_status))));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_i_reg_692, ap_predicate_op72_read_state7, stream_in_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op72_read_state7)) or ((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_0 = stream_in_V_val_0_V1_status))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp1_iter1, exitcond_i_reg_692, ap_predicate_op72_read_state7, stream_in_V_val_0_V1_status)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (((ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op72_read_state7)) or ((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_0 = stream_in_V_val_0_V1_status))));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp2_stage0_iter1_assign_proc : process(s_axis_video_V_data_V_0_vld_out, eol_2_i_i_reg_363)
    begin
                ap_block_state10_pp2_stage0_iter1 <= ((ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out));
    end process;


    ap_block_state1_ignore_call12_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call12 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call13_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call13 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(grp_reg_unsigned_short_s_fu_416_ap_done, grp_reg_unsigned_short_s_fu_422_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_const_logic_0 = grp_reg_unsigned_short_s_fu_422_ap_done) or (ap_const_logic_0 = grp_reg_unsigned_short_s_fu_416_ap_done));
    end process;

        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp1_stage0_iter1_assign_proc : process(s_axis_video_V_data_V_0_vld_out, exitcond_i_reg_692, ap_predicate_op72_read_state7, stream_in_V_val_0_V1_status)
    begin
                ap_block_state7_pp1_stage0_iter1 <= (((ap_const_logic_0 = s_axis_video_V_data_V_0_vld_out) and (ap_const_boolean_1 = ap_predicate_op72_read_state7)) or ((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_0 = stream_in_V_val_0_V1_status)));
    end process;

        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_509_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
                ap_condition_509 <= ((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond3_i_i_fu_456_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4_assign_proc : process(s_axis_video_V_last_V_0_data_out, brmerge_i_i_reg_701, eol_reg_316, ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_338, ap_condition_509)
    begin
        if ((ap_condition_509 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = brmerge_i_i_reg_701)) then 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4 <= eol_reg_316;
            elsif ((ap_const_lv1_0 = brmerge_i_i_reg_701)) then 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4 <= s_axis_video_V_last_V_0_data_out;
            else 
                ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_338;
            end if;
        else 
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4 <= ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_338;
        end if; 
    end process;


    ap_phi_mux_eol_2_i_i_phi_fu_366_p4_assign_proc : process(s_axis_video_V_last_V_0_data_out, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_i_i_reg_363)
    begin
        if (((ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_eol_2_i_i_phi_fu_366_p4 <= s_axis_video_V_last_V_0_data_out;
        else 
            ap_phi_mux_eol_2_i_i_phi_fu_366_p4 <= eol_2_i_i_reg_363;
        end if; 
    end process;


    ap_phi_mux_eol_i_i_phi_fu_297_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692, eol_i_i_reg_293, ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_eol_i_i_phi_fu_297_p4 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_343_p4;
        else 
            ap_phi_mux_eol_i_i_phi_fu_297_p4 <= eol_i_i_reg_293;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_355_p4_assign_proc : process(s_axis_video_V_data_V_0_data_out, brmerge_i_i_reg_701, axi_data_V_1_i_i_reg_327, ap_phi_reg_pp1_iter1_p_Val2_s_reg_351, ap_condition_509)
    begin
        if ((ap_condition_509 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = brmerge_i_i_reg_701)) then 
                ap_phi_mux_p_Val2_s_phi_fu_355_p4 <= axi_data_V_1_i_i_reg_327;
            elsif ((ap_const_lv1_0 = brmerge_i_i_reg_701)) then 
                ap_phi_mux_p_Val2_s_phi_fu_355_p4 <= s_axis_video_V_data_V_0_data_out;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_355_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_351;
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_355_p4 <= ap_phi_reg_pp1_iter1_p_Val2_s_reg_351;
        end if; 
    end process;

    ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_338 <= "X";
    ap_phi_reg_pp1_iter1_p_Val2_s_reg_351 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op72_read_state7_assign_proc : process(exitcond_i_reg_692, brmerge_i_i_reg_701)
    begin
                ap_predicate_op72_read_state7 <= ((ap_const_lv1_0 = brmerge_i_i_reg_701) and (ap_const_lv1_0 = exitcond_i_reg_692));
    end process;


    ap_ready_assign_proc : process(exitcond3_i_i_fu_456_p2, ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = exitcond3_i_i_fu_456_p2) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_i_i_fu_481_p2 <= (sof_1_i_i_fu_200 or ap_phi_mux_eol_i_i_phi_fu_297_p4);
    exitcond3_i_i_fu_456_p2 <= "1" when (i_i_i_reg_282 = tmp_i_i_reg_631) else "0";
    exitcond_i_fu_467_p2 <= "1" when (j_i_i_reg_305 = tmp_i_reg_661) else "0";
    grp_reg_unsigned_short_s_fu_416_ap_start <= ap_reg_grp_reg_unsigned_short_s_fu_416_ap_start;
    grp_reg_unsigned_short_s_fu_416_in_r <= HwReg_height(12 - 1 downto 0);
    grp_reg_unsigned_short_s_fu_422_ap_start <= ap_reg_grp_reg_unsigned_short_s_fu_422_ap_start;
    grp_reg_unsigned_short_s_fu_422_in_r <= HwReg_width(12 - 1 downto 0);
    i_fu_461_p2 <= std_logic_vector(unsigned(i_i_i_reg_282) + unsigned(ap_const_lv12_1));
    j_fu_472_p2 <= std_logic_vector(unsigned(j_i_i_reg_305) + unsigned(ap_const_lv11_1));
    pix_val_0_V_fu_492_p4 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(23 downto 16);
    pix_val_1_V_1_fu_502_p1 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(8 - 1 downto 0);
    pix_val_2_V_fu_506_p4 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(15 downto 8);
    pix_val_3_V_fu_516_p4 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(47 downto 40);
    pix_val_4_V_1_fu_526_p4 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(31 downto 24);
    pix_val_5_V_fu_536_p4 <= ap_phi_mux_p_Val2_s_phi_fu_355_p4(39 downto 32);

    s_axis_video_TDATA_blk_n_assign_proc : process(s_axis_video_V_data_V_0_state, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692, brmerge_i_i_reg_701, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, eol_2_i_i_reg_363)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_block_pp2_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_lv1_0 = brmerge_i_i_reg_701) and (ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            s_axis_video_TDATA_blk_n <= s_axis_video_V_data_V_0_state(0);
        else 
            s_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_video_TREADY <= s_axis_video_V_dest_V_0_state(1);
    s_axis_video_V_data_V_0_ack_in <= s_axis_video_V_data_V_0_state(1);

    s_axis_video_V_data_V_0_ack_out_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363, ap_predicate_op72_read_state7, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op72_read_state7) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_axis_video_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_data_V_0_data_out_assign_proc : process(s_axis_video_V_data_V_0_payload_A, s_axis_video_V_data_V_0_payload_B, s_axis_video_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = s_axis_video_V_data_V_0_sel)) then 
            s_axis_video_V_data_V_0_data_out <= s_axis_video_V_data_V_0_payload_B;
        else 
            s_axis_video_V_data_V_0_data_out <= s_axis_video_V_data_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_data_V_0_load_A <= (s_axis_video_V_data_V_0_state_cmp_full and not(s_axis_video_V_data_V_0_sel_wr));
    s_axis_video_V_data_V_0_load_B <= (s_axis_video_V_data_V_0_state_cmp_full and s_axis_video_V_data_V_0_sel_wr);
    s_axis_video_V_data_V_0_sel <= s_axis_video_V_data_V_0_sel_rd;
    s_axis_video_V_data_V_0_state_cmp_full <= '0' when (s_axis_video_V_data_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_data_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_data_V_0_vld_out <= s_axis_video_V_data_V_0_state(0);

    s_axis_video_V_dest_V_0_ack_out_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363, ap_predicate_op72_read_state7, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op72_read_state7) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_axis_video_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    s_axis_video_V_dest_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_last_V_0_ack_in <= s_axis_video_V_last_V_0_state(1);

    s_axis_video_V_last_V_0_ack_out_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363, ap_predicate_op72_read_state7, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op72_read_state7) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_axis_video_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_last_V_0_data_out_assign_proc : process(s_axis_video_V_last_V_0_payload_A, s_axis_video_V_last_V_0_payload_B, s_axis_video_V_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = s_axis_video_V_last_V_0_sel)) then 
            s_axis_video_V_last_V_0_data_out <= s_axis_video_V_last_V_0_payload_B;
        else 
            s_axis_video_V_last_V_0_data_out <= s_axis_video_V_last_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_last_V_0_load_A <= (s_axis_video_V_last_V_0_state_cmp_full and not(s_axis_video_V_last_V_0_sel_wr));
    s_axis_video_V_last_V_0_load_B <= (s_axis_video_V_last_V_0_state_cmp_full and s_axis_video_V_last_V_0_sel_wr);
    s_axis_video_V_last_V_0_sel <= s_axis_video_V_last_V_0_sel_rd;
    s_axis_video_V_last_V_0_state_cmp_full <= '0' when (s_axis_video_V_last_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_last_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_last_V_0_vld_out <= s_axis_video_V_last_V_0_state(0);
    s_axis_video_V_user_V_0_ack_in <= s_axis_video_V_user_V_0_state(1);

    s_axis_video_V_user_V_0_ack_out_assign_proc : process(s_axis_video_V_data_V_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, eol_2_i_i_reg_363, ap_predicate_op72_read_state7, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_block_pp2_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = eol_2_i_i_reg_363) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_boolean_1 = ap_predicate_op72_read_state7) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((s_axis_video_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_axis_video_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            s_axis_video_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    s_axis_video_V_user_V_0_data_out_assign_proc : process(s_axis_video_V_user_V_0_payload_A, s_axis_video_V_user_V_0_payload_B, s_axis_video_V_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = s_axis_video_V_user_V_0_sel)) then 
            s_axis_video_V_user_V_0_data_out <= s_axis_video_V_user_V_0_payload_B;
        else 
            s_axis_video_V_user_V_0_data_out <= s_axis_video_V_user_V_0_payload_A;
        end if; 
    end process;

    s_axis_video_V_user_V_0_load_A <= (s_axis_video_V_user_V_0_state_cmp_full and not(s_axis_video_V_user_V_0_sel_wr));
    s_axis_video_V_user_V_0_load_B <= (s_axis_video_V_user_V_0_state_cmp_full and s_axis_video_V_user_V_0_sel_wr);
    s_axis_video_V_user_V_0_sel <= s_axis_video_V_user_V_0_sel_rd;
    s_axis_video_V_user_V_0_state_cmp_full <= '0' when (s_axis_video_V_user_V_0_state = ap_const_lv2_1) else '1';
    s_axis_video_V_user_V_0_vld_in <= s_axis_video_TVALID;
    s_axis_video_V_user_V_0_vld_out <= s_axis_video_V_user_V_0_state(0);
    sel_tmp1_i_fu_546_p3 <= 
        pix_val_3_V_fu_516_p4 when (sel_tmp_i_fu_441_p2(0) = '1') else 
        pix_val_5_V_fu_536_p4;
    sel_tmp2_i_fu_446_p2 <= "1" when (HwReg_InVideoFormat = ap_const_lv8_0) else "0";
    sel_tmp5_i_fu_561_p3 <= 
        pix_val_5_V_fu_536_p4 when (sel_tmp_i_fu_441_p2(0) = '1') else 
        pix_val_4_V_1_fu_526_p4;
    sel_tmp9_i_fu_576_p3 <= 
        pix_val_4_V_1_fu_526_p4 when (sel_tmp_i_fu_441_p2(0) = '1') else 
        pix_val_0_V_fu_492_p4;
    sel_tmp_i_fu_441_p2 <= "1" when (HwReg_InVideoFormat = ap_const_lv8_1) else "0";
    stream_in_V_val_0_V1_status <= (stream_in_V_val_5_V_full_n and stream_in_V_val_4_V_full_n and stream_in_V_val_3_V_full_n and stream_in_V_val_2_V_full_n and stream_in_V_val_1_V_full_n and stream_in_V_val_0_V_full_n);

    stream_in_V_val_0_V1_update_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_i_reg_692, ap_block_pp1_stage0_11001)
    begin
        if (((ap_block_pp1_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_reg_692) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_0_V1_update <= ap_const_logic_1;
        else 
            stream_in_V_val_0_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_val_0_V_blk_n_assign_proc : process(stream_in_V_val_0_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_0_V_blk_n <= stream_in_V_val_0_V_full_n;
        else 
            stream_in_V_val_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_0_V_din <= 
        pix_val_0_V_fu_492_p4 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        pix_val_1_V_1_fu_502_p1;
    stream_in_V_val_0_V_write <= stream_in_V_val_0_V1_update;

    stream_in_V_val_1_V_blk_n_assign_proc : process(stream_in_V_val_1_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_1_V_blk_n <= stream_in_V_val_1_V_full_n;
        else 
            stream_in_V_val_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_1_V_din <= 
        pix_val_1_V_1_fu_502_p1 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        pix_val_2_V_fu_506_p4;
    stream_in_V_val_1_V_write <= stream_in_V_val_0_V1_update;

    stream_in_V_val_2_V_blk_n_assign_proc : process(stream_in_V_val_2_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_2_V_blk_n <= stream_in_V_val_2_V_full_n;
        else 
            stream_in_V_val_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_2_V_din <= 
        pix_val_2_V_fu_506_p4 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        pix_val_0_V_fu_492_p4;
    stream_in_V_val_2_V_write <= stream_in_V_val_0_V1_update;

    stream_in_V_val_3_V_blk_n_assign_proc : process(stream_in_V_val_3_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_3_V_blk_n <= stream_in_V_val_3_V_full_n;
        else 
            stream_in_V_val_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_3_V_din <= 
        pix_val_3_V_fu_516_p4 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        sel_tmp9_i_fu_576_p3;
    stream_in_V_val_3_V_write <= stream_in_V_val_0_V1_update;

    stream_in_V_val_4_V_blk_n_assign_proc : process(stream_in_V_val_4_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_4_V_blk_n <= stream_in_V_val_4_V_full_n;
        else 
            stream_in_V_val_4_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_4_V_din <= 
        pix_val_4_V_1_fu_526_p4 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        sel_tmp5_i_fu_561_p3;
    stream_in_V_val_4_V_write <= stream_in_V_val_0_V1_update;

    stream_in_V_val_5_V_blk_n_assign_proc : process(stream_in_V_val_5_V_full_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_i_reg_692)
    begin
        if (((ap_const_lv1_0 = exitcond_i_reg_692) and (ap_block_pp1_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            stream_in_V_val_5_V_blk_n <= stream_in_V_val_5_V_full_n;
        else 
            stream_in_V_val_5_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_V_val_5_V_din <= 
        pix_val_5_V_fu_536_p4 when (sel_tmp2_i_fu_446_p2(0) = '1') else 
        sel_tmp1_i_fu_546_p3;
    stream_in_V_val_5_V_write <= stream_in_V_val_0_V1_update;
    tmp_user_V_fu_428_p1 <= s_axis_video_V_user_V_0_data_out;
end behav;
