// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c35b_csc_0_MultiPixStream2AXIvi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stream_csc_V_val_0_s_dout,
        stream_csc_V_val_0_s_empty_n,
        stream_csc_V_val_0_s_read,
        stream_csc_V_val_1_s_dout,
        stream_csc_V_val_1_s_empty_n,
        stream_csc_V_val_1_s_read,
        stream_csc_V_val_2_s_dout,
        stream_csc_V_val_2_s_empty_n,
        stream_csc_V_val_2_s_read,
        stream_csc_V_val_3_s_dout,
        stream_csc_V_val_3_s_empty_n,
        stream_csc_V_val_3_s_read,
        stream_csc_V_val_4_s_dout,
        stream_csc_V_val_4_s_empty_n,
        stream_csc_V_val_4_s_read,
        stream_csc_V_val_5_s_dout,
        stream_csc_V_val_5_s_empty_n,
        stream_csc_V_val_5_s_read,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        HwReg_height,
        HwReg_width,
        HwReg_OutVideoFormat
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] stream_csc_V_val_0_s_dout;
input   stream_csc_V_val_0_s_empty_n;
output   stream_csc_V_val_0_s_read;
input  [7:0] stream_csc_V_val_1_s_dout;
input   stream_csc_V_val_1_s_empty_n;
output   stream_csc_V_val_1_s_read;
input  [7:0] stream_csc_V_val_2_s_dout;
input   stream_csc_V_val_2_s_empty_n;
output   stream_csc_V_val_2_s_read;
input  [7:0] stream_csc_V_val_3_s_dout;
input   stream_csc_V_val_3_s_empty_n;
output   stream_csc_V_val_3_s_read;
input  [7:0] stream_csc_V_val_4_s_dout;
input   stream_csc_V_val_4_s_empty_n;
output   stream_csc_V_val_4_s_read;
input  [7:0] stream_csc_V_val_5_s_dout;
input   stream_csc_V_val_5_s_empty_n;
output   stream_csc_V_val_5_s_read;
output  [47:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [5:0] m_axis_video_TKEEP;
output  [5:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [15:0] HwReg_height;
input  [15:0] HwReg_width;
input  [7:0] HwReg_OutVideoFormat;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [47:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [47:0] m_axis_video_V_data_V_1_payload_A;
reg   [47:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
wire   [5:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_in;
wire    m_axis_video_V_keep_V_1_ack_out;
reg    m_axis_video_V_keep_V_1_sel_rd;
wire    m_axis_video_V_keep_V_1_sel;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire   [5:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_in;
wire    m_axis_video_V_strb_V_1_ack_out;
reg    m_axis_video_V_strb_V_1_sel_rd;
wire    m_axis_video_V_strb_V_1_sel;
reg   [1:0] m_axis_video_V_strb_V_1_state;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_in;
wire    m_axis_video_V_id_V_1_ack_out;
reg    m_axis_video_V_id_V_1_sel_rd;
wire    m_axis_video_V_id_V_1_sel;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_in;
wire    m_axis_video_V_dest_V_1_ack_out;
reg    m_axis_video_V_dest_V_1_sel_rd;
wire    m_axis_video_V_dest_V_1_sel;
reg   [1:0] m_axis_video_V_dest_V_1_state;
reg    stream_csc_V_val_0_s_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_566;
reg    stream_csc_V_val_1_s_blk_n;
reg    stream_csc_V_val_2_s_blk_n;
reg    stream_csc_V_val_3_s_blk_n;
reg    stream_csc_V_val_4_s_blk_n;
reg    stream_csc_V_val_5_s_blk_n;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_566;
reg   [10:0] j_i_i_reg_270;
reg    ap_block_state1;
wire   [11:0] grp_reg_unsigned_short_s_fu_289_ap_return;
reg   [11:0] tmp_i_i_reg_524;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_289_ap_done;
wire    grp_reg_unsigned_short_s_fu_295_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [10:0] tmp_12_cast_i_i_fu_306_p4;
reg   [10:0] tmp_12_cast_i_i_reg_529;
wire   [10:0] tmp_13_i_i_fu_316_p2;
reg   [10:0] tmp_13_i_i_reg_534;
wire   [0:0] sel_tmp_i_fu_322_p2;
wire   [0:0] sel_tmp2_i_fu_328_p2;
wire   [0:0] exitcond1_i_i_fu_334_p2;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire   [11:0] i_fu_339_p2;
reg   [11:0] i_reg_561;
wire   [0:0] exitcond_i_fu_345_p2;
wire    ap_block_state4_pp0_stage0_iter0;
wire    stream_csc_V_val_0_s0_status;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_fu_350_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] axi_last_V_fu_356_p2;
reg   [0:0] axi_last_V_reg_575;
wire   [47:0] tmp_data_V_fu_489_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    grp_reg_unsigned_short_s_fu_289_ap_start;
wire    grp_reg_unsigned_short_s_fu_289_ap_idle;
wire    grp_reg_unsigned_short_s_fu_289_ap_ready;
wire   [11:0] grp_reg_unsigned_short_s_fu_289_in_r;
wire    grp_reg_unsigned_short_s_fu_295_ap_start;
wire    grp_reg_unsigned_short_s_fu_295_ap_idle;
wire    grp_reg_unsigned_short_s_fu_295_ap_ready;
wire   [11:0] grp_reg_unsigned_short_s_fu_295_in_r;
wire   [11:0] grp_reg_unsigned_short_s_fu_295_ap_return;
reg   [11:0] i_i_i_reg_259;
wire    ap_CS_fsm_state7;
reg    ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start;
reg    ap_block_state1_ignore_call13;
reg    ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start;
reg    ap_block_state1_ignore_call14;
reg    stream_csc_V_val_0_s0_update;
reg   [0:0] tmp_user_V_fu_192;
reg    ap_block_pp0_stage0_01001;
wire   [47:0] p_Result_0_i_i_fu_397_p3;
wire   [47:0] p_Result_2_0_i_i_fu_389_p3;
wire   [7:0] tmp_i_73_fu_419_p3;
wire   [7:0] tmp_3_i_fu_433_p3;
wire   [7:0] tmp_5_i_fu_447_p3;
wire   [7:0] tmp_7_i_fu_461_p3;
wire   [7:0] tmp_8_i_fu_468_p3;
wire   [7:0] tmp_6_i_fu_454_p3;
wire   [7:0] tmp_4_i_fu_440_p3;
wire   [7:0] tmp_2_i_fu_426_p3;
wire   [7:0] tmp_i_fu_412_p3;
wire   [47:0] axi_0_2_0_i_i_fu_405_p3;
wire   [39:0] tmp_9_i_fu_475_p6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start = 1'b0;
end

bd_c35b_csc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_289_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_289_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_289_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_289_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_289_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_289_ap_return)
);

bd_c35b_csc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_295(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_295_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_295_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_295_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_295_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_295_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_295_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd1 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd0 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd0 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start <= 1'b0;
    end else begin
        if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_289_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start <= 1'b0;
    end else begin
        if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_295_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_data_V_1_ack_out) & (1'b1 == m_axis_video_V_data_V_1_vld_out))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_data_V_1_ack_in) & (1'b1 == m_axis_video_V_data_V_1_vld_in))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (1'b0 == m_axis_video_V_data_V_1_vld_in)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (1'b0 == m_axis_video_V_data_V_1_vld_in) & (1'b1 == m_axis_video_V_data_V_1_ack_out)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (1'b0 == m_axis_video_V_data_V_1_ack_out)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (1'b0 == m_axis_video_V_data_V_1_ack_out) & (1'b1 == m_axis_video_V_data_V_1_vld_in)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_data_V_1_vld_in) & (1'b1 == m_axis_video_V_data_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_data_V_1_ack_out) & (1'b1 == m_axis_video_V_data_V_1_vld_in)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (1'b1 == m_axis_video_V_data_V_1_ack_out)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (1'b1 == m_axis_video_V_data_V_1_vld_in)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_dest_V_1_ack_out) & (1'b1 == m_axis_video_V_dest_V_1_vld_out))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_dest_V_1_state) & (1'b0 == m_axis_video_V_dest_V_1_vld_in)) | ((2'd3 == m_axis_video_V_dest_V_1_state) & (1'b0 == m_axis_video_V_dest_V_1_vld_in) & (1'b1 == m_axis_video_V_dest_V_1_ack_out)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_dest_V_1_state) & (1'b0 == m_axis_video_V_dest_V_1_ack_out)) | ((2'd3 == m_axis_video_V_dest_V_1_state) & (1'b0 == m_axis_video_V_dest_V_1_ack_out) & (1'b1 == m_axis_video_V_dest_V_1_vld_in)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_dest_V_1_vld_in) & (1'b1 == m_axis_video_V_dest_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_dest_V_1_ack_out) & (1'b1 == m_axis_video_V_dest_V_1_vld_in)) & (2'd3 == m_axis_video_V_dest_V_1_state)) | ((2'd1 == m_axis_video_V_dest_V_1_state) & (1'b1 == m_axis_video_V_dest_V_1_ack_out)) | ((2'd2 == m_axis_video_V_dest_V_1_state) & (1'b1 == m_axis_video_V_dest_V_1_vld_in)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_id_V_1_ack_out) & (1'b1 == m_axis_video_V_id_V_1_vld_out))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_id_V_1_state) & (1'b0 == m_axis_video_V_id_V_1_vld_in)) | ((2'd3 == m_axis_video_V_id_V_1_state) & (1'b0 == m_axis_video_V_id_V_1_vld_in) & (1'b1 == m_axis_video_V_id_V_1_ack_out)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_id_V_1_state) & (1'b0 == m_axis_video_V_id_V_1_ack_out)) | ((2'd3 == m_axis_video_V_id_V_1_state) & (1'b0 == m_axis_video_V_id_V_1_ack_out) & (1'b1 == m_axis_video_V_id_V_1_vld_in)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_id_V_1_vld_in) & (1'b1 == m_axis_video_V_id_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_id_V_1_ack_out) & (1'b1 == m_axis_video_V_id_V_1_vld_in)) & (2'd3 == m_axis_video_V_id_V_1_state)) | ((2'd1 == m_axis_video_V_id_V_1_state) & (1'b1 == m_axis_video_V_id_V_1_ack_out)) | ((2'd2 == m_axis_video_V_id_V_1_state) & (1'b1 == m_axis_video_V_id_V_1_vld_in)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_keep_V_1_ack_out) & (1'b1 == m_axis_video_V_keep_V_1_vld_out))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_keep_V_1_state) & (1'b0 == m_axis_video_V_keep_V_1_vld_in)) | ((2'd3 == m_axis_video_V_keep_V_1_state) & (1'b0 == m_axis_video_V_keep_V_1_vld_in) & (1'b1 == m_axis_video_V_keep_V_1_ack_out)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_keep_V_1_state) & (1'b0 == m_axis_video_V_keep_V_1_ack_out)) | ((2'd3 == m_axis_video_V_keep_V_1_state) & (1'b0 == m_axis_video_V_keep_V_1_ack_out) & (1'b1 == m_axis_video_V_keep_V_1_vld_in)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_keep_V_1_vld_in) & (1'b1 == m_axis_video_V_keep_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_keep_V_1_ack_out) & (1'b1 == m_axis_video_V_keep_V_1_vld_in)) & (2'd3 == m_axis_video_V_keep_V_1_state)) | ((2'd1 == m_axis_video_V_keep_V_1_state) & (1'b1 == m_axis_video_V_keep_V_1_ack_out)) | ((2'd2 == m_axis_video_V_keep_V_1_state) & (1'b1 == m_axis_video_V_keep_V_1_vld_in)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_last_V_1_ack_out) & (1'b1 == m_axis_video_V_last_V_1_vld_out))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_last_V_1_ack_in) & (1'b1 == m_axis_video_V_last_V_1_vld_in))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_last_V_1_state) & (1'b0 == m_axis_video_V_last_V_1_vld_in)) | ((2'd3 == m_axis_video_V_last_V_1_state) & (1'b0 == m_axis_video_V_last_V_1_vld_in) & (1'b1 == m_axis_video_V_last_V_1_ack_out)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_last_V_1_state) & (1'b0 == m_axis_video_V_last_V_1_ack_out)) | ((2'd3 == m_axis_video_V_last_V_1_state) & (1'b0 == m_axis_video_V_last_V_1_ack_out) & (1'b1 == m_axis_video_V_last_V_1_vld_in)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_last_V_1_vld_in) & (1'b1 == m_axis_video_V_last_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_last_V_1_ack_out) & (1'b1 == m_axis_video_V_last_V_1_vld_in)) & (2'd3 == m_axis_video_V_last_V_1_state)) | ((2'd1 == m_axis_video_V_last_V_1_state) & (1'b1 == m_axis_video_V_last_V_1_ack_out)) | ((2'd2 == m_axis_video_V_last_V_1_state) & (1'b1 == m_axis_video_V_last_V_1_vld_in)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_strb_V_1_ack_out) & (1'b1 == m_axis_video_V_strb_V_1_vld_out))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_strb_V_1_state) & (1'b0 == m_axis_video_V_strb_V_1_vld_in)) | ((2'd3 == m_axis_video_V_strb_V_1_state) & (1'b0 == m_axis_video_V_strb_V_1_vld_in) & (1'b1 == m_axis_video_V_strb_V_1_ack_out)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_strb_V_1_state) & (1'b0 == m_axis_video_V_strb_V_1_ack_out)) | ((2'd3 == m_axis_video_V_strb_V_1_state) & (1'b0 == m_axis_video_V_strb_V_1_ack_out) & (1'b1 == m_axis_video_V_strb_V_1_vld_in)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_strb_V_1_vld_in) & (1'b1 == m_axis_video_V_strb_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_strb_V_1_ack_out) & (1'b1 == m_axis_video_V_strb_V_1_vld_in)) & (2'd3 == m_axis_video_V_strb_V_1_state)) | ((2'd1 == m_axis_video_V_strb_V_1_state) & (1'b1 == m_axis_video_V_strb_V_1_ack_out)) | ((2'd2 == m_axis_video_V_strb_V_1_state) & (1'b1 == m_axis_video_V_strb_V_1_vld_in)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_user_V_1_ack_out) & (1'b1 == m_axis_video_V_user_V_1_vld_out))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == m_axis_video_V_user_V_1_ack_in) & (1'b1 == m_axis_video_V_user_V_1_vld_in))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == m_axis_video_V_user_V_1_state) & (1'b0 == m_axis_video_V_user_V_1_vld_in)) | ((2'd3 == m_axis_video_V_user_V_1_state) & (1'b0 == m_axis_video_V_user_V_1_vld_in) & (1'b1 == m_axis_video_V_user_V_1_ack_out)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == m_axis_video_V_user_V_1_state) & (1'b0 == m_axis_video_V_user_V_1_ack_out)) | ((2'd3 == m_axis_video_V_user_V_1_state) & (1'b0 == m_axis_video_V_user_V_1_ack_out) & (1'b1 == m_axis_video_V_user_V_1_vld_in)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == m_axis_video_V_user_V_1_vld_in) & (1'b1 == m_axis_video_V_user_V_1_ack_out)) & ~((1'b0 == m_axis_video_V_user_V_1_ack_out) & (1'b1 == m_axis_video_V_user_V_1_vld_in)) & (2'd3 == m_axis_video_V_user_V_1_state)) | ((2'd1 == m_axis_video_V_user_V_1_state) & (1'b1 == m_axis_video_V_user_V_1_ack_out)) | ((2'd2 == m_axis_video_V_user_V_1_state) & (1'b1 == m_axis_video_V_user_V_1_vld_in)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_i_i_reg_259 <= i_reg_561;
    end else if (((ap_block_state2_on_subcall_done == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_i_i_reg_259 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd0 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        j_i_i_reg_270 <= 11'd0;
    end else if (((1'd0 == exitcond_i_fu_345_p2) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_i_reg_270 <= j_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_user_V_fu_192 <= 1'd0;
    end else if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_user_V_fu_192 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_566 <= exitcond_i_reg_566;
        exitcond_i_reg_566 <= exitcond_i_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == exitcond_i_fu_345_p2) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        axi_last_V_reg_575 <= axi_last_V_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_561 <= i_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_data_V_1_load_A)) begin
        m_axis_video_V_data_V_1_payload_A <= tmp_data_V_fu_489_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_data_V_1_load_B)) begin
        m_axis_video_V_data_V_1_payload_B <= tmp_data_V_fu_489_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_last_V_1_load_A)) begin
        m_axis_video_V_last_V_1_payload_A <= axi_last_V_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_last_V_1_load_B)) begin
        m_axis_video_V_last_V_1_payload_B <= axi_last_V_reg_575;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_user_V_1_load_A)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_fu_192;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == m_axis_video_V_user_V_1_load_B)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_fu_192;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_state2_on_subcall_done == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_12_cast_i_i_reg_529 <= {{grp_reg_unsigned_short_s_fu_295_ap_return[11:1]}};
        tmp_13_i_i_reg_534 <= tmp_13_i_i_fu_316_p2;
        tmp_i_i_reg_524 <= grp_reg_unsigned_short_s_fu_289_ap_return;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_i_fu_345_p2)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd1 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd1 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd0 == ap_reg_pp0_iter1_exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_video_V_data_V_1_sel)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_video_V_last_V_1_sel)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == m_axis_video_V_user_V_1_sel)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_0_s0_update = 1'b1;
    end else begin
        stream_csc_V_val_0_s0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_0_s_blk_n = stream_csc_V_val_0_s_empty_n;
    end else begin
        stream_csc_V_val_0_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_1_s_blk_n = stream_csc_V_val_1_s_empty_n;
    end else begin
        stream_csc_V_val_1_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_2_s_blk_n = stream_csc_V_val_2_s_empty_n;
    end else begin
        stream_csc_V_val_2_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_3_s_blk_n = stream_csc_V_val_3_s_empty_n;
    end else begin
        stream_csc_V_val_3_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_4_s_blk_n = stream_csc_V_val_4_s_empty_n;
    end else begin
        stream_csc_V_val_4_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_566) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_csc_V_val_5_s_blk_n = stream_csc_V_val_5_s_empty_n;
    end else begin
        stream_csc_V_val_5_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_block_state2_on_subcall_done == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd1 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in)) & (1'd0 == exitcond1_i_i_fu_334_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'd1 == exitcond_i_fu_345_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) & ~((ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'd1 == exitcond_i_fu_345_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd0 == exitcond_i_reg_566) & (1'b0 == stream_csc_V_val_0_s0_status) & (1'b1 == ap_enable_reg_pp0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state5_io) | ((1'd0 == exitcond_i_reg_566) & (1'b0 == stream_csc_V_val_0_s0_status)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state5_io) | ((1'd0 == exitcond_i_reg_566) & (1'b0 == stream_csc_V_val_0_s0_status)))));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call13 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call14 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((1'b0 == grp_reg_unsigned_short_s_fu_295_ap_done) | (1'b0 == grp_reg_unsigned_short_s_fu_289_ap_done));
end

always @ (*) begin
    ap_block_state3 = ((1'b0 == m_axis_video_V_data_V_1_ack_in) | (1'b0 == m_axis_video_V_dest_V_1_ack_in) | (1'b0 == m_axis_video_V_id_V_1_ack_in) | (1'b0 == m_axis_video_V_last_V_1_ack_in) | (1'b0 == m_axis_video_V_user_V_1_ack_in) | (1'b0 == m_axis_video_V_strb_V_1_ack_in) | (1'b0 == m_axis_video_V_keep_V_1_ack_in));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((1'd0 == exitcond_i_reg_566) & (1'b0 == m_axis_video_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((1'd0 == exitcond_i_reg_566) & (1'b0 == stream_csc_V_val_0_s0_status));
end

always @ (*) begin
    ap_block_state6_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_i_reg_566) & (1'b0 == m_axis_video_V_data_V_1_ack_in));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign axi_0_2_0_i_i_fu_405_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? p_Result_0_i_i_fu_397_p3 : p_Result_2_0_i_i_fu_389_p3);

assign axi_last_V_fu_356_p2 = ((j_i_i_reg_270 == tmp_13_i_i_reg_534) ? 1'b1 : 1'b0);

assign exitcond1_i_i_fu_334_p2 = ((i_i_i_reg_259 == tmp_i_i_reg_524) ? 1'b1 : 1'b0);

assign exitcond_i_fu_345_p2 = ((j_i_i_reg_270 == tmp_12_cast_i_i_reg_529) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_289_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_289_ap_start;

assign grp_reg_unsigned_short_s_fu_289_in_r = HwReg_height[11:0];

assign grp_reg_unsigned_short_s_fu_295_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_295_ap_start;

assign grp_reg_unsigned_short_s_fu_295_in_r = HwReg_width[11:0];

assign i_fu_339_p2 = (i_i_i_reg_259 + 12'd1);

assign j_fu_350_p2 = (j_i_i_reg_270 + 11'd1);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state[1'd1];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_data_out = 1'd0;

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state[1'd1];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_data_out = 1'd0;

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state[1'd1];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_data_out = 6'd63;

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state[1'd1];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_data_out = 6'd0;

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign p_Result_0_i_i_fu_397_p3 = {{40'd1099511627775}, {stream_csc_V_val_1_s_dout}};

assign p_Result_2_0_i_i_fu_389_p3 = {{40'd1099511627775}, {stream_csc_V_val_0_s_dout}};

assign sel_tmp2_i_fu_328_p2 = ((HwReg_OutVideoFormat == 8'd0) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_322_p2 = ((HwReg_OutVideoFormat == 8'd1) ? 1'b1 : 1'b0);

assign stream_csc_V_val_0_s0_status = (stream_csc_V_val_5_s_empty_n & stream_csc_V_val_4_s_empty_n & stream_csc_V_val_3_s_empty_n & stream_csc_V_val_2_s_empty_n & stream_csc_V_val_1_s_empty_n & stream_csc_V_val_0_s_empty_n);

assign stream_csc_V_val_0_s_read = stream_csc_V_val_0_s0_update;

assign stream_csc_V_val_1_s_read = stream_csc_V_val_0_s0_update;

assign stream_csc_V_val_2_s_read = stream_csc_V_val_0_s0_update;

assign stream_csc_V_val_3_s_read = stream_csc_V_val_0_s0_update;

assign stream_csc_V_val_4_s_read = stream_csc_V_val_0_s0_update;

assign stream_csc_V_val_5_s_read = stream_csc_V_val_0_s0_update;

assign tmp_12_cast_i_i_fu_306_p4 = {{grp_reg_unsigned_short_s_fu_295_ap_return[11:1]}};

assign tmp_13_i_i_fu_316_p2 = ($signed(11'd2047) + $signed(tmp_12_cast_i_i_fu_306_p4));

assign tmp_2_i_fu_426_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? stream_csc_V_val_0_s_dout : tmp_i_73_fu_419_p3);

assign tmp_3_i_fu_433_p3 = ((sel_tmp_i_fu_322_p2[0:0] === 1'b1) ? stream_csc_V_val_3_s_dout : stream_csc_V_val_4_s_dout);

assign tmp_4_i_fu_440_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? stream_csc_V_val_4_s_dout : tmp_3_i_fu_433_p3);

assign tmp_5_i_fu_447_p3 = ((sel_tmp_i_fu_322_p2[0:0] === 1'b1) ? stream_csc_V_val_4_s_dout : stream_csc_V_val_5_s_dout);

assign tmp_6_i_fu_454_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? stream_csc_V_val_5_s_dout : tmp_5_i_fu_447_p3);

assign tmp_7_i_fu_461_p3 = ((sel_tmp_i_fu_322_p2[0:0] === 1'b1) ? stream_csc_V_val_5_s_dout : stream_csc_V_val_2_s_dout);

assign tmp_8_i_fu_468_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? stream_csc_V_val_3_s_dout : tmp_7_i_fu_461_p3);

assign tmp_9_i_fu_475_p6 = {{{{{tmp_8_i_fu_468_p3}, {tmp_6_i_fu_454_p3}}, {tmp_4_i_fu_440_p3}}, {tmp_2_i_fu_426_p3}}, {tmp_i_fu_412_p3}};

assign tmp_data_V_fu_489_p5 = {{tmp_9_i_fu_475_p6}, {axi_0_2_0_i_i_fu_405_p3[7:0]}};

assign tmp_i_73_fu_419_p3 = ((sel_tmp_i_fu_322_p2[0:0] === 1'b1) ? stream_csc_V_val_2_s_dout : stream_csc_V_val_3_s_dout);

assign tmp_i_fu_412_p3 = ((sel_tmp2_i_fu_328_p2[0:0] === 1'b1) ? stream_csc_V_val_2_s_dout : stream_csc_V_val_1_s_dout);

endmodule //bd_c35b_csc_0_MultiPixStream2AXIvi
