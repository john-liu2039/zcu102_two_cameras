// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bd_c7bd_vsc_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        SrcYUV_V_val_0_V_din,
        SrcYUV_V_val_0_V_full_n,
        SrcYUV_V_val_0_V_write,
        SrcYUV_V_val_1_V_din,
        SrcYUV_V_val_1_V_full_n,
        SrcYUV_V_val_1_V_write,
        SrcYUV_V_val_2_V_din,
        SrcYUV_V_val_2_V_full_n,
        SrcYUV_V_val_2_V_write,
        SrcYUV_V_val_3_V_din,
        SrcYUV_V_val_3_V_full_n,
        SrcYUV_V_val_3_V_write,
        SrcYUV_V_val_4_V_din,
        SrcYUV_V_val_4_V_full_n,
        SrcYUV_V_val_4_V_write,
        SrcYUV_V_val_5_V_din,
        SrcYUV_V_val_5_V_full_n,
        SrcYUV_V_val_5_V_write,
        HwReg_HeightIn,
        HwReg_Width,
        HwReg_ColorMode
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state11 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [5:0] s_axis_video_TKEEP;
input  [5:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [7:0] SrcYUV_V_val_0_V_din;
input   SrcYUV_V_val_0_V_full_n;
output   SrcYUV_V_val_0_V_write;
output  [7:0] SrcYUV_V_val_1_V_din;
input   SrcYUV_V_val_1_V_full_n;
output   SrcYUV_V_val_1_V_write;
output  [7:0] SrcYUV_V_val_2_V_din;
input   SrcYUV_V_val_2_V_full_n;
output   SrcYUV_V_val_2_V_write;
output  [7:0] SrcYUV_V_val_3_V_din;
input   SrcYUV_V_val_3_V_full_n;
output   SrcYUV_V_val_3_V_write;
output  [7:0] SrcYUV_V_val_4_V_din;
input   SrcYUV_V_val_4_V_full_n;
output   SrcYUV_V_val_4_V_write;
output  [7:0] SrcYUV_V_val_5_V_din;
input   SrcYUV_V_val_5_V_full_n;
output   SrcYUV_V_val_5_V_write;
input  [15:0] HwReg_HeightIn;
input  [15:0] HwReg_Width;
input  [7:0] HwReg_ColorMode;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [47:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [47:0] s_axis_video_V_data_V_0_payload_A;
reg   [47:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
wire    s_axis_video_V_dest_V_0_vld_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [1:0] s_axis_video_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_i_reg_690;
reg   [0:0] brmerge_i_i_reg_699;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] eol_2_i_i_reg_361;
reg    SrcYUV_V_val_0_V_blk_n;
reg    SrcYUV_V_val_1_V_blk_n;
reg    SrcYUV_V_val_2_V_blk_n;
reg    SrcYUV_V_val_3_V_blk_n;
reg    SrcYUV_V_val_4_V_blk_n;
reg    SrcYUV_V_val_5_V_blk_n;
reg   [0:0] eol_i_i_reg_291;
reg   [10:0] j_i_i_reg_303;
reg   [0:0] eol_reg_314;
reg   [47:0] axi_data_V_1_i_i_reg_325;
reg   [0:0] axi_last_V_3_i_i_reg_372;
reg   [47:0] axi_data_V_3_i_i_reg_384;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_414_ap_done;
wire    grp_reg_unsigned_short_s_fu_420_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [11:0] grp_reg_unsigned_short_s_fu_414_ap_return;
reg   [11:0] tmp_i_i_reg_629;
wire   [11:0] grp_reg_unsigned_short_s_fu_420_ap_return;
reg   [11:0] tmp_i_i_90_reg_634;
reg   [47:0] tmp_data_V_reg_639;
reg   [0:0] tmp_last_V_reg_647;
reg   [10:0] tmp_i_reg_659;
wire    ap_CS_fsm_state4;
wire   [0:0] sel_tmp_i_fu_439_p2;
wire   [0:0] sel_tmp2_i_fu_444_p2;
wire   [0:0] exitcond5_i_i_fu_454_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] i_fu_459_p2;
reg   [11:0] i_reg_685;
wire   [0:0] exitcond_i_fu_465_p2;
wire    ap_block_state6_pp1_stage0_iter0;
reg    ap_predicate_op72_read_state7;
wire    SrcYUV_V_val_0_V1_status;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_470_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] brmerge_i_i_fu_479_p2;
wire    ap_block_state9_pp2_stage0_iter0;
reg    ap_block_state10_pp2_stage0_iter1;
reg    ap_block_pp2_stage0_11001;
reg    ap_block_pp1_stage0_subdone;
reg    ap_enable_reg_pp2_iter0;
wire    ap_CS_fsm_state8;
reg    ap_block_pp2_stage0_subdone;
reg   [0:0] ap_phi_mux_eol_2_i_i_phi_fu_364_p4;
wire    grp_reg_unsigned_short_s_fu_414_ap_start;
wire    grp_reg_unsigned_short_s_fu_414_ap_idle;
wire    grp_reg_unsigned_short_s_fu_414_ap_ready;
wire   [11:0] grp_reg_unsigned_short_s_fu_414_in_r;
wire    grp_reg_unsigned_short_s_fu_420_ap_start;
wire    grp_reg_unsigned_short_s_fu_420_ap_idle;
wire    grp_reg_unsigned_short_s_fu_420_ap_ready;
wire   [11:0] grp_reg_unsigned_short_s_fu_420_in_r;
reg   [0:0] axi_last_V1_i_i_reg_260;
wire    ap_CS_fsm_state11;
reg   [47:0] axi_data_V1_i_i_reg_270;
reg   [11:0] i_i_i_reg_280;
reg   [0:0] ap_phi_mux_eol_i_i_phi_fu_295_p4;
reg   [0:0] ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4;
reg   [47:0] ap_phi_mux_p_Val2_s_phi_fu_353_p4;
wire   [0:0] ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_336;
wire   [47:0] ap_phi_reg_pp1_iter1_p_Val2_s_reg_349;
reg    ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start;
reg    ap_block_state1_ignore_call12;
reg    ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start;
reg    ap_block_state1_ignore_call13;
reg    SrcYUV_V_val_0_V1_update;
reg    ap_block_pp1_stage0_01001;
reg   [0:0] sof_1_i_i_fu_198;
wire   [7:0] pix_val_3_V_fu_514_p4;
wire   [7:0] pix_val_5_V_fu_534_p4;
wire   [7:0] sel_tmp1_i_fu_544_p3;
wire   [7:0] pix_val_4_V_1_fu_524_p4;
wire   [7:0] sel_tmp5_i_fu_559_p3;
wire   [7:0] pix_val_0_V_fu_490_p4;
wire   [7:0] sel_tmp9_i_fu_574_p3;
wire   [7:0] pix_val_2_V_fu_504_p4;
wire   [7:0] pix_val_1_V_1_fu_500_p1;
wire   [0:0] tmp_user_V_fu_426_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_509;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start = 1'b0;
#0 ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start = 1'b0;
end

bd_c7bd_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_414(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_414_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_414_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_414_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_414_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_414_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_414_ap_return)
);

bd_c7bd_vsc_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_420(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_420_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_420_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_420_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_420_ap_ready),
    .in_r(grp_reg_unsigned_short_s_fu_420_in_r),
    .ap_return(grp_reg_unsigned_short_s_fu_420_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'd1 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp1_stage0_subdone == 1'b0) & (1'd1 == exitcond_i_fu_465_p2) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp2_stage0_subdone == 1'b0) & (1'd1 == ap_phi_mux_eol_2_i_i_phi_fu_364_p4) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start <= 1'b0;
    end else begin
        if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_414_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start <= 1'b0;
    end else begin
        if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start <= 1'b1;
        end else if ((1'b1 == grp_reg_unsigned_short_s_fu_420_ap_ready)) begin
            ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_data_V_0_ack_out) & (1'b1 == s_axis_video_V_data_V_0_vld_out))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_data_V_0_ack_in) & (1'b1 == s_axis_video_V_data_V_0_vld_in))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_state == 2'd2) & (1'b0 == s_axis_video_V_data_V_0_vld_in)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (1'b0 == s_axis_video_V_data_V_0_vld_in) & (1'b1 == s_axis_video_V_data_V_0_ack_out)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_state == 2'd1) & (1'b0 == s_axis_video_V_data_V_0_ack_out)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (1'b0 == s_axis_video_V_data_V_0_ack_out) & (1'b1 == s_axis_video_V_data_V_0_vld_in)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == s_axis_video_V_data_V_0_vld_in) & (1'b1 == s_axis_video_V_data_V_0_ack_out)) & ~((1'b0 == s_axis_video_V_data_V_0_ack_out) & (1'b1 == s_axis_video_V_data_V_0_vld_in)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (1'b1 == s_axis_video_V_data_V_0_ack_out)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (1'b1 == s_axis_video_V_data_V_0_vld_in)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == s_axis_video_V_dest_V_0_state) & (1'b0 == s_axis_video_V_dest_V_0_vld_in)) | ((2'd3 == s_axis_video_V_dest_V_0_state) & (1'b0 == s_axis_video_V_dest_V_0_vld_in) & (1'b1 == s_axis_video_V_dest_V_0_ack_out)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == s_axis_video_V_dest_V_0_state) & (1'b0 == s_axis_video_V_dest_V_0_ack_out)) | ((2'd3 == s_axis_video_V_dest_V_0_state) & (1'b0 == s_axis_video_V_dest_V_0_ack_out) & (1'b1 == s_axis_video_V_dest_V_0_vld_in)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == s_axis_video_V_dest_V_0_vld_in) & (1'b1 == s_axis_video_V_dest_V_0_ack_out)) & ~((1'b0 == s_axis_video_V_dest_V_0_ack_out) & (1'b1 == s_axis_video_V_dest_V_0_vld_in)) & (2'd3 == s_axis_video_V_dest_V_0_state)) | ((2'd1 == s_axis_video_V_dest_V_0_state) & (1'b1 == s_axis_video_V_dest_V_0_ack_out)) | ((2'd2 == s_axis_video_V_dest_V_0_state) & (1'b1 == s_axis_video_V_dest_V_0_vld_in)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_last_V_0_ack_out) & (1'b1 == s_axis_video_V_last_V_0_vld_out))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_last_V_0_ack_in) & (1'b1 == s_axis_video_V_last_V_0_vld_in))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == s_axis_video_V_last_V_0_state) & (1'b0 == s_axis_video_V_last_V_0_vld_in)) | ((2'd3 == s_axis_video_V_last_V_0_state) & (1'b0 == s_axis_video_V_last_V_0_vld_in) & (1'b1 == s_axis_video_V_last_V_0_ack_out)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == s_axis_video_V_last_V_0_state) & (1'b0 == s_axis_video_V_last_V_0_ack_out)) | ((2'd3 == s_axis_video_V_last_V_0_state) & (1'b0 == s_axis_video_V_last_V_0_ack_out) & (1'b1 == s_axis_video_V_last_V_0_vld_in)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == s_axis_video_V_last_V_0_vld_in) & (1'b1 == s_axis_video_V_last_V_0_ack_out)) & ~((1'b0 == s_axis_video_V_last_V_0_ack_out) & (1'b1 == s_axis_video_V_last_V_0_vld_in)) & (2'd3 == s_axis_video_V_last_V_0_state)) | ((2'd1 == s_axis_video_V_last_V_0_state) & (1'b1 == s_axis_video_V_last_V_0_ack_out)) | ((2'd2 == s_axis_video_V_last_V_0_state) & (1'b1 == s_axis_video_V_last_V_0_vld_in)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_user_V_0_ack_out) & (1'b1 == s_axis_video_V_user_V_0_vld_out))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == s_axis_video_V_user_V_0_ack_in) & (1'b1 == s_axis_video_V_user_V_0_vld_in))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == s_axis_video_V_user_V_0_state) & (1'b0 == s_axis_video_V_user_V_0_vld_in)) | ((2'd3 == s_axis_video_V_user_V_0_state) & (1'b0 == s_axis_video_V_user_V_0_vld_in) & (1'b1 == s_axis_video_V_user_V_0_ack_out)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == s_axis_video_V_user_V_0_state) & (1'b0 == s_axis_video_V_user_V_0_ack_out)) | ((2'd3 == s_axis_video_V_user_V_0_state) & (1'b0 == s_axis_video_V_user_V_0_ack_out) & (1'b1 == s_axis_video_V_user_V_0_vld_in)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == s_axis_video_V_user_V_0_vld_in) & (1'b1 == s_axis_video_V_user_V_0_ack_out)) & ~((1'b0 == s_axis_video_V_user_V_0_ack_out) & (1'b1 == s_axis_video_V_user_V_0_vld_in)) & (2'd3 == s_axis_video_V_user_V_0_state)) | ((2'd1 == s_axis_video_V_user_V_0_state) & (1'b1 == s_axis_video_V_user_V_0_ack_out)) | ((2'd2 == s_axis_video_V_user_V_0_state) & (1'b1 == s_axis_video_V_user_V_0_vld_in)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        axi_data_V1_i_i_reg_270 <= axi_data_V_3_i_i_reg_384;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V1_i_i_reg_270 <= tmp_data_V_reg_639;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_reg_690) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_i_reg_325 <= ap_phi_mux_p_Val2_s_phi_fu_353_p4;
    end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_i_i_reg_325 <= axi_data_V1_i_i_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_i_i_reg_384 <= axi_data_V_1_i_i_reg_325;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_data_V_3_i_i_reg_384 <= s_axis_video_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        axi_last_V1_i_i_reg_260 <= axi_last_V_3_i_i_reg_372;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V1_i_i_reg_260 <= tmp_last_V_reg_647;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_i_i_reg_372 <= eol_reg_314;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        axi_last_V_3_i_i_reg_372 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_i_i_reg_361 <= eol_i_i_reg_291;
    end else if (((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        eol_2_i_i_reg_361 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_reg_690) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_i_i_reg_291 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4;
    end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_i_i_reg_291 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_reg_690) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_314 <= ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4;
    end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_314 <= axi_last_V1_i_i_reg_260;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_i_i_reg_280 <= i_reg_685;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_i_reg_280 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_fu_465_p2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_i_i_reg_303 <= j_fu_470_p2;
    end else if (((1'd0 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        j_i_i_reg_303 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_fu_465_p2) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_i_fu_198 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_1_i_i_fu_198 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_fu_465_p2) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        brmerge_i_i_reg_699 <= brmerge_i_i_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_i_reg_690 <= exitcond_i_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_685 <= i_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_data_V_0_load_A)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_data_V_0_load_B)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_last_V_0_load_A)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_last_V_0_load_B)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_user_V_0_load_A)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == s_axis_video_V_user_V_0_load_B)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_reg_639 <= s_axis_video_V_data_V_0_data_out;
        tmp_last_V_reg_647 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_state2_on_subcall_done == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_i_90_reg_634 <= grp_reg_unsigned_short_s_fu_420_ap_return;
        tmp_i_i_reg_629 <= grp_reg_unsigned_short_s_fu_414_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_reg_659 <= {{tmp_i_i_90_reg_634[11:1]}};
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_11001 == 1'b0) & (1'd0 == exitcond_i_reg_690) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_0_V1_update = 1'b1;
    end else begin
        SrcYUV_V_val_0_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_0_V_blk_n = SrcYUV_V_val_0_V_full_n;
    end else begin
        SrcYUV_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_1_V_blk_n = SrcYUV_V_val_1_V_full_n;
    end else begin
        SrcYUV_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_2_V_blk_n = SrcYUV_V_val_2_V_full_n;
    end else begin
        SrcYUV_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_3_V_blk_n = SrcYUV_V_val_3_V_full_n;
    end else begin
        SrcYUV_V_val_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_4_V_blk_n = SrcYUV_V_val_4_V_full_n;
    end else begin
        SrcYUV_V_val_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        SrcYUV_V_val_5_V_blk_n = SrcYUV_V_val_5_V_full_n;
    end else begin
        SrcYUV_V_val_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_condition_509 == 1'b1)) begin
        if ((1'd1 == brmerge_i_i_reg_699)) begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4 = eol_reg_314;
        end else if ((1'd0 == brmerge_i_i_reg_699)) begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4 = s_axis_video_V_last_V_0_data_out;
        end else begin
            ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_336;
        end
    end else begin
        ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4 = ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_336;
    end
end

always @ (*) begin
    if (((1'd0 == eol_2_i_i_reg_361) & (ap_block_pp2_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_eol_2_i_i_phi_fu_364_p4 = s_axis_video_V_last_V_0_data_out;
    end else begin
        ap_phi_mux_eol_2_i_i_phi_fu_364_p4 = eol_2_i_i_reg_361;
    end
end

always @ (*) begin
    if (((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_i_i_phi_fu_295_p4 = ap_phi_mux_axi_last_V_2_i_i_phi_fu_341_p4;
    end else begin
        ap_phi_mux_eol_i_i_phi_fu_295_p4 = eol_i_i_reg_291;
    end
end

always @ (*) begin
    if ((ap_condition_509 == 1'b1)) begin
        if ((1'd1 == brmerge_i_i_reg_699)) begin
            ap_phi_mux_p_Val2_s_phi_fu_353_p4 = axi_data_V_1_i_i_reg_325;
        end else if ((1'd0 == brmerge_i_i_reg_699)) begin
            ap_phi_mux_p_Val2_s_phi_fu_353_p4 = s_axis_video_V_data_V_0_data_out;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_353_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_349;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_353_p4 = ap_phi_reg_pp1_iter1_p_Val2_s_reg_349;
    end
end

always @ (*) begin
    if (((1'd1 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'd0 == eol_2_i_i_reg_361) & (ap_block_pp2_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'd0 == brmerge_i_i_reg_699) & (1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op72_read_state7) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_video_V_data_V_0_sel)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op72_read_state7) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op72_read_state7) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_video_V_last_V_0_sel)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_block_pp2_stage0_11001 == 1'b0) & (1'd0 == eol_2_i_i_reg_361) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((ap_block_pp1_stage0_11001 == 1'b0) & (1'b1 == ap_predicate_op72_read_state7) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == s_axis_video_V_user_V_0_sel)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_block_state2_on_subcall_done == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'd0 == tmp_user_V_fu_426_p1) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((1'd1 == tmp_user_V_fu_426_p1) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'd1 == exitcond5_i_i_fu_454_p2) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_block_pp1_stage0_subdone == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((ap_block_pp2_stage0_subdone == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign SrcYUV_V_val_0_V1_status = (SrcYUV_V_val_5_V_full_n & SrcYUV_V_val_4_V_full_n & SrcYUV_V_val_3_V_full_n & SrcYUV_V_val_2_V_full_n & SrcYUV_V_val_1_V_full_n & SrcYUV_V_val_0_V_full_n);

assign SrcYUV_V_val_0_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_0_V_fu_490_p4 : pix_val_1_V_1_fu_500_p1);

assign SrcYUV_V_val_0_V_write = SrcYUV_V_val_0_V1_update;

assign SrcYUV_V_val_1_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_1_V_1_fu_500_p1 : pix_val_2_V_fu_504_p4);

assign SrcYUV_V_val_1_V_write = SrcYUV_V_val_0_V1_update;

assign SrcYUV_V_val_2_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_2_V_fu_504_p4 : pix_val_0_V_fu_490_p4);

assign SrcYUV_V_val_2_V_write = SrcYUV_V_val_0_V1_update;

assign SrcYUV_V_val_3_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_3_V_fu_514_p4 : sel_tmp9_i_fu_574_p3);

assign SrcYUV_V_val_3_V_write = SrcYUV_V_val_0_V1_update;

assign SrcYUV_V_val_4_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_4_V_1_fu_524_p4 : sel_tmp5_i_fu_559_p3);

assign SrcYUV_V_val_4_V_write = SrcYUV_V_val_0_V1_update;

assign SrcYUV_V_val_5_V_din = ((sel_tmp2_i_fu_444_p2[0:0] === 1'b1) ? pix_val_5_V_fu_534_p4 : sel_tmp1_i_fu_544_p3);

assign SrcYUV_V_val_5_V_write = SrcYUV_V_val_0_V1_update;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op72_read_state7)) | ((1'd0 == exitcond_i_reg_690) & (1'b0 == SrcYUV_V_val_0_V1_status))));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op72_read_state7)) | ((1'd0 == exitcond_i_reg_690) & (1'b0 == SrcYUV_V_val_0_V1_status))));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b1 == ap_enable_reg_pp1_iter1) & (((1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op72_read_state7)) | ((1'd0 == exitcond_i_reg_690) & (1'b0 == SrcYUV_V_val_0_V1_status))));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'd0 == eol_2_i_i_reg_361) & (1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_enable_reg_pp2_iter1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'd0 == eol_2_i_i_reg_361) & (1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_enable_reg_pp2_iter1));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp2_stage0_iter1 = ((1'd0 == eol_2_i_i_reg_361) & (1'b0 == s_axis_video_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state1_ignore_call12 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call13 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((1'b0 == grp_reg_unsigned_short_s_fu_420_ap_done) | (1'b0 == grp_reg_unsigned_short_s_fu_414_ap_done));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = (((1'b0 == s_axis_video_V_data_V_0_vld_out) & (1'b1 == ap_predicate_op72_read_state7)) | ((1'd0 == exitcond_i_reg_690) & (1'b0 == SrcYUV_V_val_0_V1_status)));
end

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_509 = ((1'd0 == exitcond_i_reg_690) & (ap_block_pp1_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_reg_pp1_iter1_axi_last_V_2_i_i_reg_336 = 'bx;

assign ap_phi_reg_pp1_iter1_p_Val2_s_reg_349 = 'bx;

always @ (*) begin
    ap_predicate_op72_read_state7 = ((1'd0 == brmerge_i_i_reg_699) & (1'd0 == exitcond_i_reg_690));
end

assign brmerge_i_i_fu_479_p2 = (sof_1_i_i_fu_198 | ap_phi_mux_eol_i_i_phi_fu_295_p4);

assign exitcond5_i_i_fu_454_p2 = ((i_i_i_reg_280 == tmp_i_i_reg_629) ? 1'b1 : 1'b0);

assign exitcond_i_fu_465_p2 = ((j_i_i_reg_303 == tmp_i_reg_659) ? 1'b1 : 1'b0);

assign grp_reg_unsigned_short_s_fu_414_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_414_ap_start;

assign grp_reg_unsigned_short_s_fu_414_in_r = HwReg_HeightIn[11:0];

assign grp_reg_unsigned_short_s_fu_420_ap_start = ap_reg_grp_reg_unsigned_short_s_fu_420_ap_start;

assign grp_reg_unsigned_short_s_fu_420_in_r = HwReg_Width[11:0];

assign i_fu_459_p2 = (i_i_i_reg_280 + 12'd1);

assign j_fu_470_p2 = (j_i_i_reg_303 + 11'd1);

assign pix_val_0_V_fu_490_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_353_p4[23:16]}};

assign pix_val_1_V_1_fu_500_p1 = ap_phi_mux_p_Val2_s_phi_fu_353_p4[7:0];

assign pix_val_2_V_fu_504_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_353_p4[15:8]}};

assign pix_val_3_V_fu_514_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_353_p4[47:40]}};

assign pix_val_4_V_1_fu_524_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_353_p4[31:24]}};

assign pix_val_5_V_fu_534_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_353_p4[39:32]}};

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

assign sel_tmp1_i_fu_544_p3 = ((sel_tmp_i_fu_439_p2[0:0] === 1'b1) ? pix_val_3_V_fu_514_p4 : pix_val_5_V_fu_534_p4);

assign sel_tmp2_i_fu_444_p2 = ((HwReg_ColorMode == 8'd0) ? 1'b1 : 1'b0);

assign sel_tmp5_i_fu_559_p3 = ((sel_tmp_i_fu_439_p2[0:0] === 1'b1) ? pix_val_5_V_fu_534_p4 : pix_val_4_V_1_fu_524_p4);

assign sel_tmp9_i_fu_574_p3 = ((sel_tmp_i_fu_439_p2[0:0] === 1'b1) ? pix_val_4_V_1_fu_524_p4 : pix_val_0_V_fu_490_p4);

assign sel_tmp_i_fu_439_p2 = ((HwReg_ColorMode == 8'd1) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_426_p1 = s_axis_video_V_user_V_0_data_out;

endmodule //bd_c7bd_vsc_0_AXIvideo2MultiPixStr
