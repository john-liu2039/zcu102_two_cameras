// Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2017.3 (lin64) Build 2018833 Wed Oct  4 19:58:07 MDT 2017
// Date        : Sat Jul 24 19:20:00 2021
// Host        : ad2039 running 64-bit Ubuntu 18.04.5 LTS
// Command     : write_verilog -force -mode funcsim
//               /home/ad2039/G00StereoCamera/SCAM/SCAM.srcs/sources_1/bd/design_1/ip/design_1_mipi_csi2_rx_subsystem_0_0/bd_0/ip/ip_1/bd_bf15_rx_0_sim_netlist.v
// Design      : bd_bf15_rx_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xczu9eg-ffvb1156-2-i
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "bd_bf15_rx_0,mipi_csi2_rx_ctrl_v1_0_6_top,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "mipi_csi2_rx_ctrl_v1_0_6_top,Vivado 2017.3" *) 
(* NotValidForBitStream *)
module bd_bf15_rx_0
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awaddr,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rvalid,
    s_axi_rready,
    cl_stopstate,
    cl_enable,
    cl_rxulpsclknot,
    dl0_rxbyteclkhs,
    dl0_rxdatahs,
    dl0_rxvalidhs,
    dl0_rxactivehs,
    dl0_rxsynchs,
    dl0_stopstate,
    dl0_shutdown,
    dl0_rxulpmesc,
    dl0_errsoths,
    dl0_errsotsynchs,
    dl0_erresc,
    dl0_errcontrol,
    dl1_rxbyteclkhs,
    dl1_rxdatahs,
    dl1_rxvalidhs,
    dl1_rxactivehs,
    dl1_rxsynchs,
    dl1_stopstate,
    dl1_shutdown,
    dl1_rxulpmesc,
    dl1_errsoths,
    dl1_errsotsynchs,
    dl1_erresc,
    dl1_errcontrol,
    dl2_rxbyteclkhs,
    dl2_rxdatahs,
    dl2_rxvalidhs,
    dl2_rxactivehs,
    dl2_rxsynchs,
    dl2_stopstate,
    dl2_shutdown,
    dl2_rxulpmesc,
    dl2_errsoths,
    dl2_errsotsynchs,
    dl2_erresc,
    dl2_errcontrol,
    dl3_rxbyteclkhs,
    dl3_rxdatahs,
    dl3_rxvalidhs,
    dl3_rxactivehs,
    dl3_rxsynchs,
    dl3_stopstate,
    dl3_shutdown,
    dl3_rxulpmesc,
    dl3_errsoths,
    dl3_errsotsynchs,
    dl3_erresc,
    dl3_errcontrol,
    m_axis_aclk,
    m_axis_aresetn,
    m_axis_tready,
    m_axis_tvalid,
    m_axis_tlast,
    m_axis_tdata,
    m_axis_tkeep,
    m_axis_tuser,
    m_axis_tdest,
    mdt_tv,
    mdt_tr,
    sdt_tv,
    sdt_tr,
    vfb_tv,
    vfb_tr,
    interrupt);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 s_axi_signal_clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi_signal_clock, ASSOCIATED_BUSIF s_axi, ASSOCIATED_RESET s_axi_aresetn, FREQ_HZ 49995000, PHASE 0.0, CLK_DOMAIN design_1_zynq_ultra_ps_e_0_0_pl_clk0" *) input s_axi_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 s_axi_signal_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi_signal_reset, POLARITY ACTIVE_LOW" *) input s_axi_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWADDR" *) input [6:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WDATA" *) input [31:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WSTRB" *) input [3:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARADDR" *) input [6:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RDATA" *) output [31:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 49995000, ID_WIDTH 0, ADDR_WIDTH 7, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 2, NUM_WRITE_OUTSTANDING 2, MAX_BURST_LENGTH 1, PHASE 0.0, CLK_DOMAIN design_1_zynq_ultra_ps_e_0_0_pl_clk0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_STOPSTATE" *) input cl_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_ENABLE" *) output cl_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_RXULPSCLKNOT" *) input cl_rxulpsclknot;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl0_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl0_rxbyteclkhs, FREQ_HZ 180000000.0, PHASE 0, CLK_DOMAIN bd_bf15_phy_0_rxbyteclkhs" *) input dl0_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXDATAHS" *) input [7:0]dl0_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXVALIDHS" *) input dl0_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXACTIVEHS" *) input dl0_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXSYNCHS" *) input dl0_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_STOPSTATE" *) input dl0_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ENABLE" *) output dl0_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXULPSESC" *) input dl0_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRSOTHS" *) input dl0_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRSOTSYNCHS" *) input dl0_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRESC" *) input dl0_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRCONTROL" *) input dl0_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl1_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl1_rxbyteclkhs, FREQ_HZ 180000000.0, PHASE 0, CLK_DOMAIN bd_bf15_phy_0_rxbyteclkhs" *) input dl1_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXDATAHS" *) input [7:0]dl1_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXVALIDHS" *) input dl1_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXACTIVEHS" *) input dl1_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXSYNCHS" *) input dl1_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_STOPSTATE" *) input dl1_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ENABLE" *) output dl1_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXULPSESC" *) input dl1_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRSOTHS" *) input dl1_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRSOTSYNCHS" *) input dl1_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRESC" *) input dl1_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRCONTROL" *) input dl1_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl2_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl2_rxbyteclkhs, FREQ_HZ 180000000.0, PHASE 0, CLK_DOMAIN bd_bf15_phy_0_rxbyteclkhs" *) input dl2_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_RXDATAHS" *) input [7:0]dl2_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_RXVALIDHS" *) input dl2_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_RXACTIVEHS" *) input dl2_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_RXSYNCHS" *) input dl2_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_STOPSTATE" *) input dl2_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_ENABLE" *) output dl2_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_RXULPSESC" *) input dl2_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_ERRSOTHS" *) input dl2_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_ERRSOTSYNCHS" *) input dl2_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_ERRESC" *) input dl2_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL2_ERRCONTROL" *) input dl2_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl3_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl3_rxbyteclkhs, FREQ_HZ 180000000.0, PHASE 0, CLK_DOMAIN bd_bf15_phy_0_rxbyteclkhs" *) input dl3_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_RXDATAHS" *) input [7:0]dl3_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_RXVALIDHS" *) input dl3_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_RXACTIVEHS" *) input dl3_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_RXSYNCHS" *) input dl3_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_STOPSTATE" *) input dl3_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_ENABLE" *) output dl3_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_RXULPSESC" *) input dl3_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_ERRSOTHS" *) input dl3_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_ERRSOTSYNCHS" *) input dl3_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_ERRESC" *) input dl3_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL3_ERRCONTROL" *) input dl3_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 m_axis_signal_clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis_signal_clock, ASSOCIATED_BUSIF m_axis:m_axis_eni, ASSOCIATED_RESET m_axis_aresetn, FREQ_HZ 299970000, PHASE 0.0, CLK_DOMAIN design_1_zynq_ultra_ps_e_0_0_pl_clk0" *) input m_axis_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 m_axis_signal_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis_signal_reset, POLARITY ACTIVE_LOW" *) input m_axis_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TLAST" *) output m_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDATA" *) output [63:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TKEEP" *) output [7:0]m_axis_tkeep;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TUSER" *) output [95:0]m_axis_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDEST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis, TDATA_NUM_BYTES 8, TDEST_WIDTH 2, TID_WIDTH 0, TUSER_WIDTH 96, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 1, HAS_TLAST 1, FREQ_HZ 299970000, PHASE 0.0, CLK_DOMAIN design_1_zynq_ultra_ps_e_0_0_pl_clk0, LAYERED_METADATA undef" *) output [1:0]m_axis_tdest;
  input mdt_tv;
  input mdt_tr;
  input sdt_tv;
  input sdt_tr;
  input vfb_tv;
  input vfb_tr;
  (* X_INTERFACE_INFO = "xilinx.com:signal:interrupt:1.0 signal_interrupt INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME signal_interrupt, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output interrupt;

  wire cl_enable;
  wire cl_rxulpsclknot;
  wire cl_stopstate;
  wire dl0_errcontrol;
  wire dl0_erresc;
  wire dl0_errsoths;
  wire dl0_errsotsynchs;
  wire dl0_rxactivehs;
  wire dl0_rxbyteclkhs;
  wire [7:0]dl0_rxdatahs;
  wire dl0_rxsynchs;
  wire dl0_rxulpmesc;
  wire dl0_rxvalidhs;
  wire dl0_shutdown;
  wire dl0_stopstate;
  wire dl1_errcontrol;
  wire dl1_erresc;
  wire dl1_errsoths;
  wire dl1_errsotsynchs;
  wire dl1_rxactivehs;
  wire dl1_rxbyteclkhs;
  wire [7:0]dl1_rxdatahs;
  wire dl1_rxsynchs;
  wire dl1_rxulpmesc;
  wire dl1_rxvalidhs;
  wire dl1_shutdown;
  wire dl1_stopstate;
  wire dl2_errcontrol;
  wire dl2_erresc;
  wire dl2_errsoths;
  wire dl2_errsotsynchs;
  wire dl2_rxactivehs;
  wire dl2_rxbyteclkhs;
  wire [7:0]dl2_rxdatahs;
  wire dl2_rxsynchs;
  wire dl2_rxulpmesc;
  wire dl2_rxvalidhs;
  wire dl2_shutdown;
  wire dl2_stopstate;
  wire dl3_errcontrol;
  wire dl3_erresc;
  wire dl3_errsoths;
  wire dl3_errsotsynchs;
  wire dl3_rxactivehs;
  wire dl3_rxbyteclkhs;
  wire [7:0]dl3_rxdatahs;
  wire dl3_rxsynchs;
  wire dl3_rxulpmesc;
  wire dl3_rxvalidhs;
  wire dl3_shutdown;
  wire dl3_stopstate;
  wire interrupt;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [63:0]m_axis_tdata;
  wire [1:0]m_axis_tdest;
  wire [7:0]m_axis_tkeep;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire [95:0]m_axis_tuser;
  wire m_axis_tvalid;
  wire mdt_tr;
  wire mdt_tv;
  wire s_axi_aclk;
  wire [6:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [6:0]s_axi_awaddr;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire sdt_tr;
  wire sdt_tv;
  wire vfb_tr;
  wire vfb_tv;
  wire NLW_inst_m_axis_eni_tlast_UNCONNECTED;
  wire NLW_inst_m_axis_eni_tvalid_UNCONNECTED;
  wire [63:0]NLW_inst_m_axis_eni_tdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axis_eni_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_eni_tkeep_UNCONNECTED;
  wire [95:0]NLW_inst_m_axis_eni_tuser_UNCONNECTED;

  (* AXIS_FIFO_DCNT_WIDTH = "12" *) 
  (* AXIS_FIFO_DEPTH = "4096" *) 
  (* AXIS_TDATA_WIDTH = "64" *) 
  (* AXIS_TDEST_WIDTH = "2" *) 
  (* AXIS_TUSER_WIDTH = "96" *) 
  (* CSI_EN_VC_SUPPORT = "1" *) 
  (* CSI_FIXED_VC = "0" *) 
  (* CSI_INV_SHUTDOWN = "1" *) 
  (* CSI_LANES = "4" *) 
  (* CSI_OFFLOAD_NONIMAGE = "0" *) 
  (* CSI_VC_OFF_0 = "1" *) 
  (* CSI_VC_OFF_1 = "2" *) 
  (* CSI_VC_OFF_2 = "3" *) 
  (* C_CSI2RX_DBG = "0" *) 
  (* C_CSI_FILTER_USERDATATYPE = "1" *) 
  (* C_CSI_OPT1_REGS = "0" *) 
  (* C_CSI_OPT2_CRC = "0" *) 
  (* C_CSI_OPT3_FIXEDLANES = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_IS_EVAL = "0" *) 
  (* C_MIPI_SLV_INT = "0" *) 
  (* C_S_AXI_ADDR_WIDTH = "7" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* VC_H = "4" *) 
  (* VC_L = "0" *) 
  (* VC_NUMS = "4" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_top inst
       (.cl_enable(cl_enable),
        .cl_rxulpsclknot(cl_rxulpsclknot),
        .cl_stopstate(cl_stopstate),
        .dl0_errcontrol(dl0_errcontrol),
        .dl0_erresc(dl0_erresc),
        .dl0_errsoths(dl0_errsoths),
        .dl0_errsotsynchs(dl0_errsotsynchs),
        .dl0_rxactivehs(dl0_rxactivehs),
        .dl0_rxbyteclkhs(dl0_rxbyteclkhs),
        .dl0_rxdatahs(dl0_rxdatahs),
        .dl0_rxsynchs(dl0_rxsynchs),
        .dl0_rxulpmesc(dl0_rxulpmesc),
        .dl0_rxvalidhs(dl0_rxvalidhs),
        .dl0_shutdown(dl0_shutdown),
        .dl0_stopstate(dl0_stopstate),
        .dl1_errcontrol(dl1_errcontrol),
        .dl1_erresc(dl1_erresc),
        .dl1_errsoths(dl1_errsoths),
        .dl1_errsotsynchs(dl1_errsotsynchs),
        .dl1_rxactivehs(dl1_rxactivehs),
        .dl1_rxbyteclkhs(dl1_rxbyteclkhs),
        .dl1_rxdatahs(dl1_rxdatahs),
        .dl1_rxsynchs(dl1_rxsynchs),
        .dl1_rxulpmesc(dl1_rxulpmesc),
        .dl1_rxvalidhs(dl1_rxvalidhs),
        .dl1_shutdown(dl1_shutdown),
        .dl1_stopstate(dl1_stopstate),
        .dl2_errcontrol(dl2_errcontrol),
        .dl2_erresc(dl2_erresc),
        .dl2_errsoths(dl2_errsoths),
        .dl2_errsotsynchs(dl2_errsotsynchs),
        .dl2_rxactivehs(dl2_rxactivehs),
        .dl2_rxbyteclkhs(dl2_rxbyteclkhs),
        .dl2_rxdatahs(dl2_rxdatahs),
        .dl2_rxsynchs(dl2_rxsynchs),
        .dl2_rxulpmesc(dl2_rxulpmesc),
        .dl2_rxvalidhs(dl2_rxvalidhs),
        .dl2_shutdown(dl2_shutdown),
        .dl2_stopstate(dl2_stopstate),
        .dl3_errcontrol(dl3_errcontrol),
        .dl3_erresc(dl3_erresc),
        .dl3_errsoths(dl3_errsoths),
        .dl3_errsotsynchs(dl3_errsotsynchs),
        .dl3_rxactivehs(dl3_rxactivehs),
        .dl3_rxbyteclkhs(dl3_rxbyteclkhs),
        .dl3_rxdatahs(dl3_rxdatahs),
        .dl3_rxsynchs(dl3_rxsynchs),
        .dl3_rxulpmesc(dl3_rxulpmesc),
        .dl3_rxvalidhs(dl3_rxvalidhs),
        .dl3_shutdown(dl3_shutdown),
        .dl3_stopstate(dl3_stopstate),
        .interrupt(interrupt),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .m_axis_eni_tdata(NLW_inst_m_axis_eni_tdata_UNCONNECTED[63:0]),
        .m_axis_eni_tdest(NLW_inst_m_axis_eni_tdest_UNCONNECTED[1:0]),
        .m_axis_eni_tkeep(NLW_inst_m_axis_eni_tkeep_UNCONNECTED[7:0]),
        .m_axis_eni_tlast(NLW_inst_m_axis_eni_tlast_UNCONNECTED),
        .m_axis_eni_tready(1'b0),
        .m_axis_eni_tuser(NLW_inst_m_axis_eni_tuser_UNCONNECTED[95:0]),
        .m_axis_eni_tvalid(NLW_inst_m_axis_eni_tvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(m_axis_tdest),
        .m_axis_tkeep(m_axis_tkeep),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tuser(m_axis_tuser),
        .m_axis_tvalid(m_axis_tvalid),
        .mdt_tr(mdt_tr),
        .mdt_tv(mdt_tv),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_axi_araddr}),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_axi_awaddr}),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .sdt_tr(sdt_tr),
        .sdt_tv(sdt_tv),
        .vfb_tr(vfb_tr),
        .vfb_tv(vfb_tv));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fc13" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fc13
   (D,
    full,
    almost_full,
    empty,
    \LP_CNTS[0].lp_header_reg[0] ,
    m_axis_aclk,
    SR,
    din,
    wr_en,
    rd_en,
    dest_out,
    m_axis_aresetn);
  output [67:0]D;
  output full;
  output almost_full;
  output empty;
  output \LP_CNTS[0].lp_header_reg[0] ;
  input m_axis_aclk;
  input [0:0]SR;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input dest_out;
  input m_axis_aresetn;

  wire [67:0]D;
  wire \LP_CNTS[0].lp_header_reg[0] ;
  wire [0:0]SR;
  wire almost_full;
  wire dest_out;
  wire [67:0]din;
  wire empty;
  wire full;
  wire lbuf_n_71;
  wire lbuf_n_72;
  wire lbuf_n_73;
  wire lbuf_n_74;
  wire lbuf_n_75;
  wire lbuf_n_76;
  wire lbuf_n_77;
  wire lbuf_n_78;
  wire lbuf_n_79;
  wire lbuf_n_80;
  wire lbuf_n_81;
  wire lbuf_n_82;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire rd_en;
  wire wr_en;
  wire NLW_lbuf_prog_full_UNCONNECTED;
  wire NLW_lbuf_rd_rst_busy_UNCONNECTED;
  wire NLW_lbuf_wr_rst_busy_UNCONNECTED;

  LUT3 #(
    .INIT(8'hBF)) 
    \LP_CNTS[0].lp_header[0]_i_1 
       (.I0(full),
        .I1(dest_out),
        .I2(m_axis_aresetn),
        .O(\LP_CNTS[0].lp_header_reg[0] ));
  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fc_644096,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fc_644096 lbuf
       (.almost_full(almost_full),
        .clk(m_axis_aclk),
        .data_count({lbuf_n_71,lbuf_n_72,lbuf_n_73,lbuf_n_74,lbuf_n_75,lbuf_n_76,lbuf_n_77,lbuf_n_78,lbuf_n_79,lbuf_n_80,lbuf_n_81,lbuf_n_82}),
        .din(din),
        .dout(D),
        .empty(empty),
        .full(full),
        .prog_full(NLW_lbuf_prog_full_UNCONNECTED),
        .rd_en(rd_en),
        .rd_rst_busy(NLW_lbuf_rd_rst_busy_UNCONNECTED),
        .srst(SR),
        .wr_en(wr_en),
        .wr_rst_busy(NLW_lbuf_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fc_644096,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fc_644096" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fc_644096
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    almost_full,
    empty,
    data_count,
    prog_full,
    wr_rst_busy,
    rd_rst_busy);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [67:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [67:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE ALMOST_FULL" *) output almost_full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [11:0]data_count;
  output prog_full;
  output wr_rst_busy;
  output rd_rst_busy;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire rd_rst_busy;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [12:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [12:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "12" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "68" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "68" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "1" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "4093" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "4092" *) 
  (* C_PROG_FULL_TYPE = "1" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "13" *) 
  (* C_RD_DEPTH = "4096" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "12" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "13" *) 
  (* C_WR_DEPTH = "4096" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "12" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(almost_full),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(prog_full),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[12:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(rd_rst_busy),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[12:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__1
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__2
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__3
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo1,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo1" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo1
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [41:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [41:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "42" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "42" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo2,fifo_generator_v13_2_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_fifo2" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo2
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [23:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [23:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "24" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "24" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynquplus" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized5 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_array_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire dest_clk;
  wire [1:0]dest_out;
  wire src_clk;
  wire [1:0]src_in;

  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__1 \single_array[0].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[0]),
        .src_clk(src_clk),
        .src_in(src_in[0]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__2 \single_array[1].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[1]),
        .src_clk(src_clk),
        .src_in(src_in[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* WIDTH = "22" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_array_single__parameterized0
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [21:0]src_in;
  input dest_clk;
  output [21:0]dest_out;

  wire dest_clk;
  wire [21:0]dest_out;
  wire src_clk;
  wire [21:0]src_in;

  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__3 \single_array[0].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[0]),
        .src_clk(src_clk),
        .src_in(src_in[0]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__13 \single_array[10].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[10]),
        .src_clk(src_clk),
        .src_in(src_in[10]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__14 \single_array[11].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[11]),
        .src_clk(src_clk),
        .src_in(src_in[11]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__15 \single_array[12].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[12]),
        .src_clk(src_clk),
        .src_in(src_in[12]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__16 \single_array[13].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[13]),
        .src_clk(src_clk),
        .src_in(src_in[13]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__17 \single_array[14].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[14]),
        .src_clk(src_clk),
        .src_in(src_in[14]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__18 \single_array[15].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[15]),
        .src_clk(src_clk),
        .src_in(src_in[15]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__19 \single_array[16].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[16]),
        .src_clk(src_clk),
        .src_in(src_in[16]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__20 \single_array[17].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[17]),
        .src_clk(src_clk),
        .src_in(src_in[17]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__21 \single_array[18].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[18]),
        .src_clk(src_clk),
        .src_in(src_in[18]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__22 \single_array[19].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[19]),
        .src_clk(src_clk),
        .src_in(src_in[19]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__4 \single_array[1].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[1]),
        .src_clk(src_clk),
        .src_in(src_in[1]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__23 \single_array[20].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[20]),
        .src_clk(src_clk),
        .src_in(src_in[20]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__24 \single_array[21].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[21]),
        .src_clk(src_clk),
        .src_in(src_in[21]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__5 \single_array[2].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[2]),
        .src_clk(src_clk),
        .src_in(src_in[2]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__6 \single_array[3].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[3]),
        .src_clk(src_clk),
        .src_in(src_in[3]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__7 \single_array[4].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[4]),
        .src_clk(src_clk),
        .src_in(src_in[4]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__8 \single_array[5].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[5]),
        .src_clk(src_clk),
        .src_in(src_in[5]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__9 \single_array[6].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[6]),
        .src_clk(src_clk),
        .src_in(src_in[6]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__10 \single_array[7].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[7]),
        .src_clk(src_clk),
        .src_in(src_in[7]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__11 \single_array[8].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[8]),
        .src_clk(src_clk),
        .src_in(src_in[8]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__12 \single_array[9].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[9]),
        .src_clk(src_clk),
        .src_in(src_in[9]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_array_single__parameterized1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire dest_clk;
  wire [1:0]dest_out;
  wire src_clk;
  wire [1:0]src_in;

  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__102 \single_array[0].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[0]),
        .src_clk(src_clk),
        .src_in(src_in[0]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__103 \single_array[1].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[1]),
        .src_clk(src_clk),
        .src_in(src_in[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_array_single__parameterized1__xdcDup__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire dest_clk;
  wire [1:0]dest_out;
  wire src_clk;
  wire [1:0]src_in;

  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__94 \single_array[0].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[0]),
        .src_clk(src_clk),
        .src_in(src_in[0]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__95 \single_array[1].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[1]),
        .src_clk(src_clk),
        .src_in(src_in[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_array_single__parameterized1__xdcDup__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire dest_clk;
  wire [1:0]dest_out;
  wire src_clk;
  wire [1:0]src_in;

  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__96 \single_array[0].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[0]),
        .src_clk(src_clk),
        .src_in(src_in[0]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__97 \single_array[1].xpm_cdc_single_inst 
       (.dest_clk(dest_clk),
        .dest_out(dest_out[1]),
        .src_clk(src_clk),
        .src_in(src_in[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__10
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__11
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__5
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__6
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__7
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__8
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__9
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__parameterized0
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__parameterized0__1
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__parameterized0__2
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_bf15_rx_0_xpm_cdc_async_rst__parameterized0__3
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_bf15_rx_0_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [1]),
        .I2(\dest_graysync_ff[1] [0]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [1]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_bf15_rx_0_xpm_cdc_gray__2
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [1]),
        .I2(\dest_graysync_ff[1] [0]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [1]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_bf15_rx_0_xpm_cdc_gray__3
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [1]),
        .I2(\dest_graysync_ff[1] [0]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [1]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_bf15_rx_0_xpm_cdc_gray__4
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [1]),
        .I2(\dest_graysync_ff[1] [0]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [1]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [4]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__70 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__69 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__parameterized0
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [1:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [1:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire [1:0]dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire p_0_in;
  wire src_clk;
  wire [1:0]src_hsdata_ff;
  wire [1:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[1:0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[0]),
        .Q(dest_hsdata_ff[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[1] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[1]),
        .Q(dest_hsdata_ff[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \src_hsdata_ff[1]_i_1 
       (.I0(src_sendd_ff),
        .O(p_0_in));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[0]),
        .Q(src_hsdata_ff[0]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[1] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[1]),
        .Q(src_hsdata_ff[1]),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__31 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__30 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "24" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__parameterized1
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [23:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [23:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire [23:0]dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire p_0_in;
  wire src_clk;
  wire [23:0]src_hsdata_ff;
  wire [23:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[23:0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[0]),
        .Q(dest_hsdata_ff[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[10] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[10]),
        .Q(dest_hsdata_ff[10]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[11] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[11]),
        .Q(dest_hsdata_ff[11]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[12] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[12]),
        .Q(dest_hsdata_ff[12]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[13] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[13]),
        .Q(dest_hsdata_ff[13]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[14] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[14]),
        .Q(dest_hsdata_ff[14]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[15] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[15]),
        .Q(dest_hsdata_ff[15]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[16] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[16]),
        .Q(dest_hsdata_ff[16]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[17] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[17]),
        .Q(dest_hsdata_ff[17]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[18] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[18]),
        .Q(dest_hsdata_ff[18]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[19] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[19]),
        .Q(dest_hsdata_ff[19]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[1] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[1]),
        .Q(dest_hsdata_ff[1]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[20] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[20]),
        .Q(dest_hsdata_ff[20]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[21] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[21]),
        .Q(dest_hsdata_ff[21]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[22] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[22]),
        .Q(dest_hsdata_ff[22]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[23] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[23]),
        .Q(dest_hsdata_ff[23]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[2] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[2]),
        .Q(dest_hsdata_ff[2]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[3] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[3]),
        .Q(dest_hsdata_ff[3]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[4] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[4]),
        .Q(dest_hsdata_ff[4]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[5] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[5]),
        .Q(dest_hsdata_ff[5]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[6] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[6]),
        .Q(dest_hsdata_ff[6]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[7] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[7]),
        .Q(dest_hsdata_ff[7]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[8] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[8]),
        .Q(dest_hsdata_ff[8]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[9] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[9]),
        .Q(dest_hsdata_ff[9]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \src_hsdata_ff[23]_i_1 
       (.I0(src_sendd_ff),
        .O(p_0_in));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[0]),
        .Q(src_hsdata_ff[0]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[10] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[10]),
        .Q(src_hsdata_ff[10]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[11] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[11]),
        .Q(src_hsdata_ff[11]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[12] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[12]),
        .Q(src_hsdata_ff[12]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[13] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[13]),
        .Q(src_hsdata_ff[13]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[14] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[14]),
        .Q(src_hsdata_ff[14]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[15] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[15]),
        .Q(src_hsdata_ff[15]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[16] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[16]),
        .Q(src_hsdata_ff[16]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[17] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[17]),
        .Q(src_hsdata_ff[17]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[18] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[18]),
        .Q(src_hsdata_ff[18]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[19] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[19]),
        .Q(src_hsdata_ff[19]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[1] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[1]),
        .Q(src_hsdata_ff[1]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[20] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[20]),
        .Q(src_hsdata_ff[20]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[21] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[21]),
        .Q(src_hsdata_ff[21]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[22] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[22]),
        .Q(src_hsdata_ff[22]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[23] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[23]),
        .Q(src_hsdata_ff[23]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[2] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[2]),
        .Q(src_hsdata_ff[2]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[3] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[3]),
        .Q(src_hsdata_ff[3]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[4] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[4]),
        .Q(src_hsdata_ff[4]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[5] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[5]),
        .Q(src_hsdata_ff[5]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[6] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[6]),
        .Q(src_hsdata_ff[6]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[7] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[7]),
        .Q(src_hsdata_ff[7]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[8] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[8]),
        .Q(src_hsdata_ff[8]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[9] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[9]),
        .Q(src_hsdata_ff[9]),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__105 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__104 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__1
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__52 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__51 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__10
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__88 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__87 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__11
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__90 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__89 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__12
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__54 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__53 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__13
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__92 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__91 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__14
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__56 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__55 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__15
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__58 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__57 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__16
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__60 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__59 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__17
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__62 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__61 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__18
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__64 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__63 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__19
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__66 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__65 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__2
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__72 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__71 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__20
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__68 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__67 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__3
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__74 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__73 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__4
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__76 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__75 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__5
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__78 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__77 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__6
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__80 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__79 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__7
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__82 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__81 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__8
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__84 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__83 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__9
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "yes" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__86 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__85 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_bf15_rx_0_xpm_cdc_pulse
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    dest_pulse_INST_0
       (.I0(dest_rst),
        .I1(dest_sync_out),
        .I2(dest_event_ff),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'h9A)) 
    src_level_ff_i_1
       (.I0(src_level_ff),
        .I1(src_in_ff),
        .I2(src_pulse),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__1
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    dest_pulse_INST_0
       (.I0(dest_rst),
        .I1(dest_sync_out),
        .I2(dest_event_ff),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'h9A)) 
    src_level_ff_i_1
       (.I0(src_level_ff),
        .I1(src_in_ff),
        .I2(src_pulse),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__32 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__2
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    dest_pulse_INST_0
       (.I0(dest_rst),
        .I1(dest_sync_out),
        .I2(dest_event_ff),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'h9A)) 
    src_level_ff_i_1
       (.I0(src_level_ff),
        .I1(src_in_ff),
        .I2(src_pulse),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__108 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__3
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    dest_pulse_INST_0
       (.I0(dest_rst),
        .I1(dest_sync_out),
        .I2(dest_event_ff),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'h9A)) 
    src_level_ff_i_1
       (.I0(src_level_ff),
        .I1(src_in_ff),
        .I2(src_pulse),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__109 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__4
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    dest_pulse_INST_0
       (.I0(dest_rst),
        .I1(dest_sync_out),
        .I2(dest_event_ff),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'h9A)) 
    src_level_ff_i_1
       (.I0(src_level_ff),
        .I1(src_in_ff),
        .I2(src_pulse),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__110 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__100
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__101
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__102
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__103
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__104
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__105
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__106
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__107
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__108
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__109
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__110
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__27
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__28
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__29
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__30
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__31
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__32
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__33
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__34
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__35
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__36
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__37
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__38
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__39
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__40
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__41
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__42
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__43
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__44
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__45
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__46
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__47
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__48
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__49
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__50
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__51
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__52
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__53
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__54
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__55
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__56
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__57
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__58
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__59
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__60
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__61
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__62
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__63
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__64
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__65
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__66
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__67
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__68
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__69
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__70
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__71
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__72
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__73
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__74
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__75
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__76
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__77
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__78
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__79
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__80
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__81
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__82
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__83
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__84
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__85
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__86
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__87
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__88
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__89
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__90
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__91
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__92
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__93
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__94
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__95
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__96
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__97
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__98
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__99
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized0
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized0__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized0__3
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized0__4
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__10
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__11
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__12
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__13
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__14
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__15
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__16
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__17
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__18
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__19
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__20
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__21
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__22
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__23
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__24
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__25
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__3
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__4
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__5
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__6
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__7
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__8
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_bf15_rx_0_xpm_cdc_single__parameterized1__9
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module bd_bf15_rx_0_blk_mem_gen_generic_cstr
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [67:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [67:0]din;

  wire [11:0]Q;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[8:0]),
        .dout(dout[8:0]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized0 \ramloop[1].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[17:9]),
        .dout(dout[17:9]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized1 \ramloop[2].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[26:18]),
        .dout(dout[26:18]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized2 \ramloop[3].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[35:27]),
        .dout(dout[35:27]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized3 \ramloop[4].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[44:36]),
        .dout(dout[44:36]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized4 \ramloop[5].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[53:45]),
        .dout(dout[53:45]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized5 \ramloop[6].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[62:54]),
        .dout(dout[62:54]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized6 \ramloop[7].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[67:63]),
        .dout(dout[67:63]),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized0
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized2
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized2 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized3
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized3 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized4
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized4 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized5
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized5 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_width__parameterized6
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [4:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [4:0]din;

  wire [11:0]Q;
  wire clk;
  wire [4:0]din;
  wire [4:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized6 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized0
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized2
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized3
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized4
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized5
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [8:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,din[8]}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],dout[7:0]}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_bf15_rx_0_blk_mem_gen_prim_wrapper__parameterized6
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [4:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [4:0]din;

  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_125 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_126 ;
  wire \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 ;
  wire [11:0]Q;
  wire clk;
  wire [4:0]din;
  wire [4:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E2 #(
    .CASCADE_ORDER_A("NONE"),
    .CASCADE_ORDER_B("NONE"),
    .CLOCK_DOMAINS("COMMON"),
    .DOA_REG(1),
    .DOB_REG(1),
    .ENADDRENA("FALSE"),
    .ENADDRENB("FALSE"),
    .EN_ECC_PIPE("FALSE"),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RDADDRCHANGEA("FALSE"),
    .RDADDRCHANGEB("FALSE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SLEEP_ASYNC("FALSE"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gc0.count_d1_reg[11] ,1'b0,1'b0,1'b0}),
        .ADDRENA(1'b0),
        .ADDRENB(1'b0),
        .CASDIMUXA(1'b0),
        .CASDIMUXB(1'b0),
        .CASDINA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINB({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CASDINPA({1'b0,1'b0,1'b0,1'b0}),
        .CASDINPB({1'b0,1'b0,1'b0,1'b0}),
        .CASDOMUXA(1'b0),
        .CASDOMUXB(1'b0),
        .CASDOMUXEN_A(1'b0),
        .CASDOMUXEN_B(1'b0),
        .CASDOUTA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTA_UNCONNECTED [31:0]),
        .CASDOUTB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTB_UNCONNECTED [31:0]),
        .CASDOUTPA(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPA_UNCONNECTED [3:0]),
        .CASDOUTPB(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASDOUTPB_UNCONNECTED [3:0]),
        .CASINDBITERR(1'b0),
        .CASINSBITERR(1'b0),
        .CASOREGIMUXA(1'b0),
        .CASOREGIMUXB(1'b0),
        .CASOREGIMUXEN_A(1'b0),
        .CASOREGIMUXEN_B(1'b0),
        .CASOUTDBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTDBITERR_UNCONNECTED ),
        .CASOUTSBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASOUTSBITERR_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DINADIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DINBDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DINPADINP({1'b0,1'b0,1'b0,1'b0}),
        .DINPBDINP({1'b0,1'b0,1'b0,1'b0}),
        .DOUTADOUT(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTADOUT_UNCONNECTED [31:0]),
        .DOUTBDOUT({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTBDOUT_UNCONNECTED [31:8],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_124 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_125 ,\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_126 ,dout}),
        .DOUTPADOUTP(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPADOUTP_UNCONNECTED [3:0]),
        .DOUTPBDOUTP({\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOUTPBDOUTP_UNCONNECTED [3:1],\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_147 }),
        .ECCPARITY(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ECCPIPECE(1'b0),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst_full_ff_i),
        .SBITERR(\NLW_DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .SLEEP(1'b0),
        .WEA({1'b0,1'b0,1'b0,mem_wen_reg}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module bd_bf15_rx_0_blk_mem_gen_top
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [67:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [67:0]din;

  wire [11:0]Q;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_generic_cstr \valid.cstr 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_0" *) 
module bd_bf15_rx_0_blk_mem_gen_v8_4_0
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [67:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [67:0]din;

  wire [11:0]Q;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_v8_4_0_synth inst_blk_mem_gen
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_0_synth" *) 
module bd_bf15_rx_0_blk_mem_gen_v8_4_0_synth
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [67:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [67:0]din;

  wire [11:0]Q;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "bram_fifo_rstlogic" *) 
module bd_bf15_rx_0_bram_fifo_rstlogic
   (wr_rst_reg_reg_0,
    srst_full_ff_i,
    srst,
    clk);
  output wr_rst_reg_reg_0;
  output srst_full_ff_i;
  input srst;
  input clk;

  wire clk;
  (* async_reg = "true" *) wire d_asreg;
  (* async_reg = "true" *) wire rd_rst_reg;
  (* async_reg = "true" *) wire rdrst_q1;
  (* async_reg = "true" *) wire rdrst_q2;
  (* async_reg = "true" *) wire rdrst_q3;
  (* async_reg = "true" *) wire rst_d1;
  (* async_reg = "true" *) wire rst_d2;
  wire srst;
  wire srst_full_ff_i;
  wire wr_rst_reg_i_1_n_0;
  wire wr_rst_reg_reg_0;
  (* async_reg = "true" *) wire wrrst_q1;
  (* async_reg = "true" *) wire wrrst_q2;
  (* async_reg = "true" *) wire wrrst_q3;

  LUT2 #(
    .INIT(4'hE)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_4 
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(srst_full_ff_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(d_asreg));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(rd_rst_reg));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b0),
        .O(wrrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b0),
        .O(wrrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b0),
        .O(wrrst_q3));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(1'b0),
        .O(rdrst_q1));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(1'b0),
        .O(rdrst_q2));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(1'b0),
        .O(rdrst_q3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d1_reg
       (.C(clk),
        .CE(1'b1),
        .D(srst),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    rst_d2_reg
       (.C(clk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    wr_rst_reg_i_1
       (.I0(srst),
        .I1(wr_rst_reg_reg_0),
        .O(wr_rst_reg_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_rst_reg_reg
       (.C(clk),
        .CE(1'b1),
        .D(wr_rst_reg_i_1_n_0),
        .Q(wr_rst_reg_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module bd_bf15_rx_0_clk_x_pntrs
   (ram_empty_fb_i_reg,
    WR_PNTR_RD,
    ram_full_fb_i_reg,
    RD_PNTR_WR,
    Q,
    ram_empty_fb_i_reg_0,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_reg[3] ,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d1_reg[2] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[4] ,
    rd_clk);
  output ram_empty_fb_i_reg;
  output [3:0]WR_PNTR_RD;
  output ram_full_fb_i_reg;
  output [1:0]RD_PNTR_WR;
  input [3:0]Q;
  input ram_empty_fb_i_reg_0;
  input \gc0.count_d1_reg[2] ;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [3:0]\gic0.gc0.count_reg[3] ;
  input ram_full_fb_i_reg_0;
  input \gic0.gc0.count_d1_reg[3] ;
  input [2:0]\gic0.gc0.count_d1_reg[2] ;
  input wr_clk;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input rd_clk;

  wire [3:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire [3:0]WR_PNTR_RD;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gic0.gc0.count_d1_reg[2] ;
  wire \gic0.gc0.count_d1_reg[3] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [3:0]\gic0.gc0.count_reg[3] ;
  wire [3:3]p_24_out;
  wire [2:0]p_25_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_4_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_5_n_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'hFFFF900090009000)) 
    ram_empty_i_i_1
       (.I0(WR_PNTR_RD[0]),
        .I1(Q[0]),
        .I2(ram_empty_i_i_2_n_0),
        .I3(ram_empty_fb_i_reg_0),
        .I4(ram_empty_i_i_4_n_0),
        .I5(\gc0.count_d1_reg[2] ),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_2
       (.I0(p_24_out),
        .I1(Q[3]),
        .I2(WR_PNTR_RD[2]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(p_24_out),
        .I1(\gc0.count_d1_reg[4] [3]),
        .I2(WR_PNTR_RD[3]),
        .I3(\gc0.count_d1_reg[4] [4]),
        .O(ram_empty_i_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFF900090009000)) 
    ram_full_i_i_1
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_reg[3] [0]),
        .I2(ram_full_i_i_2_n_0),
        .I3(ram_full_fb_i_reg_0),
        .I4(\gic0.gc0.count_d1_reg[3] ),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(RD_PNTR_WR[0]),
        .I1(\gic0.gc0.count_reg[3] [3]),
        .I2(p_25_out[2]),
        .I3(\gic0.gc0.count_reg[3] [2]),
        .I4(\gic0.gc0.count_reg[3] [1]),
        .I5(p_25_out[1]),
        .O(ram_full_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_5
       (.I0(p_25_out[2]),
        .I1(\gic0.gc0.count_d1_reg[2] [2]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_d1_reg[2] [1]),
        .I4(\gic0.gc0.count_d1_reg[2] [0]),
        .I5(p_25_out[0]),
        .O(ram_full_i_i_5_n_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin({RD_PNTR_WR,p_25_out}),
        .src_clk(rd_clk),
        .src_in_bin(\gc0.count_d1_reg[4] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_gray__4 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin({WR_PNTR_RD[3],p_24_out,WR_PNTR_RD[2:0]}),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[4] ));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module bd_bf15_rx_0_clk_x_pntrs__xdcDup__1
   (ram_empty_fb_i_reg,
    WR_PNTR_RD,
    ram_full_fb_i_reg,
    RD_PNTR_WR,
    Q,
    ram_empty_fb_i_reg_0,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_reg[3] ,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d1_reg[3] ,
    \gic0.gc0.count_d1_reg[2] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[4] ,
    rd_clk);
  output ram_empty_fb_i_reg;
  output [3:0]WR_PNTR_RD;
  output ram_full_fb_i_reg;
  output [1:0]RD_PNTR_WR;
  input [3:0]Q;
  input ram_empty_fb_i_reg_0;
  input \gc0.count_d1_reg[2] ;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [3:0]\gic0.gc0.count_reg[3] ;
  input ram_full_fb_i_reg_0;
  input \gic0.gc0.count_d1_reg[3] ;
  input [2:0]\gic0.gc0.count_d1_reg[2] ;
  input wr_clk;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input rd_clk;

  wire [3:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire [3:0]WR_PNTR_RD;
  wire \gc0.count_d1_reg[2] ;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [2:0]\gic0.gc0.count_d1_reg[2] ;
  wire \gic0.gc0.count_d1_reg[3] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [3:0]\gic0.gc0.count_reg[3] ;
  wire [3:3]p_24_out;
  wire [2:0]p_25_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_i_i_2_n_0;
  wire ram_empty_i_i_4_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_5_n_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'hFFFF900090009000)) 
    ram_empty_i_i_1
       (.I0(WR_PNTR_RD[0]),
        .I1(Q[0]),
        .I2(ram_empty_i_i_2_n_0),
        .I3(ram_empty_fb_i_reg_0),
        .I4(ram_empty_i_i_4_n_0),
        .I5(\gc0.count_d1_reg[2] ),
        .O(ram_empty_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_2
       (.I0(p_24_out),
        .I1(Q[3]),
        .I2(WR_PNTR_RD[2]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_2_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(p_24_out),
        .I1(\gc0.count_d1_reg[4] [3]),
        .I2(WR_PNTR_RD[3]),
        .I3(\gc0.count_d1_reg[4] [4]),
        .O(ram_empty_i_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFF900090009000)) 
    ram_full_i_i_1
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_reg[3] [0]),
        .I2(ram_full_i_i_2_n_0),
        .I3(ram_full_fb_i_reg_0),
        .I4(\gic0.gc0.count_d1_reg[3] ),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_fb_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(RD_PNTR_WR[0]),
        .I1(\gic0.gc0.count_reg[3] [3]),
        .I2(p_25_out[2]),
        .I3(\gic0.gc0.count_reg[3] [2]),
        .I4(\gic0.gc0.count_reg[3] [1]),
        .I5(p_25_out[1]),
        .O(ram_full_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_5
       (.I0(p_25_out[2]),
        .I1(\gic0.gc0.count_d1_reg[2] [2]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_d1_reg[2] [1]),
        .I4(\gic0.gc0.count_d1_reg[2] [0]),
        .I5(p_25_out[0]),
        .O(ram_full_i_i_5_n_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_gray__3 rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin({RD_PNTR_WR,p_25_out}),
        .src_clk(rd_clk),
        .src_in_bin(\gc0.count_d1_reg[4] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_gray__2 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin({WR_PNTR_RD[3],p_24_out,WR_PNTR_RD[2:0]}),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[4] ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_bf15_rx_0_compare__parameterized1
   (comp0,
    v1_reg);
  output comp0;
  input [5:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire [5:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_bf15_rx_0_compare__parameterized1_3
   (comp1,
    ram_full_fb_i_reg,
    v1_reg_0,
    wr_en,
    comp0,
    p_7_out,
    out);
  output comp1;
  output ram_full_fb_i_reg;
  input [5:0]v1_reg_0;
  input wr_en;
  input comp0;
  input p_7_out;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg_0}));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    ram_full_fb_i_i_1
       (.I0(comp1),
        .I1(wr_en),
        .I2(comp0),
        .I3(p_7_out),
        .I4(out),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_bf15_rx_0_compare__parameterized1_4
   (\gaf.gaf0.ram_afull_i_reg ,
    v1_reg_1,
    out,
    wr_en,
    p_7_out,
    comp1,
    almost_full);
  output \gaf.gaf0.ram_afull_i_reg ;
  input [5:0]v1_reg_1;
  input out;
  input wr_en;
  input p_7_out;
  input comp1;
  input almost_full;

  wire almost_full;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp1;
  wire \gaf.gaf0.ram_afull_i_reg ;
  wire out;
  wire p_0_in;
  wire p_7_out;
  wire [5:0]v1_reg_1;
  wire wr_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h30FFFFFF00200020)) 
    \gaf.gaf0.ram_afull_i_i_1 
       (.I0(p_0_in),
        .I1(out),
        .I2(wr_en),
        .I3(p_7_out),
        .I4(comp1),
        .I5(almost_full),
        .O(\gaf.gaf0.ram_afull_i_reg ));
  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],p_0_in,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg_1}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_bf15_rx_0_compare__parameterized1_5
   (ram_empty_i_reg,
    \gcc0.gc1.gsym.count_d2_reg[0] ,
    \gcc0.gc1.gsym.count_d2_reg[2] ,
    \gcc0.gc1.gsym.count_d2_reg[4] ,
    \gcc0.gc1.gsym.count_d2_reg[6] ,
    \gcc0.gc1.gsym.count_d2_reg[8] ,
    \gcc0.gc1.gsym.count_d2_reg[10] ,
    out,
    E,
    comp1,
    wr_en,
    ram_full_fb_i_reg);
  output ram_empty_i_reg;
  input \gcc0.gc1.gsym.count_d2_reg[0] ;
  input \gcc0.gc1.gsym.count_d2_reg[2] ;
  input \gcc0.gc1.gsym.count_d2_reg[4] ;
  input \gcc0.gc1.gsym.count_d2_reg[6] ;
  input \gcc0.gc1.gsym.count_d2_reg[8] ;
  input \gcc0.gc1.gsym.count_d2_reg[10] ;
  input out;
  input [0:0]E;
  input comp1;
  input wr_en;
  input ram_full_fb_i_reg;

  wire [0:0]E;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire \gcc0.gc1.gsym.count_d2_reg[0] ;
  wire \gcc0.gc1.gsym.count_d2_reg[10] ;
  wire \gcc0.gc1.gsym.count_d2_reg[2] ;
  wire \gcc0.gc1.gsym.count_d2_reg[4] ;
  wire \gcc0.gc1.gsym.count_d2_reg[6] ;
  wire \gcc0.gc1.gsym.count_d2_reg[8] ;
  wire out;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire wr_en;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp0,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],\gcc0.gc1.gsym.count_d2_reg[10] ,\gcc0.gc1.gsym.count_d2_reg[8] ,\gcc0.gc1.gsym.count_d2_reg[6] ,\gcc0.gc1.gsym.count_d2_reg[4] ,\gcc0.gc1.gsym.count_d2_reg[2] ,\gcc0.gc1.gsym.count_d2_reg[0] }));
  LUT6 #(
    .INIT(64'hFCCCFCCC4444FCCC)) 
    ram_empty_fb_i_i_1
       (.I0(comp0),
        .I1(out),
        .I2(E),
        .I3(comp1),
        .I4(wr_en),
        .I5(ram_full_fb_i_reg),
        .O(ram_empty_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_bf15_rx_0_compare__parameterized1_6
   (comp1,
    v1_reg);
  output comp1;
  input [5:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_4;
  wire comp1;
  wire [5:0]v1_reg;
  wire [7:3]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED ;
  wire [7:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED ;
  wire [7:6]\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(CARRY4)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY8 \gmux.gm[0].gm1.m1_CARRY4_CARRY8 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [7:6],comp1,carrynet_4,\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_CO_UNCONNECTED [3],carrynet_2,carrynet_1,carrynet_0}),
        .DI({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_O_UNCONNECTED [7:0]),
        .S({\NLW_gmux.gm[0].gm1.m1_CARRY4_CARRY8_S_UNCONNECTED [7:6],v1_reg}));
endmodule

(* ORIG_REF_NAME = "dc_ss_fwft" *) 
module bd_bf15_rx_0_dc_ss_fwft
   (Q,
    out,
    rd_en,
    srst_full_ff_i,
    E,
    clk);
  output [11:0]Q;
  input out;
  input rd_en;
  input srst_full_ff_i;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire clk;
  wire out;
  wire rd_en;
  wire srst_full_ff_i;

  bd_bf15_rx_0_updn_cntr dc
       (.E(E),
        .Q(Q),
        .clk(clk),
        .out(out),
        .rd_en(rd_en),
        .srst_full_ff_i(srst_full_ff_i));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem
   (\goreg_dm.dout_i_reg[11] ,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR);
  output [11:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]\goreg_dm.dout_i_reg[11] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRE({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRF({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRG({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRH({1'b0,Q}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED[1:0]),
        .DOH(NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(\goreg_dm.dout_i_reg[11] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(\goreg_dm.dout_i_reg[11] [10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(\goreg_dm.dout_i_reg[11] [11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(\goreg_dm.dout_i_reg[11] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(\goreg_dm.dout_i_reg[11] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(\goreg_dm.dout_i_reg[11] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(\goreg_dm.dout_i_reg[11] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(\goreg_dm.dout_i_reg[11] [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(\goreg_dm.dout_i_reg[11] [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(\goreg_dm.dout_i_reg[11] [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(\goreg_dm.dout_i_reg[11] [8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(\goreg_dm.dout_i_reg[11] [9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem_16
   (\goreg_dm.dout_i_reg[11] ,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR);
  output [11:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]\goreg_dm.dout_i_reg[11] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRE({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRF({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRG({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRH({1'b0,Q}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED[1:0]),
        .DOH(NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(\goreg_dm.dout_i_reg[11] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(\goreg_dm.dout_i_reg[11] [10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(\goreg_dm.dout_i_reg[11] [11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(\goreg_dm.dout_i_reg[11] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(\goreg_dm.dout_i_reg[11] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(\goreg_dm.dout_i_reg[11] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(\goreg_dm.dout_i_reg[11] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(\goreg_dm.dout_i_reg[11] [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(\goreg_dm.dout_i_reg[11] [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(\goreg_dm.dout_i_reg[11] [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(\goreg_dm.dout_i_reg[11] [8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(\goreg_dm.dout_i_reg[11] [9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem_25
   (\goreg_dm.dout_i_reg[11] ,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR);
  output [11:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]\goreg_dm.dout_i_reg[11] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRE({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRF({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRG({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRH({1'b0,Q}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED[1:0]),
        .DOH(NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(\goreg_dm.dout_i_reg[11] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(\goreg_dm.dout_i_reg[11] [10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(\goreg_dm.dout_i_reg[11] [11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(\goreg_dm.dout_i_reg[11] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(\goreg_dm.dout_i_reg[11] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(\goreg_dm.dout_i_reg[11] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(\goreg_dm.dout_i_reg[11] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(\goreg_dm.dout_i_reg[11] [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(\goreg_dm.dout_i_reg[11] [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(\goreg_dm.dout_i_reg[11] [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(\goreg_dm.dout_i_reg[11] [8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(\goreg_dm.dout_i_reg[11] [9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem_34
   (\goreg_dm.dout_i_reg[11] ,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR);
  output [11:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]\goreg_dm.dout_i_reg[11] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRE({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRF({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRG({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRH({1'b0,Q}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(NLW_RAM_reg_0_15_0_5_DOG_UNCONNECTED[1:0]),
        .DOH(NLW_RAM_reg_0_15_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(\goreg_dm.dout_i_reg[11] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(\goreg_dm.dout_i_reg[11] [10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(\goreg_dm.dout_i_reg[11] [11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(\goreg_dm.dout_i_reg[11] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(\goreg_dm.dout_i_reg[11] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(\goreg_dm.dout_i_reg[11] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(\goreg_dm.dout_i_reg[11] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(\goreg_dm.dout_i_reg[11] [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(\goreg_dm.dout_i_reg[11] [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(\goreg_dm.dout_i_reg[11] [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(\goreg_dm.dout_i_reg[11] [8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[0] ),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(\goreg_dm.dout_i_reg[11] [9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem__parameterized0
   (dout,
    wr_clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    E,
    rd_clk,
    AR);
  output [41:0]dout;
  input wr_clk;
  input EN;
  input [41:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [41:0]din;
  wire [41:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [41:0]p_0_out;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_31_0_5_DOH_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_12_17_DOH_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gc0.count_d1_reg[4] ),
        .ADDRE(\gc0.count_d1_reg[4] ),
        .ADDRF(\gc0.count_d1_reg[4] ),
        .ADDRG(\gc0.count_d1_reg[4] ),
        .ADDRH(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG(din[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(p_0_out[13:12]),
        .DOH(NLW_RAM_reg_0_31_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_31_12_17
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gc0.count_d1_reg[4] ),
        .ADDRE(\gc0.count_d1_reg[4] ),
        .ADDRF(\gc0.count_d1_reg[4] ),
        .ADDRG(\gc0.count_d1_reg[4] ),
        .ADDRH(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[29:28]),
        .DIB(din[31:30]),
        .DIC(din[33:32]),
        .DID(din[35:34]),
        .DIE(din[37:36]),
        .DIF(din[39:38]),
        .DIG(din[41:40]),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[29:28]),
        .DOB(p_0_out[31:30]),
        .DOC(p_0_out[33:32]),
        .DOD(p_0_out[35:34]),
        .DOE(p_0_out[37:36]),
        .DOF(p_0_out[39:38]),
        .DOG(p_0_out[41:40]),
        .DOH(NLW_RAM_reg_0_31_12_17_DOH_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gc0.count_d1_reg[4] ),
        .ADDRE(\gc0.count_d1_reg[4] ),
        .ADDRF(\gc0.count_d1_reg[4] ),
        .ADDRG(\gc0.count_d1_reg[4] ),
        .ADDRH(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[15:14]),
        .DIB(din[17:16]),
        .DIC(din[19:18]),
        .DID(din[21:20]),
        .DIE(din[23:22]),
        .DIF(din[25:24]),
        .DIG(din[27:26]),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[15:14]),
        .DOB(p_0_out[17:16]),
        .DOC(p_0_out[19:18]),
        .DOD(p_0_out[21:20]),
        .DOE(p_0_out[23:22]),
        .DOF(p_0_out[25:24]),
        .DOG(p_0_out[27:26]),
        .DOH(NLW_RAM_reg_0_31_6_11_DOH_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[12]),
        .Q(dout[12]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[13]),
        .Q(dout[13]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[14]),
        .Q(dout[14]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[15]),
        .Q(dout[15]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[16]),
        .Q(dout[16]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[17]),
        .Q(dout[17]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[18]),
        .Q(dout[18]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[19]),
        .Q(dout[19]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[20]),
        .Q(dout[20]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[21]),
        .Q(dout[21]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[22]),
        .Q(dout[22]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[23]),
        .Q(dout[23]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[24]),
        .Q(dout[24]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[25]),
        .Q(dout[25]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[26]),
        .Q(dout[26]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[27]),
        .Q(dout[27]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[28]),
        .Q(dout[28]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[29]),
        .Q(dout[29]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[30]),
        .Q(dout[30]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[31]),
        .Q(dout[31]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[32]),
        .Q(dout[32]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[33]),
        .Q(dout[33]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[34]),
        .Q(dout[34]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[35]),
        .Q(dout[35]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[36] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[36]),
        .Q(dout[36]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[37] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[37]),
        .Q(dout[37]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[38] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[38]),
        .Q(dout[38]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[39] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[39]),
        .Q(dout[39]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[40] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[40]),
        .Q(dout[40]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[41] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[41]),
        .Q(dout[41]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_bf15_rx_0_dmem__parameterized1
   (dout,
    wr_clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    count_d2,
    E,
    rd_clk,
    AR);
  output [23:0]dout;
  input wr_clk;
  input EN;
  input [23:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]count_d2;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [4:0]count_d2;
  wire [23:0]din;
  wire [23:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [23:0]p_0_out;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_31_0_5_DOH_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOF_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOG_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOH_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gc0.count_d1_reg[4] ),
        .ADDRE(\gc0.count_d1_reg[4] ),
        .ADDRF(\gc0.count_d1_reg[4] ),
        .ADDRG(\gc0.count_d1_reg[4] ),
        .ADDRH(count_d2),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID(din[7:6]),
        .DIE(din[9:8]),
        .DIF(din[11:10]),
        .DIG(din[13:12]),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(p_0_out[7:6]),
        .DOE(p_0_out[9:8]),
        .DOF(p_0_out[11:10]),
        .DOG(p_0_out[13:12]),
        .DOH(NLW_RAM_reg_0_31_0_5_DOH_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M16 RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gc0.count_d1_reg[4] ),
        .ADDRE(\gc0.count_d1_reg[4] ),
        .ADDRF(\gc0.count_d1_reg[4] ),
        .ADDRG(\gc0.count_d1_reg[4] ),
        .ADDRH(count_d2),
        .DIA(din[15:14]),
        .DIB(din[17:16]),
        .DIC(din[19:18]),
        .DID(din[21:20]),
        .DIE(din[23:22]),
        .DIF({1'b0,1'b0}),
        .DIG({1'b0,1'b0}),
        .DIH({1'b0,1'b0}),
        .DOA(p_0_out[15:14]),
        .DOB(p_0_out[17:16]),
        .DOC(p_0_out[19:18]),
        .DOD(p_0_out[21:20]),
        .DOE(p_0_out[23:22]),
        .DOF(NLW_RAM_reg_0_31_6_11_DOF_UNCONNECTED[1:0]),
        .DOG(NLW_RAM_reg_0_31_6_11_DOG_UNCONNECTED[1:0]),
        .DOH(NLW_RAM_reg_0_31_6_11_DOH_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(EN));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[12]),
        .Q(dout[12]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[13]),
        .Q(dout[13]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[14]),
        .Q(dout[14]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[15]),
        .Q(dout[15]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[16]),
        .Q(dout[16]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[17]),
        .Q(dout[17]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[18]),
        .Q(dout[18]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[19]),
        .Q(dout[19]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[20]),
        .Q(dout[20]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[21]),
        .Q(dout[21]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[22]),
        .Q(dout[22]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[23]),
        .Q(dout[23]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire p_2_out;
  wire p_6_out;
  wire p_8_out;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out(p_2_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .rd_en(rd_en));
  bd_bf15_rx_0_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gc0.count_reg[3] (rd_pntr_plus1),
        .out(p_2_out),
        .ram_empty_fb_i_reg(p_8_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_bf15_rx_0_reset_blk_ramfifo rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_1 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_12 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_5 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_7 ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_13_out;
  wire [2:0]p_14_out;
  wire p_20_out;
  wire [4:0]p_24_out;
  wire [4:3]p_25_out;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_plus2;
  wire wr_rst_busy;

  bd_bf15_rx_0_clk_x_pntrs__xdcDup__1 \gntv_or_sync_fifo.gcx.clkx 
       (.Q(rd_pntr_plus1),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD({p_24_out[4],p_24_out[2:0]}),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gic0.gc0.count_d1_reg[2] (p_14_out),
        .\gic0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .\gic0.gc0.count_reg[3] (wr_pntr_plus2),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.rd_n_12 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_bf15_rx_0_rd_logic__parameterized0_7 \gntv_or_sync_fifo.gl0.rd 
       (.AR(AR),
        .E(\gntv_or_sync_fifo.gl0.rd_n_1 ),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD({p_24_out[4],p_24_out[2:0]}),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .empty(empty),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.rd_n_12 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (p_0_out_0));
  bd_bf15_rx_0_wr_logic__parameterized0_8 \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_20_out),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .full(full),
        .\gic0.gc0.count_d2_reg[2] (p_14_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .\src_gray_ff_reg[4] (p_13_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.AR(AR),
        .E(\gntv_or_sync_fifo.gl0.rd_n_1 ),
        .EN(p_20_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_bf15_rx_0_reset_blk_ramfifo__parameterized0__xdcDup__1 rstblk
       (.AR(rstblk_n_0),
        .rd_clk(rd_clk),
        .rst(rst),
        .\syncstages_ff_reg[0] (AR),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__parameterized1
   (data_count,
    almost_full,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    prog_full,
    rd_en,
    wr_en,
    srst,
    clk,
    din);
  output [11:0]data_count;
  output almost_full;
  output [67:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  output prog_full;
  input rd_en;
  input wr_en;
  input srst;
  input clk;
  input [67:0]din;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_25 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_23 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_24 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_25 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_26 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_27 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_28 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_3 ;
  wire [5:0]\grss.rsts/c2/v1_reg ;
  wire [11:0]p_0_out;
  wire [11:0]p_11_out;
  wire p_7_out;
  wire prog_full;
  wire rd_en;
  wire [11:0]rd_pntr_plus1;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire wr_en;
  wire wr_rst_reg_reg;

  bd_bf15_rx_0_rd_logic__parameterized1 \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (p_0_out),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .\count_reg[12] (data_count),
        .empty(empty),
        .\gcc0.gc1.gsym.count_d2_reg[0] (\gntv_or_sync_fifo.gl0.wr_n_23 ),
        .\gcc0.gc1.gsym.count_d2_reg[10] (\gntv_or_sync_fifo.gl0.wr_n_28 ),
        .\gcc0.gc1.gsym.count_d2_reg[2] (\gntv_or_sync_fifo.gl0.wr_n_24 ),
        .\gcc0.gc1.gsym.count_d2_reg[4] (\gntv_or_sync_fifo.gl0.wr_n_25 ),
        .\gcc0.gc1.gsym.count_d2_reg[6] (\gntv_or_sync_fifo.gl0.wr_n_26 ),
        .\gcc0.gc1.gsym.count_d2_reg[8] (\gntv_or_sync_fifo.gl0.wr_n_27 ),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] (\gntv_or_sync_fifo.gl0.rd_n_25 ),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .p_7_out(p_7_out),
        .rd_en(rd_en),
        .srst(srst),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en),
        .v1_reg(\grss.rsts/c2/v1_reg ),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  bd_bf15_rx_0_wr_logic__parameterized1 \gntv_or_sync_fifo.gl0.wr 
       (.Q(p_11_out),
        .almost_full(almost_full),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[11] (p_0_out),
        .\gc0.count_reg[11] (rd_pntr_plus1),
        .\gcc0.gc1.gsym.count_d1_reg[11] (\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .p_7_out(p_7_out),
        .prog_full(prog_full),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_23 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_24 ),
        .ram_empty_i_reg_1(\gntv_or_sync_fifo.gl0.wr_n_25 ),
        .ram_empty_i_reg_2(\gntv_or_sync_fifo.gl0.wr_n_26 ),
        .ram_empty_i_reg_3(\gntv_or_sync_fifo.gl0.wr_n_27 ),
        .ram_empty_i_reg_4(\gntv_or_sync_fifo.gl0.wr_n_28 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_25 ),
        .srst_full_ff_i(srst_full_ff_i),
        .v1_reg(\grss.rsts/c2/v1_reg ),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory__parameterized1 \gntv_or_sync_fifo.mem 
       (.Q(p_11_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (p_0_out),
        .mem_wen_reg(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_bf15_rx_0_reset_blk_ramfifo__parameterized1 rstblk
       (.clk(clk),
        .srst(srst),
        .srst_full_ff_i(srst_full_ff_i),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_1 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_12 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_6 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_5 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_7 ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_13_out;
  wire [2:0]p_14_out;
  wire p_20_out;
  wire [4:0]p_24_out;
  wire [4:3]p_25_out;
  wire rd_clk;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_clk;
  wire wr_en;
  wire [3:0]wr_pntr_plus2;
  wire wr_rst_busy;

  bd_bf15_rx_0_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.Q(rd_pntr_plus1),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD({p_24_out[4],p_24_out[2:0]}),
        .\gc0.count_d1_reg[2] (\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gic0.gc0.count_d1_reg[2] (p_14_out),
        .\gic0.gc0.count_d1_reg[3] (\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .\gic0.gc0.count_reg[3] (wr_pntr_plus2),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.rd_n_12 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_bf15_rx_0_rd_logic__parameterized0 \gntv_or_sync_fifo.gl0.rd 
       (.AR(AR),
        .E(\gntv_or_sync_fifo.gl0.rd_n_1 ),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD({p_24_out[4],p_24_out[2:0]}),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .empty(empty),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_6 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gl0.rd_n_12 ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (p_0_out_0));
  bd_bf15_rx_0_wr_logic__parameterized0 \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_20_out),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_5 ),
        .full(full),
        .\gic0.gc0.count_d2_reg[2] (p_14_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_5 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gl0.wr_n_7 ),
        .\src_gray_ff_reg[4] (p_13_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory__parameterized2 \gntv_or_sync_fifo.mem 
       (.AR(AR),
        .E(\gntv_or_sync_fifo.gl0.rd_n_1 ),
        .EN(p_20_out),
        .count_d2(p_13_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_bf15_rx_0_reset_blk_ramfifo__parameterized0 rstblk
       (.AR(rstblk_n_0),
        .rd_clk(rd_clk),
        .rst(rst),
        .\syncstages_ff_reg[0] (AR),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire p_2_out;
  wire p_6_out;
  wire p_8_out;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_rd_logic_31 \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out(p_2_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .rd_en(rd_en));
  bd_bf15_rx_0_wr_logic_32 \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gc0.count_reg[3] (rd_pntr_plus1),
        .out(p_2_out),
        .ram_empty_fb_i_reg(p_8_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory_33 \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__1 rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__2
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire p_2_out;
  wire p_6_out;
  wire p_8_out;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_rd_logic_22 \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out(p_2_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .rd_en(rd_en));
  bd_bf15_rx_0_wr_logic_23 \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gc0.count_reg[3] (rd_pntr_plus1),
        .out(p_2_out),
        .ram_empty_fb_i_reg(p_8_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory_24 \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__2 rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__3
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_2 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_2 ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire p_2_out;
  wire p_6_out;
  wire p_8_out;
  wire rd_en;
  wire [3:0]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_rd_logic_13 \gntv_or_sync_fifo.gl0.rd 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .Q(rd_pntr_plus1),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .out(p_2_out),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .rd_en(rd_en));
  bd_bf15_rx_0_wr_logic_14 \gntv_or_sync_fifo.gl0.wr 
       (.AS(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .full(full),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gc0.count_reg[3] (rd_pntr_plus1),
        .out(p_2_out),
        .ram_empty_fb_i_reg(p_8_out),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gl0.wr_n_2 ),
        .wr_en(wr_en));
  bd_bf15_rx_0_memory_15 \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .Q(p_12_out),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__3 rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__parameterized1
   (DATA_COUNT,
    almost_full,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    prog_full,
    rd_en,
    wr_en,
    srst,
    clk,
    din);
  output [11:0]DATA_COUNT;
  output almost_full;
  output [67:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  output prog_full;
  input rd_en;
  input wr_en;
  input srst;
  input clk;
  input [67:0]din;

  wire [11:0]DATA_COUNT;
  wire almost_full;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  bd_bf15_rx_0_fifo_generator_ramfifo__parameterized1 \grf.rf 
       (.almost_full(almost_full),
        .clk(clk),
        .data_count(DATA_COUNT),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo__parameterized2 \grf.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__1 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__xdcDup__2
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__2 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_bf15_rx_0_fifo_generator_top__xdcDup__3
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_ramfifo__xdcDup__3 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "42" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "42" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [41:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [41:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized0 inst_fifo_gen
       (.AR(rd_rst_busy),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "12" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "68" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "68" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "1" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "4093" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "4092" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "13" *) 
(* C_RD_DEPTH = "4096" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "12" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "13" *) 
(* C_WR_DEPTH = "4096" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "12" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input [11:0]prog_empty_thresh;
  input [11:0]prog_empty_thresh_assert;
  input [11:0]prog_empty_thresh_negate;
  input [11:0]prog_full_thresh;
  input [11:0]prog_full_thresh_assert;
  input [11:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [67:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [11:0]data_count;
  output [12:0]rd_data_count;
  output [12:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[12] = \<const0> ;
  assign rd_data_count[11] = \<const0> ;
  assign rd_data_count[10] = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[12] = \<const0> ;
  assign wr_data_count[11] = \<const0> ;
  assign wr_data_count[10] = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized1 inst_fifo_gen
       (.almost_full(almost_full),
        .clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "24" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "24" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__parameterized5
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [23:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [23:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized2 inst_fifo_gen
       (.AR(rd_rst_busy),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__1 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__2 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynquplus" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x72" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x72" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_0" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0__xdcDup__3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__3 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized1
   (data_count,
    almost_full,
    dout,
    empty,
    full,
    wr_rst_reg_reg,
    prog_full,
    rd_en,
    wr_en,
    srst,
    clk,
    din);
  output [11:0]data_count;
  output almost_full;
  output [67:0]dout;
  output empty;
  output full;
  output wr_rst_reg_reg;
  output prog_full;
  input rd_en;
  input wr_en;
  input srst;
  input clk;
  input [67:0]din;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire wr_rst_reg_reg;

  bd_bf15_rx_0_fifo_generator_top__parameterized1 \gconvfifo.rf 
       (.DATA_COUNT(data_count),
        .almost_full(almost_full),
        .clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rd_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rd_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top__parameterized2 \gconvfifo.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top__xdcDup__1 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__2
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top__xdcDup__2 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_0_synth" *) 
module bd_bf15_rx_0_fifo_generator_v13_2_0_synth__xdcDup__3
   (empty,
    full,
    dout,
    wr_rst_busy,
    rd_en,
    wr_en,
    rst,
    clk,
    din);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rd_en;
  input wr_en;
  input rst;
  input clk;
  input [11:0]din;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_bf15_rx_0_fifo_generator_top__xdcDup__3 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory
   (dout,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_bf15_rx_0_dmem \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (dout_i),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory_15
   (dout,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_bf15_rx_0_dmem_16 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (dout_i),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory_24
   (dout,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_bf15_rx_0_dmem_25 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (dout_i),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory_33
   (dout,
    clk,
    E,
    din,
    \gc0.count_d1_reg[3] ,
    Q,
    \gpregsm1.curr_fwft_state_reg[0] ,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input [0:0]E;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]Q;
  input [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[0] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_bf15_rx_0_dmem_34 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (dout_i),
        .\gpregsm1.curr_fwft_state_reg[0] (\gpregsm1.curr_fwft_state_reg[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory__parameterized0
   (dout,
    wr_clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    E,
    rd_clk,
    AR);
  output [41:0]dout;
  input wr_clk;
  input EN;
  input [41:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [41:0]din;
  wire [41:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire rd_clk;
  wire wr_clk;

  bd_bf15_rx_0_dmem__parameterized0 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .EN(EN),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gic0.gc0.count_d2_reg[4] (\gic0.gc0.count_d2_reg[4] ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst_full_ff_i,
    Q,
    \gc0.count_d1_reg[11] ,
    din);
  output [67:0]dout;
  input clk;
  input mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst_full_ff_i;
  input [11:0]Q;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [67:0]din;

  wire [11:0]Q;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire mem_wen_reg;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_bf15_rx_0_blk_mem_gen_v8_4_0 \gbm.gbmg.gbmgb.ngecc.bmg 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_bf15_rx_0_memory__parameterized2
   (dout,
    wr_clk,
    EN,
    din,
    \gc0.count_d1_reg[4] ,
    count_d2,
    E,
    rd_clk,
    AR);
  output [23:0]dout;
  input wr_clk;
  input EN;
  input [23:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]count_d2;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [4:0]count_d2;
  wire [23:0]din;
  wire [23:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire rd_clk;
  wire wr_clk;

  bd_bf15_rx_0_dmem__parameterized1 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .EN(EN),
        .count_d2(count_d2),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_control" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_control
   (out,
    pkt_valid,
    \errframedata_d1_reg[0]_0 ,
    \errframedata_d1_reg[1]_0 ,
    \errframedata_d1_reg[2]_0 ,
    p_0_in,
    reg_status,
    crc_rst,
    lp_wc0,
    rd_en,
    src_ff_reg,
    \ERR_FRAME_DATA[1].errframedata_reg[1]_0 ,
    crc_start,
    crc_partial0,
    data_wip,
    \LINE_BUF_WR_64.str_fwd_reg ,
    E,
    fsm_wip_reg_reg,
    crc_en,
    phecc_start_d1_reg,
    m_axis_aclk,
    SR,
    empty,
    p_63_out,
    p_61_out,
    p_59_out,
    p_57_out,
    p_75_out,
    p_74_out,
    p_73_out,
    p_72_out,
    \diwc_corrected_reg[4] ,
    crc_done,
    phecc_done,
    dout,
    core_men_r2c,
    err_sot_sync,
    diwc_valid_reg,
    Q,
    wc_gt_pload,
    data_done,
    nxt_state0,
    pkt_rdvld_reg_0,
    nxt_state1114_out,
    nxt_state1,
    \phecc_status_reg[2] ,
    \FSM_sequential_cur_state_reg[2]_0 ,
    phecc_start,
    rstn_i,
    fsfe_errframesync,
    reg_ppi_status,
    crcdone_reg,
    crcdone_reg_0,
    data_wip_reg_reg,
    D,
    data_wip_reg,
    \LINE_BUF_WR_64.str_fwd_reg_0 ,
    fsm_wip_reg,
    diwc_valid_reg_0,
    \syncstages_ff_reg[1] ,
    diwc_valid_reg_1,
    diwc_valid,
    phecc_done_reg);
  output [1:0]out;
  output pkt_valid;
  output \errframedata_d1_reg[0]_0 ;
  output \errframedata_d1_reg[1]_0 ;
  output \errframedata_d1_reg[2]_0 ;
  output p_0_in;
  output [9:0]reg_status;
  output crc_rst;
  output lp_wc0;
  output rd_en;
  output [3:0]src_ff_reg;
  output [0:0]\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ;
  output crc_start;
  output crc_partial0;
  output data_wip;
  output \LINE_BUF_WR_64.str_fwd_reg ;
  output [0:0]E;
  output fsm_wip_reg_reg;
  output crc_en;
  output phecc_start_d1_reg;
  input m_axis_aclk;
  input [0:0]SR;
  input empty;
  input p_63_out;
  input p_61_out;
  input p_59_out;
  input p_57_out;
  input p_75_out;
  input p_74_out;
  input p_73_out;
  input p_72_out;
  input \diwc_corrected_reg[4] ;
  input crc_done;
  input phecc_done;
  input [0:0]dout;
  input core_men_r2c;
  input err_sot_sync;
  input diwc_valid_reg;
  input [3:0]Q;
  input wc_gt_pload;
  input data_done;
  input nxt_state0;
  input pkt_rdvld_reg_0;
  input nxt_state1114_out;
  input nxt_state1;
  input [0:0]\phecc_status_reg[2] ;
  input \FSM_sequential_cur_state_reg[2]_0 ;
  input phecc_start;
  input rstn_i;
  input [3:0]fsfe_errframesync;
  input [0:0]reg_ppi_status;
  input crcdone_reg;
  input crcdone_reg_0;
  input data_wip_reg_reg;
  input [0:0]D;
  input data_wip_reg;
  input \LINE_BUF_WR_64.str_fwd_reg_0 ;
  input fsm_wip_reg;
  input diwc_valid_reg_0;
  input [0:0]\syncstages_ff_reg[1] ;
  input [0:0]diwc_valid_reg_1;
  input diwc_valid;
  input [1:0]phecc_done_reg;

  wire [0:0]D;
  wire [0:0]E;
  wire [0:0]\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ;
  wire \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg_n_0_[0] ;
  wire \FE_DETECT[0].fe_detect_reg_n_0_[0] ;
  wire \FE_DETECT[1].fe_detect_reg_n_0_[1] ;
  wire \FE_DETECT[2].fe_detect_reg_n_0_[2] ;
  wire \FE_DETECT[3].fe_detect_reg_n_0_[3] ;
  wire \FSM_sequential_cur_state[0]_i_1_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_1_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_4_n_0 ;
  wire \FSM_sequential_cur_state[2]_i_2_n_0 ;
  wire \FSM_sequential_cur_state_reg[2]_0 ;
  wire \LINE_BUF_WR_64.str_fwd_reg ;
  wire \LINE_BUF_WR_64.str_fwd_reg_0 ;
  wire [3:0]Q;
  wire [0:0]SR;
  wire core_men_r2c;
  wire crc_done;
  wire crc_en;
  wire crc_partial0;
  wire crc_rst;
  wire crc_rst0;
  wire crc_start;
  wire crcdone_reg;
  wire crcdone_reg_0;
  wire [0:0]cur_lp_vc;
  (* RTL_KEEP = "yes" *) wire [0:0]cur_state;
  wire [2:2]cur_state_reg;
  wire data_done;
  wire data_wip;
  wire data_wip_reg;
  wire data_wip_reg_i_10_n_0;
  wire data_wip_reg_i_11_n_0;
  wire data_wip_reg_i_2_n_0;
  wire data_wip_reg_i_4_n_0;
  wire data_wip_reg_i_8_n_0;
  wire data_wip_reg_reg;
  wire \diwc_corrected_reg[4] ;
  wire diwc_valid;
  wire diwc_valid_reg;
  wire diwc_valid_reg_0;
  wire [0:0]diwc_valid_reg_1;
  wire [0:0]dout;
  wire empty;
  wire err_sot_sync;
  wire \errframedata_d1_reg[0]_0 ;
  wire \errframedata_d1_reg[1]_0 ;
  wire \errframedata_d1_reg[2]_0 ;
  wire [3:0]fsfe_errframesync;
  wire fsm_wip_reg;
  wire fsm_wip_reg_reg;
  wire [1:0]latest_vc;
  wire lp_wc0;
  wire m_axis_aclk;
  wire [1:0]nxt_state;
  wire nxt_state0;
  wire nxt_state1;
  wire nxt_state1114_out;
  (* RTL_KEEP = "yes" *) wire [1:0]out;
  wire p_0_in;
  wire p_0_in82_in;
  wire p_11_out;
  wire p_13_out;
  wire p_16_out;
  wire p_19_out;
  wire p_1_in12_in;
  wire p_1_in14_in;
  wire p_1_in17_in;
  wire p_21_in;
  wire p_21_out;
  wire p_2_out;
  wire p_34_in;
  wire p_57_out;
  wire p_59_out;
  wire p_5_out;
  wire p_61_out;
  wire p_63_out;
  wire p_72_out;
  wire p_73_out;
  wire p_74_out;
  wire p_75_out;
  wire p_8_in;
  wire p_8_out;
  wire phecc_done;
  wire [1:0]phecc_done_reg;
  wire phecc_start;
  wire phecc_start_d1_reg;
  wire [0:0]\phecc_status_reg[2] ;
  wire pkt_fifo_empty_reg;
  wire pkt_fifo_i_2_n_0;
  wire pkt_fifo_i_3_n_0;
  wire pkt_fifo_ren_reg;
  wire pkt_rdvld0;
  wire pkt_rdvld_reg_0;
  wire pkt_valid;
  wire [2:0]prv_state;
  wire \prv_state[0]_i_1_n_0 ;
  wire \prv_state[1]_i_1_n_0 ;
  wire rd_en;
  wire [2:1]reg_ecc_status_i;
  wire [0:0]reg_ppi_status;
  wire [9:0]reg_status;
  wire rstn_i;
  wire [3:0]src_ff_reg;
  wire [0:0]\syncstages_ff_reg[1] ;
  wire wc_gt_pload;

  LUT6 #(
    .INIT(64'h00000000FF202020)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_1 
       (.I0(crcdone_reg),
        .I1(cur_lp_vc),
        .I2(crcdone_reg_0),
        .I3(rstn_i),
        .I4(\errframedata_d1_reg[0]_0 ),
        .I5(\FE_DETECT[0].fe_detect_reg_n_0_[0] ),
        .O(p_11_out));
  FDRE \ERR_FRAME_DATA[0].errframedata_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_11_out),
        .Q(\errframedata_d1_reg[0]_0 ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \ERR_FRAME_DATA[1].errframedata[1]_i_1 
       (.I0(crcdone_reg),
        .I1(p_34_in),
        .I2(\FE_DETECT[1].fe_detect_reg_n_0_[1] ),
        .I3(\errframedata_d1_reg[1]_0 ),
        .I4(rstn_i),
        .O(p_8_out));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \ERR_FRAME_DATA[1].errframedata[1]_i_2 
       (.I0(\errframedata_d1_reg[1]_0 ),
        .I1(cur_lp_vc),
        .I2(\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ),
        .I3(crc_done),
        .O(p_34_in));
  FDRE \ERR_FRAME_DATA[1].errframedata_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_8_out),
        .Q(\errframedata_d1_reg[1]_0 ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \ERR_FRAME_DATA[2].errframedata[2]_i_1 
       (.I0(crcdone_reg),
        .I1(p_21_in),
        .I2(\FE_DETECT[2].fe_detect_reg_n_0_[2] ),
        .I3(\errframedata_d1_reg[2]_0 ),
        .I4(rstn_i),
        .O(p_5_out));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \ERR_FRAME_DATA[2].errframedata[2]_i_2 
       (.I0(cur_lp_vc),
        .I1(\errframedata_d1_reg[2]_0 ),
        .I2(crc_done),
        .I3(\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ),
        .O(p_21_in));
  FDRE \ERR_FRAME_DATA[2].errframedata_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_5_out),
        .Q(\errframedata_d1_reg[2]_0 ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0B080808)) 
    \ERR_FRAME_DATA[3].errframedata[3]_i_1 
       (.I0(crcdone_reg),
        .I1(p_8_in),
        .I2(\FE_DETECT[3].fe_detect_reg_n_0_[3] ),
        .I3(p_0_in),
        .I4(rstn_i),
        .O(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \ERR_FRAME_DATA[3].errframedata[3]_i_2 
       (.I0(p_0_in),
        .I1(cur_lp_vc),
        .I2(crc_done),
        .I3(\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ),
        .O(p_8_in));
  FDRE \ERR_FRAME_DATA[3].errframedata_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(p_0_in),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEEEEEEFE)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_1 
       (.I0(\ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg_n_0_[0] ),
        .I1(fsfe_errframesync[0]),
        .I2(reg_ppi_status),
        .I3(latest_vc[0]),
        .I4(latest_vc[1]),
        .O(p_21_out));
  FDRE \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_21_out),
        .Q(reg_status[1]),
        .R(SR));
  LUT5 #(
    .INIT(32'hEEEEFEEE)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_1 
       (.I0(p_1_in17_in),
        .I1(fsfe_errframesync[1]),
        .I2(reg_ppi_status),
        .I3(latest_vc[0]),
        .I4(latest_vc[1]),
        .O(p_19_out));
  FDRE \ERR_FRAME_SYNC_ALL[1].errframesync_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_19_out),
        .Q(reg_status[3]),
        .R(SR));
  LUT5 #(
    .INIT(32'hEEEEFEEE)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_1 
       (.I0(p_1_in14_in),
        .I1(fsfe_errframesync[2]),
        .I2(reg_ppi_status),
        .I3(latest_vc[1]),
        .I4(latest_vc[0]),
        .O(p_16_out));
  FDRE \ERR_FRAME_SYNC_ALL[2].errframesync_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_16_out),
        .Q(reg_status[5]),
        .R(SR));
  LUT5 #(
    .INIT(32'hFEEEEEEE)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_1 
       (.I0(p_1_in12_in),
        .I1(fsfe_errframesync[3]),
        .I2(reg_ppi_status),
        .I3(latest_vc[0]),
        .I4(latest_vc[1]),
        .O(p_13_out));
  FDRE \ERR_FRAME_SYNC_ALL[3].errframesync_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_13_out),
        .Q(reg_status[7]),
        .R(SR));
  FDRE \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_75_out),
        .Q(\ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg_n_0_[0] ),
        .R(SR));
  FDRE \ERR_FRAME_SYNC_ECCERR[1].ecc_errframesync_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_74_out),
        .Q(p_1_in17_in),
        .R(SR));
  FDRE \ERR_FRAME_SYNC_ECCERR[2].ecc_errframesync_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_73_out),
        .Q(p_1_in14_in),
        .R(SR));
  FDRE \ERR_FRAME_SYNC_ECCERR[3].ecc_errframesync_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_72_out),
        .Q(p_1_in12_in),
        .R(SR));
  FDRE \FE_DETECT[0].fe_detect_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_63_out),
        .Q(\FE_DETECT[0].fe_detect_reg_n_0_[0] ),
        .R(SR));
  FDRE \FE_DETECT[1].fe_detect_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_61_out),
        .Q(\FE_DETECT[1].fe_detect_reg_n_0_[1] ),
        .R(SR));
  FDRE \FE_DETECT[2].fe_detect_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_59_out),
        .Q(\FE_DETECT[2].fe_detect_reg_n_0_[2] ),
        .R(SR));
  FDRE \FE_DETECT[3].fe_detect_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_57_out),
        .Q(\FE_DETECT[3].fe_detect_reg_n_0_[3] ),
        .R(SR));
  LUT5 #(
    .INIT(32'h00045504)) 
    \FSM_sequential_cur_state[0]_i_1 
       (.I0(out[1]),
        .I1(nxt_state0),
        .I2(out[0]),
        .I3(cur_state),
        .I4(pkt_rdvld_reg_0),
        .O(\FSM_sequential_cur_state[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000000FD)) 
    \FSM_sequential_cur_state[1]_i_1 
       (.I0(nxt_state1114_out),
        .I1(out[0]),
        .I2(nxt_state1),
        .I3(out[1]),
        .I4(\FSM_sequential_cur_state[1]_i_4_n_0 ),
        .O(\FSM_sequential_cur_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAFFAA00CFFFCFFF)) 
    \FSM_sequential_cur_state[1]_i_4 
       (.I0(pkt_valid),
        .I1(\phecc_status_reg[2] ),
        .I2(phecc_done),
        .I3(cur_state),
        .I4(data_done),
        .I5(out[0]),
        .O(\FSM_sequential_cur_state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h3000B8003033B800)) 
    \FSM_sequential_cur_state[2]_i_2 
       (.I0(pkt_valid),
        .I1(cur_state),
        .I2(\FSM_sequential_cur_state_reg[2]_0 ),
        .I3(out[0]),
        .I4(out[1]),
        .I5(crc_done),
        .O(\FSM_sequential_cur_state[2]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000,iSTATE0:001,iSTATE1:011,iSTATE2:010,iSTATE3:100" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_cur_state[0]_i_1_n_0 ),
        .Q(cur_state),
        .R(\syncstages_ff_reg[1] ));
  (* FSM_ENCODED_STATES = "iSTATE:000,iSTATE0:001,iSTATE1:011,iSTATE2:010,iSTATE3:100" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_cur_state[1]_i_1_n_0 ),
        .Q(out[0]),
        .R(\syncstages_ff_reg[1] ));
  (* FSM_ENCODED_STATES = "iSTATE:000,iSTATE0:001,iSTATE1:011,iSTATE2:010,iSTATE3:100" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_cur_state[2]_i_2_n_0 ),
        .Q(out[1]),
        .R(\syncstages_ff_reg[1] ));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[0].hsc2r_bus_cdc_i_1 
       (.I0(src_ff_reg[0]),
        .I1(\errframedata_d1_reg[0]_0 ),
        .O(reg_status[0]));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[2].hsc2r_bus_cdc_i_1 
       (.I0(src_ff_reg[1]),
        .I1(\errframedata_d1_reg[1]_0 ),
        .O(reg_status[2]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[4].hsc2r_bus_cdc_i_1 
       (.I0(src_ff_reg[2]),
        .I1(\errframedata_d1_reg[2]_0 ),
        .O(reg_status[4]));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[6].hsc2r_bus_cdc_i_1 
       (.I0(src_ff_reg[3]),
        .I1(p_0_in),
        .O(reg_status[6]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.str_fwd_reg_0 ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \LINE_BUF_WR_64.str_fwd_i_4 
       (.I0(pkt_valid),
        .I1(data_wip_reg),
        .O(\LINE_BUF_WR_64.str_fwd_reg ));
  LUT6 #(
    .INIT(64'h888888888A888888)) 
    c_en_i_1
       (.I0(pkt_valid),
        .I1(data_wip_reg_reg),
        .I2(nxt_state[0]),
        .I3(p_0_in82_in),
        .I4(nxt_state[1]),
        .I5(data_wip_reg_i_2_n_0),
        .O(crc_en));
  LUT6 #(
    .INIT(64'hAAAABAAA00000000)) 
    crc_partial_i_1
       (.I0(data_wip_reg_reg),
        .I1(nxt_state[0]),
        .I2(p_0_in82_in),
        .I3(nxt_state[1]),
        .I4(data_wip_reg_i_2_n_0),
        .I5(D),
        .O(crc_partial0));
  LUT3 #(
    .INIT(8'h02)) 
    crc_partial_i_2
       (.I0(cur_state),
        .I1(out[1]),
        .I2(out[0]),
        .O(p_0_in82_in));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    crc_rst_i_1
       (.I0(prv_state[0]),
        .I1(prv_state[1]),
        .I2(prv_state[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(cur_state),
        .O(crc_rst0));
  FDRE crc_rst_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_rst0),
        .Q(crc_rst),
        .R(SR));
  LUT5 #(
    .INIT(32'h00080000)) 
    crc_start_d1_i_1
       (.I0(nxt_state[0]),
        .I1(nxt_state[1]),
        .I2(data_wip_reg_i_2_n_0),
        .I3(out[1]),
        .I4(out[0]),
        .O(crc_start));
  FDRE \cur_lp_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_reg_1),
        .D(Q[2]),
        .Q(cur_lp_vc),
        .R(SR));
  FDRE \cur_lp_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_reg_1),
        .D(Q[3]),
        .Q(\ERR_FRAME_DATA[1].errframedata_reg[1]_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFFFFF00004000)) 
    data_wip_reg_i_1
       (.I0(data_wip_reg_i_2_n_0),
        .I1(nxt_state[1]),
        .I2(cur_state),
        .I3(data_wip_reg_i_4_n_0),
        .I4(nxt_state[0]),
        .I5(data_wip_reg_reg),
        .O(data_wip));
  LUT6 #(
    .INIT(64'h88888888B8B8B888)) 
    data_wip_reg_i_10
       (.I0(pkt_valid),
        .I1(cur_state),
        .I2(data_done),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(wc_gt_pload),
        .O(data_wip_reg_i_10_n_0));
  LUT6 #(
    .INIT(64'h4444444474444444)) 
    data_wip_reg_i_11
       (.I0(phecc_done),
        .I1(cur_state),
        .I2(dout),
        .I3(pkt_valid),
        .I4(core_men_r2c),
        .I5(err_sot_sync),
        .O(data_wip_reg_i_11_n_0));
  LUT5 #(
    .INIT(32'h000008C8)) 
    data_wip_reg_i_2
       (.I0(diwc_valid_reg_0),
        .I1(cur_state),
        .I2(out[0]),
        .I3(pkt_valid),
        .I4(out[1]),
        .O(data_wip_reg_i_2_n_0));
  LUT6 #(
    .INIT(64'h7477744474447444)) 
    data_wip_reg_i_3
       (.I0(crc_done),
        .I1(out[1]),
        .I2(data_wip_reg_i_8_n_0),
        .I3(out[0]),
        .I4(cur_state),
        .I5(diwc_valid_reg),
        .O(nxt_state[1]));
  LUT2 #(
    .INIT(4'h1)) 
    data_wip_reg_i_4
       (.I0(out[0]),
        .I1(out[1]),
        .O(data_wip_reg_i_4_n_0));
  LUT5 #(
    .INIT(32'h74777444)) 
    data_wip_reg_i_5
       (.I0(crc_done),
        .I1(out[1]),
        .I2(data_wip_reg_i_10_n_0),
        .I3(out[0]),
        .I4(data_wip_reg_i_11_n_0),
        .O(nxt_state[0]));
  LUT6 #(
    .INIT(64'h8888BBB8BBBBBBBB)) 
    data_wip_reg_i_8
       (.I0(pkt_valid),
        .I1(cur_state),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(wc_gt_pload),
        .I5(data_done),
        .O(data_wip_reg_i_8_n_0));
  FDRE \errframedata_d1_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[0]_0 ),
        .Q(src_ff_reg[0]),
        .R(\syncstages_ff_reg[1] ));
  FDRE \errframedata_d1_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[1]_0 ),
        .Q(src_ff_reg[1]),
        .R(\syncstages_ff_reg[1] ));
  FDRE \errframedata_d1_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[2]_0 ),
        .Q(src_ff_reg[2]),
        .R(\syncstages_ff_reg[1] ));
  FDRE \errframedata_d1_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(src_ff_reg[3]),
        .R(\syncstages_ff_reg[1] ));
  LUT6 #(
    .INIT(64'h0040FFFF00400040)) 
    fsm_wip_reg_i_1
       (.I0(data_wip_reg_i_2_n_0),
        .I1(nxt_state[1]),
        .I2(p_0_in82_in),
        .I3(nxt_state[0]),
        .I4(data_done),
        .I5(fsm_wip_reg),
        .O(fsm_wip_reg_reg));
  FDRE \latest_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid),
        .D(Q[2]),
        .Q(latest_vc[0]),
        .R(\syncstages_ff_reg[1] ));
  FDRE \latest_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid),
        .D(Q[3]),
        .Q(latest_vc[1]),
        .R(\syncstages_ff_reg[1] ));
  FDRE lp_wc0_i_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\diwc_corrected_reg[4] ),
        .Q(lp_wc0),
        .R(SR));
  LUT3 #(
    .INIT(8'h01)) 
    phecc_start_d1_i_2
       (.I0(out[1]),
        .I1(out[0]),
        .I2(cur_state),
        .O(phecc_start_d1_reg));
  FDRE pkt_fifo_empty_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(empty),
        .Q(pkt_fifo_empty_reg),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    pkt_fifo_i_1
       (.I0(pkt_fifo_i_2_n_0),
        .I1(phecc_start),
        .I2(pkt_fifo_ren_reg),
        .I3(pkt_fifo_i_3_n_0),
        .O(rd_en));
  LUT6 #(
    .INIT(64'h03030303AB030300)) 
    pkt_fifo_i_2
       (.I0(pkt_valid),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(out[0]),
        .I4(cur_state),
        .I5(out[1]),
        .O(pkt_fifo_i_2_n_0));
  LUT6 #(
    .INIT(64'h00000000FF31FF30)) 
    pkt_fifo_i_3
       (.I0(cur_state),
        .I1(out[1]),
        .I2(out[0]),
        .I3(phecc_done),
        .I4(rstn_i),
        .I5(pkt_fifo_empty_reg),
        .O(pkt_fifo_i_3_n_0));
  FDRE pkt_fifo_ren_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_rdvld0),
        .Q(pkt_fifo_ren_reg),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'h00001110)) 
    pkt_rdvld_i_1
       (.I0(pkt_fifo_i_2_n_0),
        .I1(phecc_start),
        .I2(pkt_fifo_ren_reg),
        .I3(pkt_fifo_i_3_n_0),
        .I4(empty),
        .O(pkt_rdvld0));
  FDRE pkt_rdvld_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_rdvld0),
        .Q(pkt_valid),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h06)) 
    \prv_state[0]_i_1 
       (.I0(out[1]),
        .I1(cur_state),
        .I2(out[0]),
        .O(\prv_state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \prv_state[1]_i_1 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(cur_state),
        .O(\prv_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \prv_state[2]_i_1 
       (.I0(out[1]),
        .I1(cur_state),
        .I2(out[0]),
        .O(cur_state_reg));
  FDRE \prv_state_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\prv_state[0]_i_1_n_0 ),
        .Q(prv_state[0]),
        .R(SR));
  FDRE \prv_state_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\prv_state[1]_i_1_n_0 ),
        .Q(prv_state[1]),
        .R(SR));
  FDRE \prv_state_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(cur_state_reg),
        .Q(prv_state[2]),
        .R(SR));
  FDRE \reg_ecc_status_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(phecc_done_reg[0]),
        .Q(reg_ecc_status_i[1]),
        .R(SR));
  FDRE \reg_ecc_status_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(phecc_done_reg[1]),
        .Q(reg_ecc_status_i[2]),
        .R(SR));
  FDRE \reg_ecc_status_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(reg_ecc_status_i[1]),
        .Q(reg_status[8]),
        .R(SR));
  FDRE \reg_ecc_status_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(reg_ecc_status_i[2]),
        .Q(reg_status[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_crc" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_crc
   (crc_done,
    crc_start_d1,
    \exp_crc_i_reg[15]_0 ,
    reg_status,
    \ERR_FRAME_DATA[0].errframedata_reg[0] ,
    \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ,
    Q,
    SR,
    m_axis_aclk,
    crc_en,
    crc_start,
    m_axis_aresetn,
    dout,
    crc_blk_sel,
    rstn_i,
    \cur_lp_vc_reg[1] ,
    E,
    D,
    crc_start_d1_reg_0,
    \crc_p_value_reg[15] ,
    core_men_r2c,
    crc_rst,
    lp_wc0);
  output crc_done;
  output crc_start_d1;
  output [15:0]\exp_crc_i_reg[15]_0 ;
  output [0:0]reg_status;
  output \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  output \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ;
  output [1:0]Q;
  input [0:0]SR;
  input m_axis_aclk;
  input crc_en;
  input crc_start;
  input m_axis_aresetn;
  input [31:0]dout;
  input [3:0]crc_blk_sel;
  input rstn_i;
  input [0:0]\cur_lp_vc_reg[1] ;
  input [0:0]E;
  input [1:0]D;
  input [1:0]crc_start_d1_reg_0;
  input [15:0]\crc_p_value_reg[15] ;
  input core_men_r2c;
  input crc_rst;
  input lp_wc0;

  wire \CSI_OPT1_OFF.crc_32b_i_n_4 ;
  wire [1:0]D;
  wire [0:0]E;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire aresetn_d1;
  wire aresetn_d2;
  wire [31:16]c_data;
  wire c_en;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire crc_done;
  wire crc_en;
  wire [15:0]\crc_p_value_reg[15] ;
  wire crc_rst;
  wire crc_start;
  wire crc_start_d1;
  wire [1:0]crc_start_d1_reg_0;
  wire [0:0]\cur_lp_vc_reg[1] ;
  wire [31:0]dout;
  wire [15:0]exp_crc_i;
  wire [15:0]\exp_crc_i_reg[15]_0 ;
  wire lp_wc0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [0:0]reg_status;
  wire rstart;
  wire rstn_i;

  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_crc0 \CSI_OPT1_OFF.crc_32b_i 
       (.\ERR_FRAME_DATA[0].errframedata_reg[0] (\ERR_FRAME_DATA[0].errframedata_reg[0] ),
        .\ERR_FRAME_DATA[0].errframedata_reg[0]_0 (\ERR_FRAME_DATA[0].errframedata_reg[0]_0 ),
        .Q(c_data),
        .SR(SR),
        .aresetn_d1(aresetn_d1),
        .aresetn_d2(aresetn_d2),
        .\c_data_reg[0] (\exp_crc_i_reg[15]_0 [0]),
        .\c_data_reg[15] ({\exp_crc_i_reg[15]_0 [15:6],\exp_crc_i_reg[15]_0 [4:2]}),
        .\c_data_reg[1] (\exp_crc_i_reg[15]_0 [1]),
        .\c_data_reg[5] (\exp_crc_i_reg[15]_0 [5]),
        .c_en(c_en),
        .core_men_r2c(core_men_r2c),
        .crc_blk_sel(crc_blk_sel),
        .crc_rst(crc_rst),
        .crc_start_d1(crc_start_d1),
        .\cur_lp_vc_reg[1] (\cur_lp_vc_reg[1] ),
        .dout(dout[15:0]),
        .\exp_crc_i_reg[15] (exp_crc_i),
        .lp_wc0(lp_wc0),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .reg_status(reg_status),
        .rstart(rstart),
        .rstart_reg(crc_done),
        .rstart_reg_0(\CSI_OPT1_OFF.crc_32b_i_n_4 ),
        .rstn_i(rstn_i));
  FDRE aresetn_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_aresetn),
        .Q(aresetn_d1),
        .R(1'b0));
  FDRE aresetn_d2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(aresetn_d1),
        .Q(aresetn_d2),
        .R(SR));
  FDRE \c_data_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[0]),
        .Q(\exp_crc_i_reg[15]_0 [0]),
        .R(SR));
  FDRE \c_data_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[10]),
        .Q(\exp_crc_i_reg[15]_0 [10]),
        .R(SR));
  FDRE \c_data_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[11]),
        .Q(\exp_crc_i_reg[15]_0 [11]),
        .R(SR));
  FDRE \c_data_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[12]),
        .Q(\exp_crc_i_reg[15]_0 [12]),
        .R(SR));
  FDRE \c_data_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[13]),
        .Q(\exp_crc_i_reg[15]_0 [13]),
        .R(SR));
  FDRE \c_data_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[14]),
        .Q(\exp_crc_i_reg[15]_0 [14]),
        .R(SR));
  FDRE \c_data_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[15]),
        .Q(\exp_crc_i_reg[15]_0 [15]),
        .R(SR));
  FDRE \c_data_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[16]),
        .Q(c_data[16]),
        .R(SR));
  FDRE \c_data_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[17]),
        .Q(c_data[17]),
        .R(SR));
  FDRE \c_data_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[18]),
        .Q(c_data[18]),
        .R(SR));
  FDRE \c_data_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[19]),
        .Q(c_data[19]),
        .R(SR));
  FDRE \c_data_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[1]),
        .Q(\exp_crc_i_reg[15]_0 [1]),
        .R(SR));
  FDRE \c_data_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[20]),
        .Q(c_data[20]),
        .R(SR));
  FDRE \c_data_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[21]),
        .Q(c_data[21]),
        .R(SR));
  FDRE \c_data_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[22]),
        .Q(c_data[22]),
        .R(SR));
  FDRE \c_data_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[23]),
        .Q(c_data[23]),
        .R(SR));
  FDRE \c_data_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[24]),
        .Q(c_data[24]),
        .R(SR));
  FDRE \c_data_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[25]),
        .Q(c_data[25]),
        .R(SR));
  FDRE \c_data_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[26]),
        .Q(c_data[26]),
        .R(SR));
  FDRE \c_data_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[27]),
        .Q(c_data[27]),
        .R(SR));
  FDRE \c_data_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[28]),
        .Q(c_data[28]),
        .R(SR));
  FDRE \c_data_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[29]),
        .Q(c_data[29]),
        .R(SR));
  FDRE \c_data_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[2]),
        .Q(\exp_crc_i_reg[15]_0 [2]),
        .R(SR));
  FDRE \c_data_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[30]),
        .Q(c_data[30]),
        .R(SR));
  FDRE \c_data_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[31]),
        .Q(c_data[31]),
        .R(SR));
  FDRE \c_data_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[3]),
        .Q(\exp_crc_i_reg[15]_0 [3]),
        .R(SR));
  FDRE \c_data_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[4]),
        .Q(\exp_crc_i_reg[15]_0 [4]),
        .R(SR));
  FDRE \c_data_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[5]),
        .Q(\exp_crc_i_reg[15]_0 [5]),
        .R(SR));
  FDRE \c_data_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[6]),
        .Q(\exp_crc_i_reg[15]_0 [6]),
        .R(SR));
  FDRE \c_data_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[7]),
        .Q(\exp_crc_i_reg[15]_0 [7]),
        .R(SR));
  FDRE \c_data_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[8]),
        .Q(\exp_crc_i_reg[15]_0 [8]),
        .R(SR));
  FDRE \c_data_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[9]),
        .Q(\exp_crc_i_reg[15]_0 [9]),
        .R(SR));
  FDRE c_en_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_en),
        .Q(c_en),
        .R(SR));
  FDRE crc_start_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_start),
        .Q(crc_start_d1),
        .R(SR));
  FDSE \data_p_strb_reg[0] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(D[0]),
        .Q(Q[0]),
        .S(SR));
  FDSE \data_p_strb_reg[1] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(D[1]),
        .Q(Q[1]),
        .S(SR));
  FDRE \exp_crc_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [0]),
        .Q(exp_crc_i[0]),
        .R(SR));
  FDRE \exp_crc_i_reg[10] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [10]),
        .Q(exp_crc_i[10]),
        .R(SR));
  FDRE \exp_crc_i_reg[11] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [11]),
        .Q(exp_crc_i[11]),
        .R(SR));
  FDRE \exp_crc_i_reg[12] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [12]),
        .Q(exp_crc_i[12]),
        .R(SR));
  FDRE \exp_crc_i_reg[13] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [13]),
        .Q(exp_crc_i[13]),
        .R(SR));
  FDRE \exp_crc_i_reg[14] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [14]),
        .Q(exp_crc_i[14]),
        .R(SR));
  FDRE \exp_crc_i_reg[15] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [15]),
        .Q(exp_crc_i[15]),
        .R(SR));
  FDRE \exp_crc_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [1]),
        .Q(exp_crc_i[1]),
        .R(SR));
  FDRE \exp_crc_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [2]),
        .Q(exp_crc_i[2]),
        .R(SR));
  FDRE \exp_crc_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [3]),
        .Q(exp_crc_i[3]),
        .R(SR));
  FDRE \exp_crc_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [4]),
        .Q(exp_crc_i[4]),
        .R(SR));
  FDRE \exp_crc_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [5]),
        .Q(exp_crc_i[5]),
        .R(SR));
  FDRE \exp_crc_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [6]),
        .Q(exp_crc_i[6]),
        .R(SR));
  FDRE \exp_crc_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[0]),
        .D(\crc_p_value_reg[15] [7]),
        .Q(exp_crc_i[7]),
        .R(SR));
  FDRE \exp_crc_i_reg[8] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [8]),
        .Q(exp_crc_i[8]),
        .R(SR));
  FDRE \exp_crc_i_reg[9] 
       (.C(m_axis_aclk),
        .CE(crc_start_d1_reg_0[1]),
        .D(\crc_p_value_reg[15] [9]),
        .Q(exp_crc_i[9]),
        .R(SR));
  FDRE rstart_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\CSI_OPT1_OFF.crc_32b_i_n_4 ),
        .Q(rstart),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_crc0" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_crc0
   (rstart_reg,
    reg_status,
    \ERR_FRAME_DATA[0].errframedata_reg[0] ,
    \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ,
    rstart_reg_0,
    m_axis_aclk,
    crc_blk_sel,
    rstn_i,
    \cur_lp_vc_reg[1] ,
    rstart,
    c_en,
    \c_data_reg[5] ,
    \c_data_reg[1] ,
    \c_data_reg[0] ,
    Q,
    \c_data_reg[15] ,
    crc_start_d1,
    m_axis_aresetn,
    SR,
    core_men_r2c,
    aresetn_d1,
    aresetn_d2,
    crc_rst,
    lp_wc0,
    \exp_crc_i_reg[15] ,
    dout);
  output rstart_reg;
  output [0:0]reg_status;
  output \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  output \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ;
  output rstart_reg_0;
  input m_axis_aclk;
  input [3:0]crc_blk_sel;
  input rstn_i;
  input [0:0]\cur_lp_vc_reg[1] ;
  input rstart;
  input c_en;
  input \c_data_reg[5] ;
  input \c_data_reg[1] ;
  input \c_data_reg[0] ;
  input [15:0]Q;
  input [12:0]\c_data_reg[15] ;
  input crc_start_d1;
  input m_axis_aresetn;
  input [0:0]SR;
  input core_men_r2c;
  input aresetn_d1;
  input aresetn_d2;
  input crc_rst;
  input lp_wc0;
  input [15:0]\exp_crc_i_reg[15] ;
  input [15:0]dout;

  wire \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_10_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_11_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_12_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_13_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_14_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_15_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_16_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_17_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_2_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_3_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_4_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_5_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_6_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_7_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_8_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_bus_cdc_i_9_n_0 ;
  wire [15:0]Q;
  wire [0:0]SR;
  wire aresetn_d1;
  wire aresetn_d2;
  wire \c_data_reg[0] ;
  wire [12:0]\c_data_reg[15] ;
  wire \c_data_reg[1] ;
  wire \c_data_reg[5] ;
  wire c_en;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire \crc_reg_out[0]_i_1_n_0 ;
  wire \crc_reg_out[0]_i_2_n_0 ;
  wire \crc_reg_out[0]_i_3_n_0 ;
  wire \crc_reg_out[10]_i_1_n_0 ;
  wire \crc_reg_out[10]_i_2_n_0 ;
  wire \crc_reg_out[10]_i_3_n_0 ;
  wire \crc_reg_out[10]_i_4_n_0 ;
  wire \crc_reg_out[11]_i_1_n_0 ;
  wire \crc_reg_out[11]_i_2_n_0 ;
  wire \crc_reg_out[11]_i_3_n_0 ;
  wire \crc_reg_out[12]_i_1_n_0 ;
  wire \crc_reg_out[12]_i_2_n_0 ;
  wire \crc_reg_out[12]_i_3_n_0 ;
  wire \crc_reg_out[12]_i_4_n_0 ;
  wire \crc_reg_out[12]_i_5_n_0 ;
  wire \crc_reg_out[12]_i_6_n_0 ;
  wire \crc_reg_out[13]_i_1_n_0 ;
  wire \crc_reg_out[13]_i_2_n_0 ;
  wire \crc_reg_out[13]_i_5_n_0 ;
  wire \crc_reg_out[14]_i_1_n_0 ;
  wire \crc_reg_out[14]_i_2_n_0 ;
  wire \crc_reg_out[14]_i_5_n_0 ;
  wire \crc_reg_out[15]_i_1_n_0 ;
  wire \crc_reg_out[15]_i_2_n_0 ;
  wire \crc_reg_out[15]_i_3_n_0 ;
  wire \crc_reg_out[15]_i_4_n_0 ;
  wire \crc_reg_out[1]_i_1_n_0 ;
  wire \crc_reg_out[1]_i_2_n_0 ;
  wire \crc_reg_out[1]_i_3_n_0 ;
  wire \crc_reg_out[2]_i_1_n_0 ;
  wire \crc_reg_out[2]_i_2_n_0 ;
  wire \crc_reg_out[2]_i_3_n_0 ;
  wire \crc_reg_out[3]_i_1_n_0 ;
  wire \crc_reg_out[3]_i_2_n_0 ;
  wire \crc_reg_out[4]_i_1_n_0 ;
  wire \crc_reg_out[4]_i_2_n_0 ;
  wire \crc_reg_out[4]_i_3_n_0 ;
  wire \crc_reg_out[5]_i_1_n_0 ;
  wire \crc_reg_out[5]_i_2_n_0 ;
  wire \crc_reg_out[5]_i_3_n_0 ;
  wire \crc_reg_out[6]_i_1_n_0 ;
  wire \crc_reg_out[6]_i_2_n_0 ;
  wire \crc_reg_out[6]_i_3_n_0 ;
  wire \crc_reg_out[7]_i_1_n_0 ;
  wire \crc_reg_out[7]_i_2_n_0 ;
  wire \crc_reg_out[7]_i_3_n_0 ;
  wire \crc_reg_out[7]_i_6_n_0 ;
  wire \crc_reg_out[8]_i_1_n_0 ;
  wire \crc_reg_out[8]_i_2_n_0 ;
  wire \crc_reg_out[8]_i_3_n_0 ;
  wire \crc_reg_out[9]_i_1_n_0 ;
  wire \crc_reg_out[9]_i_2_n_0 ;
  wire \crc_reg_out[9]_i_3_n_0 ;
  wire \crc_reg_out[9]_i_4_n_0 ;
  wire crc_reg_out_n_0;
  wire \crc_reg_out_reg_n_0_[0] ;
  wire \crc_reg_out_reg_n_0_[10] ;
  wire \crc_reg_out_reg_n_0_[11] ;
  wire \crc_reg_out_reg_n_0_[12] ;
  wire \crc_reg_out_reg_n_0_[13] ;
  wire \crc_reg_out_reg_n_0_[14] ;
  wire \crc_reg_out_reg_n_0_[15] ;
  wire \crc_reg_out_reg_n_0_[1] ;
  wire \crc_reg_out_reg_n_0_[2] ;
  wire \crc_reg_out_reg_n_0_[3] ;
  wire \crc_reg_out_reg_n_0_[4] ;
  wire \crc_reg_out_reg_n_0_[5] ;
  wire \crc_reg_out_reg_n_0_[6] ;
  wire \crc_reg_out_reg_n_0_[7] ;
  wire \crc_reg_out_reg_n_0_[8] ;
  wire \crc_reg_out_reg_n_0_[9] ;
  wire crc_rst;
  wire crc_start_d1;
  wire crcdone_i_1_n_0;
  wire [0:0]\cur_lp_vc_reg[1] ;
  wire [15:0]dout;
  wire [15:0]\exp_crc_i_reg[15] ;
  wire lp_wc0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [3:3]nxt_crc_24bit;
  wire [3:3]nxt_crc_8bit;
  wire nxt_crc_8bit0114_out__0;
  wire [15:0]p_0_in;
  wire p_0_in160_in;
  wire p_0_in171_in;
  wire p_0_in75_in;
  wire p_11_in95_in;
  wire p_121_in;
  wire p_13_in97_in;
  wire p_153_in;
  wire p_15_in;
  wire p_164_in;
  wire p_165_in;
  wire p_168_in;
  wire p_16_in100_in;
  wire p_172_in;
  wire p_174_in;
  wire p_17_in103_in;
  wire p_184_in;
  wire p_185_in;
  wire p_186_in;
  wire p_190_in;
  wire [15:0]p_1_in;
  wire p_1_in76_in;
  wire p_203_in;
  wire p_204_in;
  wire p_205_in;
  wire p_209_in;
  wire p_20_in107_in;
  wire p_216_in;
  wire p_218_in;
  wire p_219_in;
  wire p_222_in;
  wire p_228_in;
  wire p_229_in;
  wire p_230_in;
  wire p_231_in;
  wire p_232_in;
  wire p_241_in;
  wire p_261_in;
  wire p_262_in;
  wire p_267_in;
  wire p_268_in;
  wire p_26_in82_in;
  wire p_27_in;
  wire p_287_in;
  wire p_289_in;
  wire p_291_in;
  wire p_298_in;
  wire p_299_in;
  wire p_300_in;
  wire p_301_in;
  wire p_305_in;
  wire p_306_in;
  wire p_307_in;
  wire p_308_in;
  wire p_309_in;
  wire p_310_in;
  wire p_314_in;
  wire p_317_in;
  wire p_318_in;
  wire p_320_in;
  wire p_321_in;
  wire p_322_in;
  wire p_323_in;
  wire p_325_in;
  wire p_327_in;
  wire p_328_in;
  wire p_330_in;
  wire p_332_in;
  wire p_333_in;
  wire p_335_in;
  wire p_336_in;
  wire p_337_in;
  wire p_338_in;
  wire p_56_in;
  wire p_5_in88_in;
  wire p_60_in;
  wire p_64_in;
  wire p_66_in;
  wire [15:0]prv_crc_cr0;
  wire \prv_crc_cr0[0]_i_2_n_0 ;
  wire \prv_crc_cr0[10]_i_2_n_0 ;
  wire \prv_crc_cr0[10]_i_3_n_0 ;
  wire \prv_crc_cr0[10]_i_5_n_0 ;
  wire \prv_crc_cr0[11]_i_2_n_0 ;
  wire \prv_crc_cr0[11]_i_4_n_0 ;
  wire \prv_crc_cr0[12]_i_11_n_0 ;
  wire \prv_crc_cr0[12]_i_15_n_0 ;
  wire \prv_crc_cr0[12]_i_16_n_0 ;
  wire \prv_crc_cr0[12]_i_17_n_0 ;
  wire \prv_crc_cr0[12]_i_2_n_0 ;
  wire \prv_crc_cr0[13]_i_12_n_0 ;
  wire \prv_crc_cr0[13]_i_13_n_0 ;
  wire \prv_crc_cr0[13]_i_14_n_0 ;
  wire \prv_crc_cr0[13]_i_2_n_0 ;
  wire \prv_crc_cr0[13]_i_7_n_0 ;
  wire \prv_crc_cr0[14]_i_10_n_0 ;
  wire \prv_crc_cr0[14]_i_13_n_0 ;
  wire \prv_crc_cr0[14]_i_14_n_0 ;
  wire \prv_crc_cr0[14]_i_16_n_0 ;
  wire \prv_crc_cr0[14]_i_19_n_0 ;
  wire \prv_crc_cr0[14]_i_20_n_0 ;
  wire \prv_crc_cr0[14]_i_21_n_0 ;
  wire \prv_crc_cr0[14]_i_2_n_0 ;
  wire \prv_crc_cr0[14]_i_3_n_0 ;
  wire \prv_crc_cr0[15]_i_1_n_0 ;
  wire \prv_crc_cr0[15]_i_3_n_0 ;
  wire \prv_crc_cr0[1]_i_2_n_0 ;
  wire \prv_crc_cr0[2]_i_2_n_0 ;
  wire \prv_crc_cr0[2]_i_4_n_0 ;
  wire \prv_crc_cr0[2]_i_5_n_0 ;
  wire \prv_crc_cr0[2]_i_6_n_0 ;
  wire \prv_crc_cr0[3]_i_2_n_0 ;
  wire \prv_crc_cr0[3]_i_3_n_0 ;
  wire \prv_crc_cr0[4]_i_2_n_0 ;
  wire \prv_crc_cr0[5]_i_2_n_0 ;
  wire \prv_crc_cr0[6]_i_2_n_0 ;
  wire \prv_crc_cr0[6]_i_3_n_0 ;
  wire \prv_crc_cr0[7]_i_2_n_0 ;
  wire \prv_crc_cr0[7]_i_3_n_0 ;
  wire \prv_crc_cr0[8]_i_10_n_0 ;
  wire \prv_crc_cr0[8]_i_2_n_0 ;
  wire \prv_crc_cr0[8]_i_3_n_0 ;
  wire \prv_crc_cr0[8]_i_4_n_0 ;
  wire \prv_crc_cr0[8]_i_8_n_0 ;
  wire \prv_crc_cr0[8]_i_9_n_0 ;
  wire \prv_crc_cr0[9]_i_2_n_0 ;
  wire \prv_crc_cr0[9]_i_6_n_0 ;
  wire \prv_crc_cr0[9]_i_7_n_0 ;
  wire [15:0]prv_crc_cr1;
  wire [0:0]reg_status;
  wire rstart;
  wire rstart_reg;
  wire rstart_reg_0;
  wire rstn_i;

  LUT6 #(
    .INIT(64'hFFFE000000000000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_2 
       (.I0(\HSC2R_CDC[9].hsc2r_bus_cdc_i_2_n_0 ),
        .I1(\HSC2R_CDC[9].hsc2r_bus_cdc_i_3_n_0 ),
        .I2(\HSC2R_CDC[9].hsc2r_bus_cdc_i_4_n_0 ),
        .I3(\HSC2R_CDC[9].hsc2r_bus_cdc_i_5_n_0 ),
        .I4(rstart_reg),
        .I5(rstn_i),
        .O(\ERR_FRAME_DATA[0].errframedata_reg[0] ));
  LUT2 #(
    .INIT(4'h2)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_3 
       (.I0(rstart_reg),
        .I1(\cur_lp_vc_reg[1] ),
        .O(\ERR_FRAME_DATA[0].errframedata_reg[0]_0 ));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_1 
       (.I0(\HSC2R_CDC[9].hsc2r_bus_cdc_i_2_n_0 ),
        .I1(\HSC2R_CDC[9].hsc2r_bus_cdc_i_3_n_0 ),
        .I2(\HSC2R_CDC[9].hsc2r_bus_cdc_i_4_n_0 ),
        .I3(\HSC2R_CDC[9].hsc2r_bus_cdc_i_5_n_0 ),
        .I4(rstart_reg),
        .O(reg_status));
  LUT5 #(
    .INIT(32'hFFFF665A)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_10 
       (.I0(\crc_reg_out_reg_n_0_[7] ),
        .I1(dout[7]),
        .I2(\exp_crc_i_reg[15] [7]),
        .I3(lp_wc0),
        .I4(\HSC2R_CDC[9].hsc2r_bus_cdc_i_15_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF665A)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_11 
       (.I0(\crc_reg_out_reg_n_0_[9] ),
        .I1(dout[9]),
        .I2(\exp_crc_i_reg[15] [9]),
        .I3(lp_wc0),
        .I4(\HSC2R_CDC[9].hsc2r_bus_cdc_i_16_n_0 ),
        .I5(\HSC2R_CDC[9].hsc2r_bus_cdc_i_17_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_12 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [2]),
        .I2(dout[2]),
        .I3(\crc_reg_out_reg_n_0_[2] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_13 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [5]),
        .I2(dout[5]),
        .I3(\crc_reg_out_reg_n_0_[5] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_14 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [4]),
        .I2(dout[4]),
        .I3(\crc_reg_out_reg_n_0_[4] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_15 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [8]),
        .I2(dout[8]),
        .I3(\crc_reg_out_reg_n_0_[8] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_16 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [11]),
        .I2(dout[11]),
        .I3(\crc_reg_out_reg_n_0_[11] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_17 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [10]),
        .I2(dout[10]),
        .I3(\crc_reg_out_reg_n_0_[10] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_17_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF665A)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_2 
       (.I0(\crc_reg_out_reg_n_0_[12] ),
        .I1(dout[12]),
        .I2(\exp_crc_i_reg[15] [12]),
        .I3(lp_wc0),
        .I4(\HSC2R_CDC[9].hsc2r_bus_cdc_i_6_n_0 ),
        .I5(\HSC2R_CDC[9].hsc2r_bus_cdc_i_7_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFABEFFEBA)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_3 
       (.I0(\HSC2R_CDC[9].hsc2r_bus_cdc_i_8_n_0 ),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [0]),
        .I3(dout[0]),
        .I4(\crc_reg_out_reg_n_0_[0] ),
        .I5(\HSC2R_CDC[9].hsc2r_bus_cdc_i_9_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFABEFFEBA)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_4 
       (.I0(\HSC2R_CDC[9].hsc2r_bus_cdc_i_10_n_0 ),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [6]),
        .I3(dout[6]),
        .I4(\crc_reg_out_reg_n_0_[6] ),
        .I5(\HSC2R_CDC[9].hsc2r_bus_cdc_i_11_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_5 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [15]),
        .I2(dout[15]),
        .I3(\crc_reg_out_reg_n_0_[15] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_6 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [14]),
        .I2(dout[14]),
        .I3(\crc_reg_out_reg_n_0_[14] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h1BE4)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_7 
       (.I0(lp_wc0),
        .I1(\exp_crc_i_reg[15] [13]),
        .I2(dout[13]),
        .I3(\crc_reg_out_reg_n_0_[13] ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF665A)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_8 
       (.I0(\crc_reg_out_reg_n_0_[1] ),
        .I1(dout[1]),
        .I2(\exp_crc_i_reg[15] [1]),
        .I3(lp_wc0),
        .I4(\HSC2R_CDC[9].hsc2r_bus_cdc_i_12_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF665A)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_9 
       (.I0(\crc_reg_out_reg_n_0_[3] ),
        .I1(dout[3]),
        .I2(\exp_crc_i_reg[15] [3]),
        .I3(lp_wc0),
        .I4(\HSC2R_CDC[9].hsc2r_bus_cdc_i_13_n_0 ),
        .I5(\HSC2R_CDC[9].hsc2r_bus_cdc_i_14_n_0 ),
        .O(\HSC2R_CDC[9].hsc2r_bus_cdc_i_9_n_0 ));
  LUT4 #(
    .INIT(16'h0116)) 
    crc_reg_out
       (.I0(crc_blk_sel[0]),
        .I1(crc_blk_sel[1]),
        .I2(crc_blk_sel[2]),
        .I3(crc_blk_sel[3]),
        .O(crc_reg_out_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[0]_i_1 
       (.I0(\crc_reg_out[0]_i_2_n_0 ),
        .I1(\crc_reg_out[0]_i_3_n_0 ),
        .I2(\prv_crc_cr0[0]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBEEBC33CAAAA0000)) 
    \crc_reg_out[0]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_56_in),
        .I2(p_291_in),
        .I3(p_305_in),
        .I4(p_314_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[0]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\crc_reg_out[7]_i_6_n_0 ),
        .I2(p_153_in),
        .I3(\c_data_reg[0] ),
        .I4(\c_data_reg[15] [2]),
        .O(\crc_reg_out[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[0]_i_4 
       (.I0(prv_crc_cr1[8]),
        .I1(prv_crc_cr0[8]),
        .I2(c_en),
        .I3(prv_crc_cr1[4]),
        .I4(prv_crc_cr0[4]),
        .O(p_153_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[10]_i_1 
       (.I0(\crc_reg_out[10]_i_2_n_0 ),
        .I1(\crc_reg_out[10]_i_3_n_0 ),
        .I2(\prv_crc_cr0[10]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[10]_i_2 
       (.I0(p_309_in),
        .I1(crc_blk_sel[1]),
        .I2(p_332_in),
        .I3(p_306_in),
        .I4(\crc_reg_out[10]_i_4_n_0 ),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[10]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_204_in),
        .I2(\c_data_reg[15] [1]),
        .I3(\c_data_reg[15] [0]),
        .I4(\c_data_reg[15] [4]),
        .I5(p_1_in76_in),
        .O(\crc_reg_out[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[10]_i_4 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[7]),
        .O(\crc_reg_out[10]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[10]_i_5 
       (.I0(prv_crc_cr1[2]),
        .I1(prv_crc_cr0[2]),
        .I2(c_en),
        .I3(prv_crc_cr1[3]),
        .I4(prv_crc_cr0[3]),
        .O(p_204_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[11]_i_1 
       (.I0(\crc_reg_out[11]_i_2_n_0 ),
        .I1(\prv_crc_cr0[11]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAEEAAEEAAEEA)) 
    \crc_reg_out[11]_i_2 
       (.I0(\crc_reg_out[11]_i_3_n_0 ),
        .I1(crc_blk_sel[2]),
        .I2(Q[3]),
        .I3(p_317_in),
        .I4(crc_blk_sel[1]),
        .I5(p_307_in),
        .O(\crc_reg_out[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'h28282288)) 
    \crc_reg_out[11]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [1]),
        .I2(prv_crc_cr0[3]),
        .I3(prv_crc_cr1[3]),
        .I4(c_en),
        .O(\crc_reg_out[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[11]_i_4 
       (.I0(p_222_in),
        .I1(\crc_reg_out[7]_i_6_n_0 ),
        .I2(p_0_in75_in),
        .I3(p_230_in),
        .I4(\c_data_reg[15] [4]),
        .I5(\c_data_reg[15] [8]),
        .O(p_307_in));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[11]_i_5 
       (.I0(\c_data_reg[0] ),
        .I1(\c_data_reg[15] [1]),
        .O(p_222_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFBEAA0000)) 
    \crc_reg_out[12]_i_1 
       (.I0(\crc_reg_out[12]_i_2_n_0 ),
        .I1(\crc_reg_out[12]_i_3_n_0 ),
        .I2(\crc_reg_out[12]_i_4_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAEEAAEEAAEEA)) 
    \crc_reg_out[12]_i_2 
       (.I0(\crc_reg_out[12]_i_5_n_0 ),
        .I1(crc_blk_sel[2]),
        .I2(\crc_reg_out[12]_i_6_n_0 ),
        .I3(p_56_in),
        .I4(crc_blk_sel[1]),
        .I5(p_241_in),
        .O(\crc_reg_out[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crc_reg_out[12]_i_3 
       (.I0(p_241_in),
        .I1(Q[12]),
        .I2(p_305_in),
        .I3(p_291_in),
        .O(\crc_reg_out[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[12]_i_4 
       (.I0(\prv_crc_cr0[12]_i_2_n_0 ),
        .I1(Q[8]),
        .I2(Q[4]),
        .O(\crc_reg_out[12]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[12]_i_5 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[0] ),
        .I2(\c_data_reg[15] [2]),
        .I3(p_15_in),
        .I4(\crc_reg_out[7]_i_6_n_0 ),
        .O(\crc_reg_out[12]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[12]_i_6 
       (.I0(p_305_in),
        .I1(p_314_in),
        .O(\crc_reg_out[12]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[12]_i_7 
       (.I0(Q[4]),
        .I1(Q[0]),
        .O(p_56_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[13]_i_1 
       (.I0(\crc_reg_out[13]_i_2_n_0 ),
        .I1(\prv_crc_cr0[13]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF69960000)) 
    \crc_reg_out[13]_i_2 
       (.I0(\c_data_reg[5] ),
        .I1(\c_data_reg[1] ),
        .I2(p_17_in103_in),
        .I3(p_26_in82_in),
        .I4(crc_blk_sel[0]),
        .I5(\crc_reg_out[13]_i_5_n_0 ),
        .O(\crc_reg_out[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[13]_i_3 
       (.I0(prv_crc_cr0[5]),
        .I1(prv_crc_cr1[5]),
        .I2(c_en),
        .O(p_17_in103_in));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[13]_i_4 
       (.I0(prv_crc_cr0[1]),
        .I1(prv_crc_cr1[1]),
        .I2(c_en),
        .O(p_26_in82_in));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[13]_i_5 
       (.I0(p_325_in),
        .I1(crc_blk_sel[1]),
        .I2(p_60_in),
        .I3(p_168_in),
        .I4(p_301_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[13]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[13]_i_6 
       (.I0(Q[1]),
        .I1(Q[5]),
        .O(p_60_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[14]_i_1 
       (.I0(\crc_reg_out[14]_i_2_n_0 ),
        .I1(\prv_crc_cr0[14]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF69960000)) 
    \crc_reg_out[14]_i_2 
       (.I0(\c_data_reg[15] [3]),
        .I1(\c_data_reg[15] [0]),
        .I2(p_20_in107_in),
        .I3(p_27_in),
        .I4(crc_blk_sel[0]),
        .I5(\crc_reg_out[14]_i_5_n_0 ),
        .O(\crc_reg_out[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[14]_i_3 
       (.I0(prv_crc_cr0[6]),
        .I1(prv_crc_cr1[6]),
        .I2(c_en),
        .O(p_20_in107_in));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[14]_i_4 
       (.I0(prv_crc_cr0[2]),
        .I1(prv_crc_cr1[2]),
        .I2(c_en),
        .O(p_27_in));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[14]_i_5 
       (.I0(p_330_in),
        .I1(crc_blk_sel[1]),
        .I2(p_64_in),
        .I3(p_287_in),
        .I4(p_310_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[14]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \crc_reg_out[15]_i_1 
       (.I0(c_en),
        .I1(rstart),
        .O(\crc_reg_out[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[15]_i_2 
       (.I0(\crc_reg_out[15]_i_3_n_0 ),
        .I1(\crc_reg_out[15]_i_4_n_0 ),
        .I2(\prv_crc_cr0[15]_i_3_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[15]_i_3 
       (.I0(p_308_in),
        .I1(crc_blk_sel[1]),
        .I2(p_66_in),
        .I3(Q[3]),
        .I4(Q[7]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[15]_i_4 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [4]),
        .I2(\c_data_reg[15] [1]),
        .I3(p_0_in75_in),
        .I4(p_1_in76_in),
        .O(\crc_reg_out[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[15]_i_5 
       (.I0(p_306_in),
        .I1(p_317_in),
        .O(p_66_in));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[15]_i_6 
       (.I0(prv_crc_cr0[3]),
        .I1(prv_crc_cr1[3]),
        .I2(c_en),
        .O(p_0_in75_in));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[15]_i_7 
       (.I0(prv_crc_cr0[7]),
        .I1(prv_crc_cr1[7]),
        .I2(c_en),
        .O(p_1_in76_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[1]_i_1 
       (.I0(\crc_reg_out[1]_i_2_n_0 ),
        .I1(\crc_reg_out[1]_i_3_n_0 ),
        .I2(\prv_crc_cr0[1]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBCCBCBBC88888888)) 
    \crc_reg_out[1]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_168_in),
        .I2(Q[1]),
        .I3(Q[5]),
        .I4(\prv_crc_cr0[13]_i_7_n_0 ),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[1]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[5] ),
        .I2(\c_data_reg[1] ),
        .I3(p_26_in82_in),
        .I4(p_17_in103_in),
        .I5(p_0_in160_in),
        .O(\crc_reg_out[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[1]_i_4 
       (.I0(prv_crc_cr0[9]),
        .I1(prv_crc_cr1[9]),
        .I2(c_en),
        .O(p_0_in160_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[2]_i_1 
       (.I0(\crc_reg_out[2]_i_2_n_0 ),
        .I1(\crc_reg_out[2]_i_3_n_0 ),
        .I2(\prv_crc_cr0[2]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBCE3E3BCA0A0A0A0)) 
    \crc_reg_out[2]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_64_in),
        .I2(p_287_in),
        .I3(p_309_in),
        .I4(p_310_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[2]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_27_in),
        .I2(p_20_in107_in),
        .I3(p_0_in171_in),
        .I4(\c_data_reg[15] [0]),
        .I5(\c_data_reg[15] [3]),
        .O(\crc_reg_out[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[2]_i_4 
       (.I0(prv_crc_cr0[10]),
        .I1(prv_crc_cr1[10]),
        .I2(c_en),
        .O(p_0_in171_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[3]_i_1 
       (.I0(\crc_reg_out[3]_i_2_n_0 ),
        .I1(\prv_crc_cr0[3]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \crc_reg_out[3]_i_2 
       (.I0(nxt_crc_8bit),
        .I1(crc_blk_sel[0]),
        .I2(crc_blk_sel[2]),
        .I3(nxt_crc_24bit),
        .I4(crc_blk_sel[1]),
        .I5(p_317_in),
        .O(\crc_reg_out[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[3]_i_3 
       (.I0(p_121_in),
        .I1(\c_data_reg[15] [4]),
        .I2(\crc_reg_out[7]_i_6_n_0 ),
        .I3(p_5_in88_in),
        .I4(\c_data_reg[0] ),
        .I5(\c_data_reg[15] [1]),
        .O(nxt_crc_8bit));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[3]_i_4 
       (.I0(p_314_in),
        .I1(p_317_in),
        .I2(p_306_in),
        .I3(Q[7]),
        .I4(p_318_in),
        .I5(p_307_in),
        .O(nxt_crc_24bit));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[3]_i_5 
       (.I0(prv_crc_cr1[3]),
        .I1(prv_crc_cr0[3]),
        .I2(c_en),
        .I3(prv_crc_cr1[7]),
        .I4(prv_crc_cr0[7]),
        .O(p_121_in));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[3]_i_6 
       (.I0(prv_crc_cr0[11]),
        .I1(prv_crc_cr1[11]),
        .I2(c_en),
        .O(p_5_in88_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[4]_i_1 
       (.I0(\crc_reg_out[4]_i_2_n_0 ),
        .I1(\crc_reg_out[4]_i_3_n_0 ),
        .I2(\prv_crc_cr0[4]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[4]_i_2 
       (.I0(p_305_in),
        .I1(crc_blk_sel[1]),
        .I2(p_241_in),
        .I3(Q[1]),
        .I4(p_168_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228822882822828)) 
    \crc_reg_out[4]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_26_in82_in),
        .I2(\c_data_reg[1] ),
        .I3(prv_crc_cr0[12]),
        .I4(prv_crc_cr1[12]),
        .I5(c_en),
        .O(\crc_reg_out[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[5]_i_1 
       (.I0(\crc_reg_out[5]_i_2_n_0 ),
        .I1(\crc_reg_out[5]_i_3_n_0 ),
        .I2(\prv_crc_cr0[5]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[5]_i_2 
       (.I0(p_301_in),
        .I1(crc_blk_sel[1]),
        .I2(p_287_in),
        .I3(p_325_in),
        .I4(Q[2]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88A0220A220A88A0)) 
    \crc_reg_out[5]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(prv_crc_cr0[13]),
        .I2(prv_crc_cr1[13]),
        .I3(c_en),
        .I4(p_27_in),
        .I5(\c_data_reg[15] [0]),
        .O(\crc_reg_out[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[6]_i_1 
       (.I0(\crc_reg_out[6]_i_2_n_0 ),
        .I1(\crc_reg_out[6]_i_3_n_0 ),
        .I2(\prv_crc_cr0[6]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[6]_i_2 
       (.I0(p_310_in),
        .I1(crc_blk_sel[1]),
        .I2(p_330_in),
        .I3(p_317_in),
        .I4(Q[3]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88A0220A220A88A0)) 
    \crc_reg_out[6]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(prv_crc_cr0[14]),
        .I2(prv_crc_cr1[14]),
        .I3(c_en),
        .I4(p_0_in75_in),
        .I5(\c_data_reg[15] [1]),
        .O(\crc_reg_out[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[7]_i_1 
       (.I0(\crc_reg_out[7]_i_2_n_0 ),
        .I1(\crc_reg_out[7]_i_3_n_0 ),
        .I2(\prv_crc_cr0[7]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[7]_i_2 
       (.I0(p_306_in),
        .I1(crc_blk_sel[1]),
        .I2(p_308_in),
        .I3(p_56_in),
        .I4(\crc_reg_out[12]_i_6_n_0 ),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[7]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [2]),
        .I2(\c_data_reg[0] ),
        .I3(p_16_in100_in),
        .I4(p_15_in),
        .I5(\crc_reg_out[7]_i_6_n_0 ),
        .O(\crc_reg_out[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[7]_i_4 
       (.I0(prv_crc_cr0[15]),
        .I1(prv_crc_cr1[15]),
        .I2(c_en),
        .O(p_16_in100_in));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[7]_i_5 
       (.I0(prv_crc_cr0[4]),
        .I1(prv_crc_cr1[4]),
        .I2(c_en),
        .O(p_15_in));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[7]_i_6 
       (.I0(prv_crc_cr0[0]),
        .I1(prv_crc_cr1[0]),
        .I2(c_en),
        .O(\crc_reg_out[7]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[8]_i_1 
       (.I0(\crc_reg_out[8]_i_2_n_0 ),
        .I1(\crc_reg_out[8]_i_3_n_0 ),
        .I2(\prv_crc_cr0[8]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[8]_i_2 
       (.I0(p_291_in),
        .I1(crc_blk_sel[1]),
        .I2(\prv_crc_cr0[12]_i_2_n_0 ),
        .I3(Q[5]),
        .I4(p_301_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[8]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[5] ),
        .I2(p_218_in),
        .I3(\c_data_reg[1] ),
        .I4(\c_data_reg[0] ),
        .I5(p_17_in103_in),
        .O(\crc_reg_out[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[8]_i_4 
       (.I0(p_185_in),
        .I1(p_186_in),
        .I2(p_0_in171_in),
        .I3(\c_data_reg[15] [7]),
        .I4(p_174_in),
        .I5(p_172_in),
        .O(p_301_in));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[8]_i_5 
       (.I0(prv_crc_cr1[1]),
        .I1(prv_crc_cr0[1]),
        .I2(c_en),
        .I3(prv_crc_cr1[0]),
        .I4(prv_crc_cr0[0]),
        .O(p_218_in));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[8]_i_6 
       (.I0(\c_data_reg[5] ),
        .I1(\c_data_reg[15] [3]),
        .O(p_172_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[9]_i_1 
       (.I0(\crc_reg_out[9]_i_2_n_0 ),
        .I1(\crc_reg_out[9]_i_3_n_0 ),
        .I2(\prv_crc_cr0[9]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[9]_i_2 
       (.I0(p_300_in),
        .I1(crc_blk_sel[1]),
        .I2(\crc_reg_out[9]_i_4_n_0 ),
        .I3(p_327_in),
        .I4(Q[6]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[9]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [0]),
        .I2(\c_data_reg[1] ),
        .I3(p_185_in),
        .I4(\c_data_reg[15] [3]),
        .I5(p_20_in107_in),
        .O(\crc_reg_out[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[9]_i_4 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(p_310_in),
        .O(\crc_reg_out[9]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[9]_i_5 
       (.I0(prv_crc_cr1[1]),
        .I1(prv_crc_cr0[1]),
        .I2(c_en),
        .I3(prv_crc_cr1[2]),
        .I4(prv_crc_cr0[2]),
        .O(p_185_in));
  FDRE \crc_reg_out_reg[0] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[0]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[0] ),
        .R(SR));
  FDRE \crc_reg_out_reg[10] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[10]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[10] ),
        .R(SR));
  FDRE \crc_reg_out_reg[11] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[11]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[11] ),
        .R(SR));
  FDRE \crc_reg_out_reg[12] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[12]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[12] ),
        .R(SR));
  FDRE \crc_reg_out_reg[13] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[13]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[13] ),
        .R(SR));
  FDRE \crc_reg_out_reg[14] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[14]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[14] ),
        .R(SR));
  FDRE \crc_reg_out_reg[15] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[15]_i_2_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[15] ),
        .R(SR));
  FDRE \crc_reg_out_reg[1] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[1]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[1] ),
        .R(SR));
  FDRE \crc_reg_out_reg[2] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[2]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[2] ),
        .R(SR));
  FDRE \crc_reg_out_reg[3] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[3]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[3] ),
        .R(SR));
  FDRE \crc_reg_out_reg[4] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[4]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[4] ),
        .R(SR));
  FDRE \crc_reg_out_reg[5] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[5]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[5] ),
        .R(SR));
  FDRE \crc_reg_out_reg[6] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[6]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[6] ),
        .R(SR));
  FDRE \crc_reg_out_reg[7] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[7]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[7] ),
        .R(SR));
  FDRE \crc_reg_out_reg[8] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[8]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[8] ),
        .R(SR));
  FDRE \crc_reg_out_reg[9] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[9]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[9] ),
        .R(SR));
  LUT3 #(
    .INIT(8'h20)) 
    crcdone_i_1
       (.I0(crc_start_d1),
        .I1(rstart),
        .I2(m_axis_aresetn),
        .O(crcdone_i_1_n_0));
  FDRE crcdone_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crcdone_i_1_n_0),
        .Q(rstart_reg),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[0]_i_1 
       (.I0(\prv_crc_cr0[0]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[0]_i_2 
       (.I0(p_262_in),
        .I1(p_261_in),
        .I2(Q[12]),
        .I3(Q[8]),
        .I4(p_241_in),
        .I5(p_291_in),
        .O(\prv_crc_cr0[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[0]_i_3 
       (.I0(Q[5]),
        .I1(Q[4]),
        .O(p_261_in));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[10]_i_1 
       (.I0(\prv_crc_cr0[10]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[10]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_2 
       (.I0(\prv_crc_cr0[10]_i_3_n_0 ),
        .I1(p_309_in),
        .I2(p_308_in),
        .I3(Q[4]),
        .I4(p_310_in),
        .I5(\prv_crc_cr0[10]_i_5_n_0 ),
        .O(\prv_crc_cr0[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_3 
       (.I0(Q[10]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(Q[11]),
        .I4(Q[15]),
        .I5(p_333_in),
        .O(\prv_crc_cr0[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_4 
       (.I0(p_229_in),
        .I1(p_230_in),
        .I2(\c_data_reg[15] [4]),
        .I3(\c_data_reg[15] [8]),
        .I4(p_232_in),
        .I5(p_231_in),
        .O(p_308_in));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[10]_i_5 
       (.I0(p_305_in),
        .I1(p_317_in),
        .I2(p_287_in),
        .I3(p_307_in),
        .I4(p_306_in),
        .O(\prv_crc_cr0[10]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[10]_i_6 
       (.I0(\c_data_reg[15] [2]),
        .I1(\c_data_reg[15] [1]),
        .O(p_232_in));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[10]_i_7 
       (.I0(prv_crc_cr1[4]),
        .I1(prv_crc_cr0[4]),
        .I2(c_en),
        .I3(prv_crc_cr1[3]),
        .I4(prv_crc_cr0[3]),
        .O(p_231_in));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[11]_i_1 
       (.I0(\prv_crc_cr0[11]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[11]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[11]_i_2 
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(p_337_in),
        .I3(p_317_in),
        .I4(p_314_in),
        .I5(p_335_in),
        .O(\prv_crc_cr0[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[11]_i_3 
       (.I0(p_230_in),
        .I1(\prv_crc_cr0[11]_i_4_n_0 ),
        .I2(\c_data_reg[15] [8]),
        .I3(p_229_in),
        .I4(\prv_crc_cr0[12]_i_11_n_0 ),
        .I5(\c_data_reg[0] ),
        .O(p_317_in));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[11]_i_4 
       (.I0(\c_data_reg[15] [4]),
        .I1(c_en),
        .I2(prv_crc_cr1[0]),
        .I3(prv_crc_cr0[0]),
        .O(\prv_crc_cr0[11]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[11]_i_5 
       (.I0(c_en),
        .I1(prv_crc_cr1[15]),
        .I2(prv_crc_cr0[15]),
        .I3(\c_data_reg[15] [12]),
        .O(p_229_in));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \prv_crc_cr0[12]_i_1 
       (.I0(\prv_crc_cr0[12]_i_2_n_0 ),
        .I1(Q[8]),
        .I2(Q[4]),
        .I3(p_320_in),
        .I4(p_321_in),
        .I5(rstart),
        .O(p_1_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[12]_i_10 
       (.I0(\c_data_reg[15] [9]),
        .I1(c_en),
        .I2(prv_crc_cr1[12]),
        .I3(prv_crc_cr0[12]),
        .O(p_216_in));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[12]_i_11 
       (.I0(\c_data_reg[15] [5]),
        .I1(c_en),
        .I2(prv_crc_cr1[8]),
        .I3(prv_crc_cr0[8]),
        .O(\prv_crc_cr0[12]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[12]_i_12 
       (.I0(prv_crc_cr1[5]),
        .I1(prv_crc_cr0[5]),
        .I2(c_en),
        .I3(prv_crc_cr1[6]),
        .I4(prv_crc_cr0[6]),
        .O(p_174_in));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[12]_i_13 
       (.I0(prv_crc_cr1[13]),
        .I1(prv_crc_cr0[13]),
        .I2(c_en),
        .I3(prv_crc_cr1[9]),
        .I4(prv_crc_cr0[9]),
        .O(p_165_in));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_14 
       (.I0(\c_data_reg[0] ),
        .I1(\c_data_reg[1] ),
        .O(p_219_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_15 
       (.I0(\c_data_reg[15] [5]),
        .I1(\c_data_reg[15] [2]),
        .O(\prv_crc_cr0[12]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_16 
       (.I0(p_218_in),
        .I1(p_165_in),
        .I2(\c_data_reg[0] ),
        .I3(\c_data_reg[1] ),
        .I4(\c_data_reg[15] [6]),
        .I5(\c_data_reg[15] [10]),
        .O(\prv_crc_cr0[12]_i_16_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[12]_i_17 
       (.I0(\c_data_reg[15] [6]),
        .I1(c_en),
        .I2(prv_crc_cr1[9]),
        .I3(prv_crc_cr0[9]),
        .O(\prv_crc_cr0[12]_i_17_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[12]_i_18 
       (.I0(prv_crc_cr1[5]),
        .I1(prv_crc_cr0[5]),
        .I2(c_en),
        .I3(prv_crc_cr1[4]),
        .I4(prv_crc_cr0[4]),
        .O(p_209_in));
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[12]_i_2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(p_314_in),
        .I3(p_168_in),
        .O(\prv_crc_cr0[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_3 
       (.I0(Q[12]),
        .I1(p_241_in),
        .O(p_320_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_4 
       (.I0(p_291_in),
        .I1(p_305_in),
        .O(p_321_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_5 
       (.I0(p_216_in),
        .I1(\prv_crc_cr0[12]_i_11_n_0 ),
        .I2(\c_data_reg[5] ),
        .I3(\c_data_reg[15] [2]),
        .I4(p_17_in103_in),
        .I5(p_15_in),
        .O(p_314_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_6 
       (.I0(p_174_in),
        .I1(\c_data_reg[5] ),
        .I2(\c_data_reg[15] [3]),
        .I3(\c_data_reg[15] [6]),
        .I4(\c_data_reg[15] [10]),
        .I5(p_165_in),
        .O(p_168_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_7 
       (.I0(\c_data_reg[15] [2]),
        .I1(\c_data_reg[15] [5]),
        .I2(p_153_in),
        .I3(p_216_in),
        .I4(p_218_in),
        .I5(p_219_in),
        .O(p_241_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_8 
       (.I0(p_153_in),
        .I1(\prv_crc_cr0[12]_i_15_n_0 ),
        .I2(\c_data_reg[5] ),
        .I3(p_17_in103_in),
        .I4(\prv_crc_cr0[14]_i_14_n_0 ),
        .I5(\prv_crc_cr0[12]_i_16_n_0 ),
        .O(p_291_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_9 
       (.I0(p_218_in),
        .I1(p_219_in),
        .I2(\prv_crc_cr0[12]_i_17_n_0 ),
        .I3(p_209_in),
        .I4(\c_data_reg[15] [2]),
        .I5(\c_data_reg[5] ),
        .O(p_305_in));
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[13]_i_1 
       (.I0(\prv_crc_cr0[13]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[13]_i_10 
       (.I0(prv_crc_cr1[5]),
        .I1(prv_crc_cr0[5]),
        .I2(c_en),
        .I3(prv_crc_cr1[9]),
        .I4(prv_crc_cr0[9]),
        .O(p_184_in));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_11 
       (.I0(\c_data_reg[1] ),
        .I1(\c_data_reg[15] [0]),
        .O(p_186_in));
  LUT6 #(
    .INIT(64'h6969669996969966)) 
    \prv_crc_cr0[13]_i_12 
       (.I0(\c_data_reg[15] [7]),
        .I1(\c_data_reg[15] [11]),
        .I2(prv_crc_cr0[14]),
        .I3(prv_crc_cr1[14]),
        .I4(c_en),
        .I5(p_0_in171_in),
        .O(\prv_crc_cr0[13]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6969669996969966)) 
    \prv_crc_cr0[13]_i_13 
       (.I0(p_17_in103_in),
        .I1(p_185_in),
        .I2(prv_crc_cr0[9]),
        .I3(prv_crc_cr1[9]),
        .I4(c_en),
        .I5(\c_data_reg[5] ),
        .O(\prv_crc_cr0[13]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h665A99A599A5665A)) 
    \prv_crc_cr0[13]_i_14 
       (.I0(\c_data_reg[15] [1]),
        .I1(prv_crc_cr0[3]),
        .I2(prv_crc_cr1[3]),
        .I3(c_en),
        .I4(p_20_in107_in),
        .I5(\c_data_reg[15] [3]),
        .O(\prv_crc_cr0[13]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_2 
       (.I0(Q[5]),
        .I1(p_289_in),
        .I2(p_325_in),
        .I3(p_327_in),
        .I4(p_328_in),
        .I5(\prv_crc_cr0[13]_i_7_n_0 ),
        .O(\prv_crc_cr0[13]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_3 
       (.I0(Q[13]),
        .I1(Q[9]),
        .O(p_289_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_4 
       (.I0(p_11_in95_in),
        .I1(p_164_in),
        .I2(p_185_in),
        .I3(p_184_in),
        .I4(p_186_in),
        .I5(\c_data_reg[5] ),
        .O(p_325_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_5 
       (.I0(p_287_in),
        .I1(p_168_in),
        .O(p_327_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_6 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(p_328_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_7 
       (.I0(\prv_crc_cr0[13]_i_12_n_0 ),
        .I1(\c_data_reg[15] [6]),
        .I2(p_186_in),
        .I3(\prv_crc_cr0[13]_i_13_n_0 ),
        .I4(\prv_crc_cr0[13]_i_14_n_0 ),
        .I5(p_301_in),
        .O(\prv_crc_cr0[13]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \prv_crc_cr0[13]_i_8 
       (.I0(prv_crc_cr0[13]),
        .I1(prv_crc_cr1[13]),
        .I2(c_en),
        .O(p_11_in95_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_9 
       (.I0(\c_data_reg[15] [6]),
        .I1(\c_data_reg[15] [10]),
        .O(p_164_in));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[14]_i_1 
       (.I0(\prv_crc_cr0[14]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_10 
       (.I0(\c_data_reg[15] [7]),
        .I1(\c_data_reg[15] [3]),
        .O(\prv_crc_cr0[14]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[14]_i_11 
       (.I0(prv_crc_cr1[10]),
        .I1(prv_crc_cr0[10]),
        .I2(c_en),
        .I3(prv_crc_cr1[6]),
        .I4(prv_crc_cr0[6]),
        .O(p_203_in));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \prv_crc_cr0[14]_i_12 
       (.I0(prv_crc_cr0[14]),
        .I1(prv_crc_cr1[14]),
        .I2(c_en),
        .O(p_13_in97_in));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_13 
       (.I0(\c_data_reg[15] [3]),
        .I1(c_en),
        .I2(prv_crc_cr1[6]),
        .I3(prv_crc_cr0[6]),
        .O(\prv_crc_cr0[14]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[14]_i_14 
       (.I0(c_en),
        .I1(prv_crc_cr1[2]),
        .I2(prv_crc_cr0[2]),
        .I3(\c_data_reg[15] [0]),
        .O(\prv_crc_cr0[14]_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[14]_i_15 
       (.I0(c_en),
        .I1(prv_crc_cr1[3]),
        .I2(prv_crc_cr0[3]),
        .I3(\c_data_reg[15] [1]),
        .O(nxt_crc_8bit0114_out__0));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_16 
       (.I0(\c_data_reg[0] ),
        .I1(c_en),
        .I2(prv_crc_cr1[0]),
        .I3(prv_crc_cr0[0]),
        .O(\prv_crc_cr0[14]_i_16_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[14]_i_17 
       (.I0(prv_crc_cr1[11]),
        .I1(prv_crc_cr0[11]),
        .I2(c_en),
        .I3(prv_crc_cr1[7]),
        .I4(prv_crc_cr0[7]),
        .O(p_230_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_18 
       (.I0(\c_data_reg[15] [8]),
        .I1(\c_data_reg[15] [4]),
        .O(p_228_in));
  LUT6 #(
    .INIT(64'h6996699669699696)) 
    \prv_crc_cr0[14]_i_19 
       (.I0(p_20_in107_in),
        .I1(\c_data_reg[15] [4]),
        .I2(\c_data_reg[15] [3]),
        .I3(prv_crc_cr0[7]),
        .I4(prv_crc_cr1[7]),
        .I5(c_en),
        .O(\prv_crc_cr0[14]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_2 
       (.I0(\prv_crc_cr0[14]_i_3_n_0 ),
        .I1(p_332_in),
        .I2(p_333_in),
        .I3(p_330_in),
        .I4(p_310_in),
        .I5(p_309_in),
        .O(\prv_crc_cr0[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_20 
       (.I0(\prv_crc_cr0[14]_i_21_n_0 ),
        .I1(p_5_in88_in),
        .I2(\c_data_reg[15] [1]),
        .I3(\c_data_reg[15] [0]),
        .I4(\c_data_reg[15] [2]),
        .I5(p_15_in),
        .O(\prv_crc_cr0[14]_i_20_n_0 ));
  LUT6 #(
    .INIT(64'h665A99A599A5665A)) 
    \prv_crc_cr0[14]_i_21 
       (.I0(\c_data_reg[15] [12]),
        .I1(prv_crc_cr0[10]),
        .I2(prv_crc_cr1[10]),
        .I3(c_en),
        .I4(\c_data_reg[15] [8]),
        .I5(\c_data_reg[15] [7]),
        .O(\prv_crc_cr0[14]_i_21_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[14]_i_3 
       (.I0(Q[6]),
        .I1(Q[10]),
        .I2(Q[14]),
        .O(\prv_crc_cr0[14]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_4 
       (.I0(p_317_in),
        .I1(p_287_in),
        .O(p_332_in));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_5 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(p_333_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_6 
       (.I0(p_205_in),
        .I1(p_204_in),
        .I2(\c_data_reg[15] [11]),
        .I3(\prv_crc_cr0[14]_i_10_n_0 ),
        .I4(p_203_in),
        .I5(p_13_in97_in),
        .O(p_330_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_7 
       (.I0(\prv_crc_cr0[14]_i_13_n_0 ),
        .I1(\prv_crc_cr0[14]_i_14_n_0 ),
        .I2(nxt_crc_8bit0114_out__0),
        .I3(\prv_crc_cr0[14]_i_16_n_0 ),
        .I4(p_230_in),
        .I5(p_228_in),
        .O(p_310_in));
  LUT6 #(
    .INIT(64'h569AA965A965569A)) 
    \prv_crc_cr0[14]_i_8 
       (.I0(p_204_in),
        .I1(c_en),
        .I2(prv_crc_cr1[15]),
        .I3(prv_crc_cr0[15]),
        .I4(\prv_crc_cr0[14]_i_19_n_0 ),
        .I5(\prv_crc_cr0[14]_i_20_n_0 ),
        .O(p_309_in));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_9 
       (.I0(\c_data_reg[15] [0]),
        .I1(\c_data_reg[15] [1]),
        .O(p_205_in));
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[15]_i_1 
       (.I0(rstart),
        .I1(c_en),
        .O(\prv_crc_cr0[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[15]_i_2 
       (.I0(\prv_crc_cr0[15]_i_3_n_0 ),
        .I1(rstart),
        .O(p_1_in[15]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[15]_i_3 
       (.I0(p_335_in),
        .I1(p_337_in),
        .I2(p_338_in),
        .I3(Q[3]),
        .I4(Q[4]),
        .I5(p_336_in),
        .O(\prv_crc_cr0[15]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_4 
       (.I0(Q[7]),
        .I1(Q[11]),
        .O(p_335_in));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_5 
       (.I0(p_307_in),
        .I1(p_306_in),
        .O(p_337_in));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_6 
       (.I0(p_305_in),
        .I1(p_317_in),
        .O(p_338_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_7 
       (.I0(p_308_in),
        .I1(Q[15]),
        .O(p_336_in));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[1]_i_1 
       (.I0(\prv_crc_cr0[1]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[1]_i_2 
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(p_325_in),
        .I3(p_300_in),
        .I4(p_289_in),
        .I5(p_268_in),
        .O(\prv_crc_cr0[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[2]_i_1 
       (.I0(\prv_crc_cr0[2]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[2]));
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[2]_i_2 
       (.I0(p_330_in),
        .I1(p_309_in),
        .I2(p_306_in),
        .I3(\prv_crc_cr0[2]_i_4_n_0 ),
        .O(\prv_crc_cr0[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[2]_i_3 
       (.I0(\prv_crc_cr0[2]_i_5_n_0 ),
        .I1(p_218_in),
        .I2(\prv_crc_cr0[12]_i_11_n_0 ),
        .I3(\prv_crc_cr0[2]_i_6_n_0 ),
        .I4(p_231_in),
        .I5(p_232_in),
        .O(p_306_in));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[2]_i_4 
       (.I0(p_310_in),
        .I1(Q[10]),
        .I2(Q[14]),
        .I3(Q[7]),
        .I4(Q[6]),
        .O(\prv_crc_cr0[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[2]_i_5 
       (.I0(\c_data_reg[15] [4]),
        .I1(c_en),
        .I2(prv_crc_cr1[7]),
        .I3(prv_crc_cr0[7]),
        .O(\prv_crc_cr0[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6969669996969966)) 
    \prv_crc_cr0[2]_i_6 
       (.I0(\c_data_reg[1] ),
        .I1(\c_data_reg[0] ),
        .I2(prv_crc_cr0[12]),
        .I3(prv_crc_cr1[12]),
        .I4(c_en),
        .I5(\c_data_reg[15] [9]),
        .O(\prv_crc_cr0[2]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[3]_i_1 
       (.I0(\prv_crc_cr0[3]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[3]_i_2 
       (.I0(\prv_crc_cr0[3]_i_3_n_0 ),
        .I1(p_314_in),
        .I2(Q[11]),
        .I3(Q[15]),
        .I4(p_308_in),
        .I5(p_291_in),
        .O(\prv_crc_cr0[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[3]_i_3 
       (.I0(Q[0]),
        .I1(Q[7]),
        .I2(Q[8]),
        .I3(p_307_in),
        .I4(p_306_in),
        .O(\prv_crc_cr0[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[4]_i_1 
       (.I0(\prv_crc_cr0[4]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[4]_i_2 
       (.I0(\prv_crc_cr0[12]_i_2_n_0 ),
        .I1(p_300_in),
        .I2(Q[9]),
        .I3(p_262_in),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(\prv_crc_cr0[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[4]_i_3 
       (.I0(\prv_crc_cr0[14]_i_13_n_0 ),
        .I1(nxt_crc_8bit0114_out__0),
        .I2(\prv_crc_cr0[13]_i_13_n_0 ),
        .I3(p_186_in),
        .I4(\c_data_reg[15] [6]),
        .I5(\prv_crc_cr0[13]_i_12_n_0 ),
        .O(p_300_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[4]_i_4 
       (.I0(p_301_in),
        .I1(p_305_in),
        .O(p_262_in));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[5]_i_1 
       (.I0(\prv_crc_cr0[5]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[5]_i_2 
       (.I0(p_309_in),
        .I1(p_267_in),
        .I2(p_327_in),
        .I3(Q[10]),
        .I4(p_328_in),
        .I5(p_268_in),
        .O(\prv_crc_cr0[5]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[5]_i_3 
       (.I0(p_310_in),
        .I1(p_301_in),
        .O(p_268_in));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[6]_i_1 
       (.I0(\prv_crc_cr0[6]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[6]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[6]_i_2 
       (.I0(\prv_crc_cr0[6]_i_3_n_0 ),
        .I1(p_64_in),
        .I2(p_318_in),
        .I3(p_310_in),
        .I4(p_337_in),
        .I5(p_332_in),
        .O(\prv_crc_cr0[6]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[6]_i_3 
       (.I0(p_314_in),
        .I1(Q[11]),
        .I2(Q[7]),
        .O(\prv_crc_cr0[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[6]_i_4 
       (.I0(Q[6]),
        .I1(Q[2]),
        .O(p_64_in));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[6]_i_5 
       (.I0(Q[0]),
        .I1(Q[3]),
        .O(p_318_in));
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[7]_i_1 
       (.I0(\prv_crc_cr0[7]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[7]_i_2 
       (.I0(\prv_crc_cr0[7]_i_3_n_0 ),
        .I1(p_320_in),
        .I2(Q[3]),
        .I3(Q[4]),
        .I4(p_322_in),
        .I5(p_291_in),
        .O(\prv_crc_cr0[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[7]_i_3 
       (.I0(p_306_in),
        .I1(Q[7]),
        .I2(Q[8]),
        .I3(p_305_in),
        .I4(p_317_in),
        .I5(p_323_in),
        .O(\prv_crc_cr0[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[8]_i_1 
       (.I0(\prv_crc_cr0[8]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[8]_i_10 
       (.I0(c_en),
        .I1(prv_crc_cr1[7]),
        .I2(prv_crc_cr0[7]),
        .I3(\c_data_reg[15] [3]),
        .O(\prv_crc_cr0[8]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[8]_i_11 
       (.I0(prv_crc_cr1[10]),
        .I1(prv_crc_cr0[10]),
        .I2(c_en),
        .I3(prv_crc_cr1[14]),
        .I4(prv_crc_cr0[14]),
        .O(p_190_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_2 
       (.I0(\prv_crc_cr0[8]_i_3_n_0 ),
        .I1(\prv_crc_cr0[8]_i_4_n_0 ),
        .I2(p_322_in),
        .I3(p_287_in),
        .I4(p_291_in),
        .I5(p_305_in),
        .O(\prv_crc_cr0[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[8]_i_3 
       (.I0(Q[4]),
        .I1(Q[5]),
        .I2(p_301_in),
        .I3(Q[13]),
        .I4(Q[9]),
        .O(\prv_crc_cr0[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_4 
       (.I0(p_323_in),
        .I1(p_325_in),
        .I2(\prv_crc_cr0[8]_i_8_n_0 ),
        .I3(\prv_crc_cr0[13]_i_13_n_0 ),
        .I4(\prv_crc_cr0[13]_i_14_n_0 ),
        .I5(\prv_crc_cr0[8]_i_9_n_0 ),
        .O(\prv_crc_cr0[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[8]_i_5 
       (.I0(p_168_in),
        .I1(p_314_in),
        .O(p_322_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_6 
       (.I0(\prv_crc_cr0[8]_i_10_n_0 ),
        .I1(\c_data_reg[15] [4]),
        .I2(p_20_in107_in),
        .I3(p_190_in),
        .I4(\c_data_reg[15] [11]),
        .I5(\c_data_reg[15] [7]),
        .O(p_287_in));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[8]_i_7 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(p_323_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_8 
       (.I0(p_186_in),
        .I1(\c_data_reg[15] [6]),
        .I2(p_0_in171_in),
        .I3(p_13_in97_in),
        .I4(\c_data_reg[15] [11]),
        .I5(\c_data_reg[15] [7]),
        .O(\prv_crc_cr0[8]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[8]_i_9 
       (.I0(Q[8]),
        .I1(Q[2]),
        .O(\prv_crc_cr0[8]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[9]_i_1 
       (.I0(\prv_crc_cr0[9]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[9]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[9]_i_2 
       (.I0(p_298_in),
        .I1(p_299_in),
        .I2(p_267_in),
        .I3(\prv_crc_cr0[9]_i_6_n_0 ),
        .I4(\prv_crc_cr0[13]_i_7_n_0 ),
        .I5(\prv_crc_cr0[9]_i_7_n_0 ),
        .O(\prv_crc_cr0[9]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[9]_i_3 
       (.I0(Q[10]),
        .I1(Q[14]),
        .O(p_298_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[9]_i_4 
       (.I0(p_330_in),
        .I1(\prv_crc_cr0[14]_i_20_n_0 ),
        .I2(\prv_crc_cr0[14]_i_19_n_0 ),
        .I3(p_16_in100_in),
        .I4(p_27_in),
        .I5(p_0_in75_in),
        .O(p_299_in));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[9]_i_5 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(p_267_in));
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[9]_i_6 
       (.I0(p_317_in),
        .I1(p_287_in),
        .I2(p_168_in),
        .I3(Q[3]),
        .I4(Q[9]),
        .O(\prv_crc_cr0[9]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[9]_i_7 
       (.I0(p_310_in),
        .I1(Q[2]),
        .I2(Q[1]),
        .O(\prv_crc_cr0[9]_i_7_n_0 ));
  FDPE \prv_crc_cr0_reg[0] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[0]),
        .PRE(SR),
        .Q(prv_crc_cr0[0]));
  FDPE \prv_crc_cr0_reg[10] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[10]),
        .PRE(SR),
        .Q(prv_crc_cr0[10]));
  FDPE \prv_crc_cr0_reg[11] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[11]),
        .PRE(SR),
        .Q(prv_crc_cr0[11]));
  FDPE \prv_crc_cr0_reg[12] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[12]),
        .PRE(SR),
        .Q(prv_crc_cr0[12]));
  FDPE \prv_crc_cr0_reg[13] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[13]),
        .PRE(SR),
        .Q(prv_crc_cr0[13]));
  FDPE \prv_crc_cr0_reg[14] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[14]),
        .PRE(SR),
        .Q(prv_crc_cr0[14]));
  FDPE \prv_crc_cr0_reg[15] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[15]),
        .PRE(SR),
        .Q(prv_crc_cr0[15]));
  FDPE \prv_crc_cr0_reg[1] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[1]),
        .PRE(SR),
        .Q(prv_crc_cr0[1]));
  FDPE \prv_crc_cr0_reg[2] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[2]),
        .PRE(SR),
        .Q(prv_crc_cr0[2]));
  FDPE \prv_crc_cr0_reg[3] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[3]),
        .PRE(SR),
        .Q(prv_crc_cr0[3]));
  FDPE \prv_crc_cr0_reg[4] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[4]),
        .PRE(SR),
        .Q(prv_crc_cr0[4]));
  FDPE \prv_crc_cr0_reg[5] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[5]),
        .PRE(SR),
        .Q(prv_crc_cr0[5]));
  FDPE \prv_crc_cr0_reg[6] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[6]),
        .PRE(SR),
        .Q(prv_crc_cr0[6]));
  FDPE \prv_crc_cr0_reg[7] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[7]),
        .PRE(SR),
        .Q(prv_crc_cr0[7]));
  FDPE \prv_crc_cr0_reg[8] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[8]),
        .PRE(SR),
        .Q(prv_crc_cr0[8]));
  FDPE \prv_crc_cr0_reg[9] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[9]),
        .PRE(SR),
        .Q(prv_crc_cr0[9]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[0]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[0]),
        .I2(prv_crc_cr0[0]),
        .I3(rstart),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[10]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[10]),
        .I2(prv_crc_cr0[10]),
        .I3(rstart),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[11]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[11]),
        .I2(prv_crc_cr0[11]),
        .I3(rstart),
        .O(p_0_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[12]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[12]),
        .I2(prv_crc_cr0[12]),
        .I3(rstart),
        .O(p_0_in[12]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[13]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[13]),
        .I2(prv_crc_cr0[13]),
        .I3(rstart),
        .O(p_0_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[14]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[14]),
        .I2(prv_crc_cr0[14]),
        .I3(rstart),
        .O(p_0_in[14]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[15]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[15]),
        .I2(prv_crc_cr0[15]),
        .I3(rstart),
        .O(p_0_in[15]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[1]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[1]),
        .I2(prv_crc_cr0[1]),
        .I3(rstart),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[2]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[2]),
        .I2(prv_crc_cr0[2]),
        .I3(rstart),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[3]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[3]),
        .I2(prv_crc_cr0[3]),
        .I3(rstart),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[4]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[4]),
        .I2(prv_crc_cr0[4]),
        .I3(rstart),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[5]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[5]),
        .I2(prv_crc_cr0[5]),
        .I3(rstart),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[6]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[6]),
        .I2(prv_crc_cr0[6]),
        .I3(rstart),
        .O(p_0_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[7]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[7]),
        .I2(prv_crc_cr0[7]),
        .I3(rstart),
        .O(p_0_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[8]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[8]),
        .I2(prv_crc_cr0[8]),
        .I3(rstart),
        .O(p_0_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[9]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[9]),
        .I2(prv_crc_cr0[9]),
        .I3(rstart),
        .O(p_0_in[9]));
  FDPE \prv_crc_cr1_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .PRE(SR),
        .Q(prv_crc_cr1[0]));
  FDPE \prv_crc_cr1_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[10]),
        .PRE(SR),
        .Q(prv_crc_cr1[10]));
  FDPE \prv_crc_cr1_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[11]),
        .PRE(SR),
        .Q(prv_crc_cr1[11]));
  FDPE \prv_crc_cr1_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[12]),
        .PRE(SR),
        .Q(prv_crc_cr1[12]));
  FDPE \prv_crc_cr1_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[13]),
        .PRE(SR),
        .Q(prv_crc_cr1[13]));
  FDPE \prv_crc_cr1_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[14]),
        .PRE(SR),
        .Q(prv_crc_cr1[14]));
  FDPE \prv_crc_cr1_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[15]),
        .PRE(SR),
        .Q(prv_crc_cr1[15]));
  FDPE \prv_crc_cr1_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .PRE(SR),
        .Q(prv_crc_cr1[1]));
  FDPE \prv_crc_cr1_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[2]),
        .PRE(SR),
        .Q(prv_crc_cr1[2]));
  FDPE \prv_crc_cr1_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .PRE(SR),
        .Q(prv_crc_cr1[3]));
  FDPE \prv_crc_cr1_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[4]),
        .PRE(SR),
        .Q(prv_crc_cr1[4]));
  FDPE \prv_crc_cr1_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[5]),
        .PRE(SR),
        .Q(prv_crc_cr1[5]));
  FDPE \prv_crc_cr1_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[6]),
        .PRE(SR),
        .Q(prv_crc_cr1[6]));
  FDPE \prv_crc_cr1_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[7]),
        .PRE(SR),
        .Q(prv_crc_cr1[7]));
  FDPE \prv_crc_cr1_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[8]),
        .PRE(SR),
        .Q(prv_crc_cr1[8]));
  FDPE \prv_crc_cr1_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[9]),
        .PRE(SR),
        .Q(prv_crc_cr1[9]));
  LUT5 #(
    .INIT(32'hFFFFDDFD)) 
    rstart_i_1
       (.I0(core_men_r2c),
        .I1(rstart_reg),
        .I2(aresetn_d1),
        .I3(aresetn_d2),
        .I4(crc_rst),
        .O(rstart_reg_0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_data" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_data
   (wc_gt_pload,
    SR,
    data_wip_reg,
    wc_err,
    din,
    wr_en,
    lp_count_en,
    src_in,
    fsm_wip_reg,
    \LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ,
    end_mem_wr2,
    lbuf_blk_wen_i,
    data_shutdown,
    \FSM_sequential_cur_state_reg[2] ,
    data_done,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 ,
    \LINE_BUF_WR_64.mem_wen_i_reg_0 ,
    \LP_CNTS[3].lp_data_reg[3]_0 ,
    fsfe_errframesync,
    \cur_byte_cnt_reg[12]_0 ,
    \cur_byte_cnt_reg[4]_0 ,
    \cur_byte_cnt_reg[15]_0 ,
    \cur_byte_cnt_reg[11]_0 ,
    \cur_byte_cnt_reg[10]_0 ,
    \cur_byte_cnt_reg[7]_0 ,
    \cur_byte_cnt_reg[6]_0 ,
    \LINE_BUF_WR_64.str_fwd_reg_0 ,
    \exp_crc_i_reg[15] ,
    \exp_crc_i_reg[12] ,
    \data_p_strb_reg[1] ,
    crc_partial_reg_0,
    \cur_byte_cnt_reg[5]_0 ,
    E,
    crc_blk_sel,
    m_axis_aclk,
    data_wip,
    end_mem_wr2_reg_0,
    crc_partial0,
    mem_wen0,
    ram_full_i_reg,
    fsm_wip_reg_reg_0,
    pkt_valid,
    out,
    Q,
    m_axis_aresetn,
    DI,
    \byte_cnt_reg_reg[11] ,
    S,
    CO,
    core_men_r2c,
    short_pkt_reg,
    pkt_rdvld_reg,
    long_pkt_out_reg,
    short_pkt,
    \data_type_reg_reg[1] ,
    diwc_corrected_zero,
    \data_type_reg_reg[5] ,
    short_pkt_reg_0,
    mem_wdata2,
    ecc_start_d1,
    \syncstages_ff_reg[1] ,
    full,
    \byte_cnt_reg_reg[15] ,
    \byt_cnt_adj_reg[15] ,
    D,
    dout,
    \c_data_reg[15] ,
    \data_p_strb_reg[1]_0 ,
    crc_start_d1,
    diwc_corrected_lte4,
    pkt_rdvld_reg_0,
    \gpr1.dout_i_reg[7] ,
    \byte_cnt_reg_reg[1] ,
    \byte_cnt_reg_reg[0] ,
    \byte_cnt_reg_reg[1]_0 ,
    \byte_cnt_reg_reg[1]_1 ,
    \byte_cnt_reg_reg[0]_0 ,
    \gpr1.dout_i_reg[27] ,
    clear);
  output wc_gt_pload;
  output [0:0]SR;
  output data_wip_reg;
  output wc_err;
  output [67:0]din;
  output wr_en;
  output [3:0]lp_count_en;
  output [0:0]src_in;
  output fsm_wip_reg;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ;
  output end_mem_wr2;
  output lbuf_blk_wen_i;
  output data_shutdown;
  output \FSM_sequential_cur_state_reg[2] ;
  output data_done;
  output [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 ;
  output \LINE_BUF_WR_64.mem_wen_i_reg_0 ;
  output \LP_CNTS[3].lp_data_reg[3]_0 ;
  output [3:0]fsfe_errframesync;
  output \cur_byte_cnt_reg[12]_0 ;
  output [3:0]\cur_byte_cnt_reg[4]_0 ;
  output \cur_byte_cnt_reg[15]_0 ;
  output \cur_byte_cnt_reg[11]_0 ;
  output \cur_byte_cnt_reg[10]_0 ;
  output \cur_byte_cnt_reg[7]_0 ;
  output \cur_byte_cnt_reg[6]_0 ;
  output [5:0]\LINE_BUF_WR_64.str_fwd_reg_0 ;
  output [15:0]\exp_crc_i_reg[15] ;
  output [1:0]\exp_crc_i_reg[12] ;
  output [1:0]\data_p_strb_reg[1] ;
  output crc_partial_reg_0;
  output \cur_byte_cnt_reg[5]_0 ;
  output [0:0]E;
  output [3:0]crc_blk_sel;
  input m_axis_aclk;
  input data_wip;
  input end_mem_wr2_reg_0;
  input crc_partial0;
  input mem_wen0;
  input ram_full_i_reg;
  input fsm_wip_reg_reg_0;
  input pkt_valid;
  input [0:0]out;
  input [23:0]Q;
  input m_axis_aresetn;
  input [3:0]DI;
  input [2:0]\byte_cnt_reg_reg[11] ;
  input [0:0]S;
  input [0:0]CO;
  input core_men_r2c;
  input short_pkt_reg;
  input pkt_rdvld_reg;
  input long_pkt_out_reg;
  input short_pkt;
  input \data_type_reg_reg[1] ;
  input diwc_corrected_zero;
  input [1:0]\data_type_reg_reg[5] ;
  input short_pkt_reg_0;
  input mem_wdata2;
  input ecc_start_d1;
  input \syncstages_ff_reg[1] ;
  input full;
  input [15:0]\byte_cnt_reg_reg[15] ;
  input [15:0]\byt_cnt_adj_reg[15] ;
  input [10:0]D;
  input [0:0]dout;
  input [15:0]\c_data_reg[15] ;
  input [1:0]\data_p_strb_reg[1]_0 ;
  input crc_start_d1;
  input diwc_corrected_lte4;
  input [0:0]pkt_rdvld_reg_0;
  input [31:0]\gpr1.dout_i_reg[7] ;
  input [1:0]\byte_cnt_reg_reg[1] ;
  input \byte_cnt_reg_reg[0] ;
  input \byte_cnt_reg_reg[1]_0 ;
  input \byte_cnt_reg_reg[1]_1 ;
  input \byte_cnt_reg_reg[0]_0 ;
  input [15:0]\gpr1.dout_i_reg[27] ;
  input clear;

  wire [0:0]CO;
  wire [10:0]D;
  wire [3:0]DI;
  wire [0:0]E;
  wire \ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ;
  wire \ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ;
  wire \ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ;
  wire \ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ;
  wire \ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ;
  wire \FRAME_RCVD_GEN[0].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[1].frame_rcvd_i[1]_i_1_n_0 ;
  wire \FRAME_RCVD_GEN[1].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[2].frame_rcvd_i[2]_i_1_n_0 ;
  wire \FRAME_RCVD_GEN[2].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[3].frame_rcvd_i_reg ;
  wire \FSM_sequential_cur_state_reg[2] ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_5_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_6_n_0 ;
  wire [31:16]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_10 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_11 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_12 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_13 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_14 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_15 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_8 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_9 ;
  wire [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_10 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_11 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_12 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_13 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_14 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_15 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_8 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_9 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_11 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_12 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_13 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_14 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_15 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_10 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_11 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_12 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_13 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_14 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_15 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_8 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_9 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_9_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[66]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_5 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_6 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_7 ;
  wire [31:8]\LINE_BUF_WR_64.mem_wdata_i_reg__1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ;
  wire \LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wen_i_reg_0 ;
  wire \LINE_BUF_WR_64.str_fwd_i_1_n_0 ;
  wire \LINE_BUF_WR_64.str_fwd_i_2_n_0 ;
  wire \LINE_BUF_WR_64.str_fwd_i_3_n_0 ;
  wire [5:0]\LINE_BUF_WR_64.str_fwd_reg_0 ;
  wire \LP_CNTS[0].lp_data[0]_i_2_n_0 ;
  wire \LP_CNTS[0].lp_data_reg_n_0_[0] ;
  wire \LP_CNTS[0].lp_header[0]_i_2_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_3_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_4_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_5_n_0 ;
  wire \LP_CNTS[0].lp_header_reg_n_0_[0] ;
  wire \LP_CNTS[1].lp_header[1]_i_1_n_0 ;
  wire \LP_CNTS[2].lp_header[2]_i_1_n_0 ;
  wire \LP_CNTS[3].lp_data_reg[3]_0 ;
  wire \LP_CNTS[3].lp_header[3]_i_1_n_0 ;
  wire [23:0]Q;
  wire [0:0]S;
  wire [0:0]SR;
  wire [15:0]\byt_cnt_adj_reg[15] ;
  wire \byte_cnt_reg_reg[0] ;
  wire \byte_cnt_reg_reg[0]_0 ;
  wire [2:0]\byte_cnt_reg_reg[11] ;
  wire [15:0]\byte_cnt_reg_reg[15] ;
  wire [1:0]\byte_cnt_reg_reg[1] ;
  wire \byte_cnt_reg_reg[1]_0 ;
  wire \byte_cnt_reg_reg[1]_1 ;
  wire [15:0]\c_data_reg[15] ;
  wire clear;
  wire core_men_f;
  wire core_men_f_i_1_n_0;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire [1:0]crc_p_strb;
  wire [15:0]crc_p_value;
  wire crc_partial;
  wire crc_partial0;
  wire crc_partial_reg_0;
  wire crc_start_d1;
  wire [15:4]cur_byte_cnt;
  wire \cur_byte_cnt[14]_i_2_n_0 ;
  wire \cur_byte_cnt[15]_i_1_n_0 ;
  wire \cur_byte_cnt[15]_i_2_n_0 ;
  wire \cur_byte_cnt[15]_i_6_n_0 ;
  wire \cur_byte_cnt[9]_i_2_n_0 ;
  wire \cur_byte_cnt_reg[10]_0 ;
  wire \cur_byte_cnt_reg[11]_0 ;
  wire \cur_byte_cnt_reg[12]_0 ;
  wire \cur_byte_cnt_reg[15]_0 ;
  wire [3:0]\cur_byte_cnt_reg[4]_0 ;
  wire \cur_byte_cnt_reg[5]_0 ;
  wire \cur_byte_cnt_reg[6]_0 ;
  wire \cur_byte_cnt_reg[7]_0 ;
  wire data_done;
  wire [1:0]\data_p_strb_reg[1] ;
  wire [1:0]\data_p_strb_reg[1]_0 ;
  wire data_sdown_reg_i_1_n_0;
  wire data_sdown_reg_i_2_n_0;
  wire data_shutdown;
  wire \data_type_reg_reg[1] ;
  wire [1:0]\data_type_reg_reg[5] ;
  wire data_wip;
  wire data_wip_reg;
  wire [67:0]din;
  wire diwc_corrected_lte4;
  wire diwc_corrected_zero;
  wire [0:0]dout;
  wire ecc_start_d1;
  wire end_mem_wr1;
  wire end_mem_wr1_i_1_n_0;
  wire end_mem_wr1_i_2_n_0;
  wire end_mem_wr2;
  wire end_mem_wr2_i_1_n_0;
  wire end_mem_wr2_i_2_n_0;
  wire end_mem_wr2_reg_0;
  wire \exp_crc_i[15]_i_3_n_0 ;
  wire \exp_crc_i[7]_i_3_n_0 ;
  wire [1:0]\exp_crc_i_reg[12] ;
  wire [15:0]\exp_crc_i_reg[15] ;
  wire [3:0]fsfe_errframesync;
  wire fsm_wip_reg;
  wire fsm_wip_reg_reg_0;
  wire full;
  wire [15:0]\gpr1.dout_i_reg[27] ;
  wire [31:0]\gpr1.dout_i_reg[7] ;
  wire lbuf_blk_wen_i;
  wire lbuf_blk_wen_i_i_1_n_0;
  wire lbuf_rst_code;
  wire long_pkt_out_reg;
  wire [3:0]lp_count_en;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [31:0]mem_data_l32;
  wire [31:0]mem_data_l32_d;
  wire [1:0]mem_vc;
  wire mem_wdata2;
  wire \mem_wdata[64]_i_1_n_0 ;
  wire \mem_wdata[65]_i_1_n_0 ;
  wire \mem_wdata[66]_i_1_n_0 ;
  wire \mem_wdata[67]_i_1_n_0 ;
  wire mem_wen0;
  wire [0:0]out;
  wire [3:0]p_0_in;
  wire p_0_in115_in;
  wire p_0_in132_in;
  wire p_0_in93_in;
  wire p_0_in94_in;
  wire p_0_in95_in;
  wire p_0_in96_in;
  wire p_0_out;
  wire p_10_out;
  wire p_117_out;
  wire p_134_out;
  wire p_13_out;
  wire p_14_out;
  wire p_151_out;
  wire p_16_out;
  wire p_18_out;
  wire p_1_in116_in;
  wire p_1_in133_in;
  wire p_1_in177_in;
  wire p_1_in97_in;
  wire p_20_out;
  wire p_25_out;
  wire [14:4]p_2_in;
  wire p_2_out;
  wire p_3_in178_in;
  wire p_3_out;
  wire p_5_out;
  wire p_6_out;
  wire p_8_out;
  wire p_98_out;
  wire p_9_out;
  wire pkt_rdvld_reg;
  wire [0:0]pkt_rdvld_reg_0;
  wire pkt_valid;
  wire pkt_valid_d1;
  wire pre_byt_cnt1_i_12_n_0;
  wire pre_byt_cnt1_i_13_n_0;
  wire pre_byt_cnt1_i_14_n_0;
  wire pre_byt_cnt1_i_15_n_0;
  wire pre_byt_cnt1_i_16_n_0;
  wire pre_byt_cnt1_i_17_n_0;
  wire pre_byt_cnt1_i_18_n_0;
  wire pre_byt_cnt1_i_19_n_0;
  wire pre_byt_cnt1_i_2_n_0;
  wire pre_byt_cnt1_i_4_n_0;
  wire pre_byt_cnt1_i_5_n_0;
  wire pre_byt_cnt1_i_7_n_0;
  wire pre_byt_cnt1_i_9_n_0;
  wire pre_byt_cnt1_reg_i_3_n_0;
  wire pre_byt_cnt1_reg_i_3_n_1;
  wire pre_byt_cnt1_reg_i_3_n_2;
  wire pre_byt_cnt1_reg_i_3_n_3;
  wire pre_byt_cnt1_reg_i_3_n_5;
  wire pre_byt_cnt1_reg_i_3_n_6;
  wire pre_byt_cnt1_reg_i_3_n_7;
  wire pre_byt_cnt1_reg_n_0;
  wire pre_byt_cnt2;
  wire pre_byt_cnt22186_in;
  wire pre_byt_cnt2_i_10_n_0;
  wire pre_byt_cnt2_i_11_n_0;
  wire pre_byt_cnt2_i_12_n_0;
  wire pre_byt_cnt2_i_13_n_0;
  wire pre_byt_cnt2_i_14_n_0;
  wire pre_byt_cnt2_i_15_n_0;
  wire pre_byt_cnt2_i_16_n_0;
  wire pre_byt_cnt2_i_17_n_0;
  wire pre_byt_cnt2_i_1_n_0;
  wire pre_byt_cnt2_i_3_n_0;
  wire pre_byt_cnt2_i_4_n_0;
  wire pre_byt_cnt2_i_6_n_0;
  wire pre_byt_cnt2_i_8_n_0;
  wire pre_byt_cnt2_reg_i_2_n_1;
  wire pre_byt_cnt2_reg_i_2_n_2;
  wire pre_byt_cnt2_reg_i_2_n_3;
  wire pre_byt_cnt2_reg_i_2_n_5;
  wire pre_byt_cnt2_reg_i_2_n_6;
  wire pre_byt_cnt2_reg_i_2_n_7;
  wire pre_byt_cnt2_reg_n_0;
  wire ram_full_i_reg;
  wire short_pkt;
  wire short_pkt_reg;
  wire short_pkt_reg_0;
  wire [0:0]src_in;
  wire \syncstages_ff_reg[1] ;
  wire wc_err;
  wire wc_gt_pload;
  wire wc_gt_pload0;
  wire wr_en;
  wire [3:3]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_CO_UNCONNECTED ;
  wire [7:5]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_DI_UNCONNECTED ;
  wire [7:5]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_O_UNCONNECTED ;
  wire [7:5]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_S_UNCONNECTED ;
  wire [3:3]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_CO_UNCONNECTED ;
  wire [3:3]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_CO_UNCONNECTED ;
  wire [7:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_O_UNCONNECTED ;
  wire [3:3]NLW_pre_byt_cnt1_reg_i_3_CO_UNCONNECTED;
  wire [7:0]NLW_pre_byt_cnt1_reg_i_3_O_UNCONNECTED;
  wire [3:3]NLW_pre_byt_cnt2_reg_i_2_CO_UNCONNECTED;
  wire [7:0]NLW_pre_byt_cnt2_reg_i_2_O_UNCONNECTED;

  LUT6 #(
    .INIT(64'hAAAAA8AA00020002)) 
    \ERR_FRAME_SYNC[0].fe_hunt[0]_i_1 
       (.I0(\syncstages_ff_reg[1] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .O(p_9_out));
  FDRE \ERR_FRAME_SYNC[0].fe_hunt_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_9_out),
        .Q(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hCFCFCF8FCFCFCFFF)) 
    \ERR_FRAME_SYNC[0].fs_hunt[0]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .I2(\syncstages_ff_reg[1] ),
        .I3(mem_vc[0]),
        .I4(mem_vc[1]),
        .I5(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .O(p_13_out));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'hFFEFFFFF)) 
    \ERR_FRAME_SYNC[0].fs_hunt[0]_i_2 
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(p_0_in[3]),
        .I3(p_0_in[0]),
        .I4(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .O(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'hFFFFFF7F)) 
    \ERR_FRAME_SYNC[0].fs_hunt[0]_i_3 
       (.I0(p_0_in[0]),
        .I1(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I2(p_0_in[3]),
        .I3(p_0_in[2]),
        .I4(p_0_in[1]),
        .O(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ));
  FDRE \ERR_FRAME_SYNC[0].fs_hunt_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_13_out),
        .Q(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAA2AA00080008)) 
    \ERR_FRAME_SYNC[1].fe_hunt[1]_i_1 
       (.I0(\syncstages_ff_reg[1] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(p_1_in177_in),
        .O(p_6_out));
  FDRE \ERR_FRAME_SYNC[1].fe_hunt_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_6_out),
        .Q(p_1_in177_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hCFCF8FCFCFCFFFCF)) 
    \ERR_FRAME_SYNC[1].fs_hunt[1]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(p_0_in93_in),
        .I2(\syncstages_ff_reg[1] ),
        .I3(mem_vc[0]),
        .I4(mem_vc[1]),
        .I5(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .O(p_8_out));
  FDRE \ERR_FRAME_SYNC[1].fs_hunt_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_8_out),
        .Q(p_0_in93_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFF7040400000000)) 
    \ERR_FRAME_SYNC[2].fe_hunt[2]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I4(p_3_in178_in),
        .I5(\syncstages_ff_reg[1] ),
        .O(p_3_out));
  FDRE \ERR_FRAME_SYNC[2].fe_hunt_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(p_3_in178_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hDDDDD5FFDDDDDDDD)) 
    \ERR_FRAME_SYNC[2].fs_hunt[2]_i_1 
       (.I0(\syncstages_ff_reg[1] ),
        .I1(p_0_in94_in),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(p_5_out));
  FDRE \ERR_FRAME_SYNC[2].fs_hunt_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_5_out),
        .Q(p_0_in94_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAA2AAA00800080)) 
    \ERR_FRAME_SYNC[3].fe_hunt[3]_i_1 
       (.I0(\syncstages_ff_reg[1] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .O(p_0_out));
  FDRE \ERR_FRAME_SYNC[3].fe_hunt_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_out),
        .Q(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8FCFCFCFFFCFCFCF)) 
    \ERR_FRAME_SYNC[3].fs_hunt[3]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(p_0_in95_in),
        .I2(\syncstages_ff_reg[1] ),
        .I3(mem_vc[0]),
        .I4(mem_vc[1]),
        .I5(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .O(p_2_out));
  FDRE \ERR_FRAME_SYNC[3].fs_hunt_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(p_0_in95_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0004000F00040004)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_2 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .O(fsfe_errframesync[0]));
  LUT6 #(
    .INIT(64'h004000F000400040)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_2 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(p_1_in177_in),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(p_0_in93_in),
        .O(fsfe_errframesync[1]));
  LUT6 #(
    .INIT(64'h004000F000400040)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_2 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(p_3_in178_in),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(p_0_in94_in),
        .O(fsfe_errframesync[2]));
  LUT6 #(
    .INIT(64'h4000F00040004000)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_2 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I5(p_0_in95_in),
        .O(fsfe_errframesync[3]));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(core_men_r2c),
        .I4(m_axis_aresetn),
        .I5(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .O(p_25_out));
  FDRE \FRAME_RCVD_GEN[0].frame_rcvd_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_25_out),
        .Q(\FRAME_RCVD_GEN[0].frame_rcvd_i_reg ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \FRAME_RCVD_GEN[1].frame_rcvd_i[1]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(core_men_r2c),
        .I4(m_axis_aresetn),
        .I5(p_0_in93_in),
        .O(\FRAME_RCVD_GEN[1].frame_rcvd_i[1]_i_1_n_0 ));
  FDRE \FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FRAME_RCVD_GEN[1].frame_rcvd_i[1]_i_1_n_0 ),
        .Q(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000004000000000)) 
    \FRAME_RCVD_GEN[2].frame_rcvd_i[2]_i_1 
       (.I0(p_0_in94_in),
        .I1(core_men_r2c),
        .I2(m_axis_aresetn),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(\FRAME_RCVD_GEN[2].frame_rcvd_i[2]_i_1_n_0 ));
  FDRE \FRAME_RCVD_GEN[2].frame_rcvd_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FRAME_RCVD_GEN[2].frame_rcvd_i[2]_i_1_n_0 ),
        .Q(\FRAME_RCVD_GEN[2].frame_rcvd_i_reg ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \FRAME_RCVD_GEN[3].frame_rcvd_i[3]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_3_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(core_men_r2c),
        .I4(m_axis_aresetn),
        .I5(p_0_in95_in),
        .O(p_10_out));
  FDRE \FRAME_RCVD_GEN[3].frame_rcvd_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_10_out),
        .Q(\FRAME_RCVD_GEN[3].frame_rcvd_i_reg ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h02020200)) 
    \FSM_sequential_cur_state[2]_i_3 
       (.I0(data_done),
        .I1(out),
        .I2(wc_gt_pload),
        .I3(Q[4]),
        .I4(Q[5]),
        .O(\FSM_sequential_cur_state_reg[2] ));
  LUT4 #(
    .INIT(16'h8000)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2 
       (.I0(data_wip_reg),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h3330333033301111)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4 
       (.I0(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I1(wc_gt_pload),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_6_n_0 ),
        .I3(diwc_corrected_zero),
        .I4(\data_type_reg_reg[5] [1]),
        .I5(\data_type_reg_reg[5] [0]),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_5 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [0]),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0155)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_6 
       (.I0(core_men_f),
        .I1(pkt_valid_d1),
        .I2(pkt_valid),
        .I3(pre_byt_cnt2_reg_n_0),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_6_n_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[10] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_8 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [7]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_15 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [8]),
        .R(clear));
  CARRY8 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ),
        .CI_TOP(1'b0),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_3 ,\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_CO_UNCONNECTED [3],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_8 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_9 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_10 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_11 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_12 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_13 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_14 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_15 }),
        .S({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18:16],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [12:8]}));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[12] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_14 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [9]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[13] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_13 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [10]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[14] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_12 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [11]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_11 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [12]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[16] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_10 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [16]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[17] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_9 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [17]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_8 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_15 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [19]),
        .R(clear));
  CARRY8 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_3 ,\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_CO_UNCONNECTED [3],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_8 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_9 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_10 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_11 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_12 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_13 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_14 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_15 }),
        .S(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26:19]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[20] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_14 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [20]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[21] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_13 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [21]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[22] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_12 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [22]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_11 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [23]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[24] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_10 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [24]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[25] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_9 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [25]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[26] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_8 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_15 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [27]),
        .R(clear));
  CARRY8 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_CO_UNCONNECTED [7:3],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_7 }),
        .DI({\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_DI_UNCONNECTED [7:5],1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_O_UNCONNECTED [7:5],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_11 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_12 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_13 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_14 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_15 }),
        .S({\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_S_UNCONNECTED [7:5],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31:27]}));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[28] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_14 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [28]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[29] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_13 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [29]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[30] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_12 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [30]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_11 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_15 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [0]),
        .R(clear));
  CARRY8 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_3 ,\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_CO_UNCONNECTED [3],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_8 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_9 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_10 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_11 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_12 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_13 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_14 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_15 }),
        .S({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [7:1],\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_5_n_0 }));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[4] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_14 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [1]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[5] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_13 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [2]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[6] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_12 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [3]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_11 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [4]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[8] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_10 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [5]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[9] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_9 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [6]),
        .R(clear));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[0]),
        .Q(mem_data_l32_d[0]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[10]),
        .Q(mem_data_l32_d[10]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[11]),
        .Q(mem_data_l32_d[11]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[12]),
        .Q(mem_data_l32_d[12]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[13]),
        .Q(mem_data_l32_d[13]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[14]),
        .Q(mem_data_l32_d[14]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[15]),
        .Q(mem_data_l32_d[15]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[16]),
        .Q(mem_data_l32_d[16]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[17]),
        .Q(mem_data_l32_d[17]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[18]),
        .Q(mem_data_l32_d[18]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[19]),
        .Q(mem_data_l32_d[19]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[1]),
        .Q(mem_data_l32_d[1]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[20]),
        .Q(mem_data_l32_d[20]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[21]),
        .Q(mem_data_l32_d[21]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[22]),
        .Q(mem_data_l32_d[22]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[23]),
        .Q(mem_data_l32_d[23]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[24]),
        .Q(mem_data_l32_d[24]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[25]),
        .Q(mem_data_l32_d[25]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[26]),
        .Q(mem_data_l32_d[26]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[27]),
        .Q(mem_data_l32_d[27]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[28]),
        .Q(mem_data_l32_d[28]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[29]),
        .Q(mem_data_l32_d[29]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[2]),
        .Q(mem_data_l32_d[2]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[30]),
        .Q(mem_data_l32_d[30]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[31]),
        .Q(mem_data_l32_d[31]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[3]),
        .Q(mem_data_l32_d[3]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[4]),
        .Q(mem_data_l32_d[4]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[5]),
        .Q(mem_data_l32_d[5]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[6]),
        .Q(mem_data_l32_d[6]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[7]),
        .Q(mem_data_l32_d[7]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[8]),
        .Q(mem_data_l32_d[8]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[9]),
        .Q(mem_data_l32_d[9]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [0]),
        .Q(mem_data_l32[0]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[10] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [10]),
        .Q(mem_data_l32[10]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[11] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [11]),
        .Q(mem_data_l32[11]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[12] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [12]),
        .Q(mem_data_l32[12]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[13] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [13]),
        .Q(mem_data_l32[13]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[14] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [14]),
        .Q(mem_data_l32[14]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[15] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [15]),
        .Q(mem_data_l32[15]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[16] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [16]),
        .Q(mem_data_l32[16]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[17] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [17]),
        .Q(mem_data_l32[17]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[18] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [18]),
        .Q(mem_data_l32[18]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[19] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [19]),
        .Q(mem_data_l32[19]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [1]),
        .Q(mem_data_l32[1]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[20] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [20]),
        .Q(mem_data_l32[20]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[21] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [21]),
        .Q(mem_data_l32[21]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[22] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [22]),
        .Q(mem_data_l32[22]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[23] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [23]),
        .Q(mem_data_l32[23]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[24] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [24]),
        .Q(mem_data_l32[24]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[25] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [25]),
        .Q(mem_data_l32[25]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[26] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [26]),
        .Q(mem_data_l32[26]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[27] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [27]),
        .Q(mem_data_l32[27]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[28] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [28]),
        .Q(mem_data_l32[28]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[29] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [29]),
        .Q(mem_data_l32[29]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [2]),
        .Q(mem_data_l32[2]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[30] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [30]),
        .Q(mem_data_l32[30]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[31] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [31]),
        .Q(mem_data_l32[31]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [3]),
        .Q(mem_data_l32[3]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [4]),
        .Q(mem_data_l32[4]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [5]),
        .Q(mem_data_l32[5]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [6]),
        .Q(mem_data_l32[6]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [7]),
        .Q(mem_data_l32[7]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[8] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [8]),
        .Q(mem_data_l32[8]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[9] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_0),
        .D(\gpr1.dout_i_reg[7] [9]),
        .Q(mem_data_l32[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[0]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[0]),
        .I3(mem_data_l32[0]),
        .I4(mem_data_l32_d[0]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[10]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[10]),
        .I3(mem_data_l32[10]),
        .I4(mem_data_l32_d[10]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[11]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[11]),
        .I3(mem_data_l32[11]),
        .I4(mem_data_l32_d[11]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[12]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[12]),
        .I3(mem_data_l32_d[12]),
        .I4(short_pkt_reg),
        .I5(Q[12]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[13]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[13]),
        .I3(mem_data_l32_d[13]),
        .I4(short_pkt_reg),
        .I5(Q[13]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[14]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[14]),
        .I3(mem_data_l32_d[14]),
        .I4(short_pkt_reg),
        .I5(Q[14]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[15]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[15]),
        .I3(mem_data_l32_d[15]),
        .I4(short_pkt_reg),
        .I5(Q[15]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[16]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[16]),
        .I3(mem_data_l32[16]),
        .I4(mem_data_l32_d[16]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[17]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[17]),
        .I3(mem_data_l32[17]),
        .I4(mem_data_l32_d[17]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[18]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[18]),
        .I3(mem_data_l32[18]),
        .I4(mem_data_l32_d[18]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[19]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[19]),
        .I3(mem_data_l32[19]),
        .I4(mem_data_l32_d[19]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[1]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[1]),
        .I3(mem_data_l32[1]),
        .I4(mem_data_l32_d[1]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[20]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[20]),
        .I3(mem_data_l32[20]),
        .I4(mem_data_l32_d[20]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[21]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[21]),
        .I3(mem_data_l32_d[21]),
        .I4(short_pkt_reg),
        .I5(Q[21]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[22]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[22]),
        .I3(mem_data_l32[22]),
        .I4(mem_data_l32_d[22]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[23]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[23]),
        .I3(mem_data_l32_d[23]),
        .I4(short_pkt_reg),
        .I5(Q[23]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[24]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[24]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[24]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[25]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[25]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[25]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[26]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[26]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[26]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[27]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[27]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[27]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[28]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[28]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[28]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[29]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[29]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[29]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[2]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[2]),
        .I3(mem_data_l32[2]),
        .I4(mem_data_l32_d[2]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[30]_i_1 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[30]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[30]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hBA00FFFF)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_1 
       (.I0(pkt_valid),
        .I1(data_wip_reg),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I4(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_10 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [20]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [21]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_11 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [19]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_12 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [16]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [17]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_13 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [12]),
        .I1(Q[23]),
        .I2(Q[22]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [11]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [5]));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_14 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [10]),
        .I1(Q[21]),
        .I2(Q[20]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [9]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [4]));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_15 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [8]),
        .I1(Q[19]),
        .I2(Q[18]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [7]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [3]));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_16 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [6]),
        .I1(Q[17]),
        .I2(Q[16]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [5]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [2]));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_17 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [4]),
        .I1(Q[15]),
        .I2(Q[14]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [3]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [1]));
  LUT4 #(
    .INIT(16'h44D4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_18 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [2]),
        .I1(Q[13]),
        .I2(Q[12]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18]_0 [1]),
        .O(\LINE_BUF_WR_64.str_fwd_reg_0 [0]));
  LUT5 #(
    .INIT(32'hA8880888)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_2 
       (.I0(short_pkt_reg),
        .I1(mem_data_l32_d[31]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I3(pkt_valid),
        .I4(mem_data_l32[31]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_5 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [30]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_6 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [28]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [29]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_7 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [27]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_8 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [24]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [25]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_9 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [22]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [23]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[3]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[3]),
        .I3(mem_data_l32[3]),
        .I4(mem_data_l32_d[3]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[4]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[4]),
        .I3(mem_data_l32[4]),
        .I4(mem_data_l32_d[4]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[5]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[5]),
        .I3(mem_data_l32[5]),
        .I4(mem_data_l32_d[5]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCC0C0C044404440)) 
    \LINE_BUF_WR_64.mem_wdata_i[64]_i_1 
       (.I0(end_mem_wr2),
        .I1(m_axis_aresetn),
        .I2(short_pkt_reg_0),
        .I3(end_mem_wr1),
        .I4(wc_gt_pload),
        .I5(core_men_r2c),
        .O(\LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_2 
       (.I0(end_mem_wr1),
        .I1(wc_gt_pload),
        .I2(core_men_r2c),
        .O(\LINE_BUF_WR_64.mem_wen_i_reg_0 ));
  LUT6 #(
    .INIT(64'h0000000040440000)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wen_i_reg_0 ),
        .I1(m_axis_aresetn),
        .I2(core_men_r2c),
        .I3(end_mem_wr2),
        .I4(long_pkt_out_reg),
        .I5(short_pkt),
        .O(\LINE_BUF_WR_64.mem_wdata_i[66]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000070007500)) 
    \LINE_BUF_WR_64.mem_wdata_i[67]_i_1 
       (.I0(end_mem_wr1),
        .I1(wc_gt_pload),
        .I2(core_men_r2c),
        .I3(m_axis_aresetn),
        .I4(end_mem_wr2),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[6]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[6]),
        .I3(mem_data_l32[6]),
        .I4(mem_data_l32_d[6]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[7]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[7]),
        .I3(mem_data_l32[7]),
        .I4(mem_data_l32_d[7]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF778800F0F0F0F0)) 
    \LINE_BUF_WR_64.mem_wdata_i[8]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(Q[8]),
        .I3(mem_data_l32[8]),
        .I4(mem_data_l32_d[8]),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF780FFFFF7800000)) 
    \LINE_BUF_WR_64.mem_wdata_i[9]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(mem_data_l32[9]),
        .I3(mem_data_l32_d[9]),
        .I4(short_pkt_reg),
        .I5(Q[9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[10] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [10]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[11] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [11]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[12] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [12]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[13] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [13]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[14] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [14]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[15] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [15]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[16] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [16]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[17] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [17]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[18] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [18]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[19] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [19]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[20] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [20]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[21] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [21]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[22] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [22]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[23] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [23]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[24] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [24]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[25] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [25]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[26] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [26]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[27] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [27]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[28] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [28]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[29] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [29]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[30] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [30]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[31] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [31]),
        .R(SR));
  CARRY8 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3 
       (.CI(CO),
        .CI_TOP(1'b0),
        .CO({\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_3 ,\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_CO_UNCONNECTED [3],\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_5 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_6 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_O_UNCONNECTED [7:0]),
        .S({\LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_9_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 }));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[32] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [0]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[33] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [1]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[34] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [2]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[35] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [3]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[36] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [4]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[37] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [5]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[38] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [6]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[39] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [7]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[40] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [8]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[41] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [9]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[42] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [10]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[43] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [11]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[44] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [12]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[45] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [13]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[46] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [14]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[47] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [15]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[48] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [16]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[49] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [17]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[50] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [18]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[51] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [19]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[52] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [20]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[53] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [21]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[54] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [22]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[55] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [23]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[56] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [24]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[57] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [25]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[58] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [26]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[59] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [27]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[60] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [28]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[61] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [29]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[62] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [30]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[63] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [31]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[64] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ),
        .Q(p_0_in[0]),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[65] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(end_mem_wr2_reg_0),
        .Q(p_0_in[1]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[66] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[66]_i_1_n_0 ),
        .Q(p_0_in[2]),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[67] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ),
        .Q(p_0_in[3]),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ),
        .Q(mem_vc[0]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ),
        .Q(mem_vc[1]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[8] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [8]),
        .R(SR));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[9] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [9]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFEFEEFFFFFFFF)) 
    \LINE_BUF_WR_64.mem_wen_i_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2_n_0 ),
        .I2(core_men_r2c),
        .I3(end_mem_wr2),
        .I4(\LINE_BUF_WR_64.mem_wen_i_reg_0 ),
        .I5(short_pkt_reg),
        .O(\LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \LINE_BUF_WR_64.mem_wen_i_i_2 
       (.I0(data_wip_reg),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .O(\LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ));
  FDRE \LINE_BUF_WR_64.mem_wen_i_reg 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ),
        .Q(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'h8888008800008000)) 
    \LINE_BUF_WR_64.str_fwd_i_1 
       (.I0(\LINE_BUF_WR_64.str_fwd_i_2_n_0 ),
        .I1(\LINE_BUF_WR_64.str_fwd_i_3_n_0 ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ),
        .I4(pkt_rdvld_reg),
        .I5(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .O(\LINE_BUF_WR_64.str_fwd_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \LINE_BUF_WR_64.str_fwd_i_2 
       (.I0(short_pkt_reg),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I3(data_wip_reg),
        .O(\LINE_BUF_WR_64.str_fwd_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h00C0C4C4)) 
    \LINE_BUF_WR_64.str_fwd_i_3 
       (.I0(end_mem_wr2),
        .I1(m_axis_aresetn),
        .I2(core_men_r2c),
        .I3(wc_gt_pload),
        .I4(end_mem_wr1),
        .O(\LINE_BUF_WR_64.str_fwd_i_3_n_0 ));
  FDRE \LINE_BUF_WR_64.str_fwd_reg 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.str_fwd_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_0 ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[0].lp_count_en[0]_i_1 
       (.I0(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .I1(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .O(p_151_out));
  FDRE \LP_CNTS[0].lp_count_en_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_151_out),
        .Q(lp_count_en[0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0E02000002020000)) 
    \LP_CNTS[0].lp_data[0]_i_1 
       (.I0(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .I1(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .I2(full),
        .I3(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I4(\syncstages_ff_reg[1] ),
        .I5(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .O(p_20_out));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \LP_CNTS[0].lp_data[0]_i_2 
       (.I0(p_0_in[3]),
        .I1(p_0_in[1]),
        .I2(p_0_in[2]),
        .O(\LP_CNTS[0].lp_data[0]_i_2_n_0 ));
  FDRE \LP_CNTS[0].lp_data_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_20_out),
        .Q(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h4444444F)) 
    \LP_CNTS[0].lp_header[0]_i_2 
       (.I0(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I1(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .I2(\LP_CNTS[0].lp_header[0]_i_4_n_0 ),
        .I3(mem_vc[1]),
        .I4(mem_vc[0]),
        .O(\LP_CNTS[0].lp_header[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \LP_CNTS[0].lp_header[0]_i_3 
       (.I0(p_0_in132_in),
        .I1(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .I2(p_0_in96_in),
        .I3(p_0_in115_in),
        .O(\LP_CNTS[0].lp_header[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFEFFFFFFFFFFF)) 
    \LP_CNTS[0].lp_header[0]_i_4 
       (.I0(\LP_CNTS[0].lp_header[0]_i_5_n_0 ),
        .I1(p_0_in[1]),
        .I2(p_0_in[2]),
        .I3(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I4(p_0_in[0]),
        .I5(p_0_in[3]),
        .O(\LP_CNTS[0].lp_header[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    \LP_CNTS[0].lp_header[0]_i_5 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .I5(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .O(\LP_CNTS[0].lp_header[0]_i_5_n_0 ));
  FDRE \LP_CNTS[0].lp_header_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[0].lp_header[0]_i_2_n_0 ),
        .Q(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .R(ram_full_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[1].lp_count_en[1]_i_1 
       (.I0(p_0_in132_in),
        .I1(p_1_in133_in),
        .O(p_134_out));
  FDRE \LP_CNTS[1].lp_count_en_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_134_out),
        .Q(lp_count_en[1]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0E02000002020000)) 
    \LP_CNTS[1].lp_data[1]_i_1 
       (.I0(p_0_in132_in),
        .I1(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .I2(full),
        .I3(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I4(\syncstages_ff_reg[1] ),
        .I5(p_1_in133_in),
        .O(p_18_out));
  FDRE \LP_CNTS[1].lp_data_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_18_out),
        .Q(p_0_in132_in),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h44444F44)) 
    \LP_CNTS[1].lp_header[1]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I1(p_1_in133_in),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(\LP_CNTS[0].lp_header[0]_i_4_n_0 ),
        .O(\LP_CNTS[1].lp_header[1]_i_1_n_0 ));
  FDRE \LP_CNTS[1].lp_header_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[1].lp_header[1]_i_1_n_0 ),
        .Q(p_1_in133_in),
        .R(ram_full_i_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[2].lp_count_en[2]_i_1 
       (.I0(p_1_in116_in),
        .I1(p_0_in115_in),
        .O(p_117_out));
  FDRE \LP_CNTS[2].lp_count_en_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_117_out),
        .Q(lp_count_en[2]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0E02000002020000)) 
    \LP_CNTS[2].lp_data[2]_i_1 
       (.I0(p_0_in115_in),
        .I1(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .I2(full),
        .I3(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I4(\syncstages_ff_reg[1] ),
        .I5(p_1_in116_in),
        .O(p_16_out));
  FDRE \LP_CNTS[2].lp_data_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_16_out),
        .Q(p_0_in115_in),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h44444F44)) 
    \LP_CNTS[2].lp_header[2]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I1(p_1_in116_in),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\LP_CNTS[0].lp_header[0]_i_4_n_0 ),
        .O(\LP_CNTS[2].lp_header[2]_i_1_n_0 ));
  FDRE \LP_CNTS[2].lp_header_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[2].lp_header[2]_i_1_n_0 ),
        .Q(p_1_in116_in),
        .R(ram_full_i_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[3].lp_count_en[3]_i_1 
       (.I0(p_0_in96_in),
        .I1(p_1_in97_in),
        .O(p_98_out));
  FDRE \LP_CNTS[3].lp_count_en_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_98_out),
        .Q(lp_count_en[3]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0E02000002020000)) 
    \LP_CNTS[3].lp_data[3]_i_1 
       (.I0(p_0_in96_in),
        .I1(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .I2(full),
        .I3(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I4(\syncstages_ff_reg[1] ),
        .I5(p_1_in97_in),
        .O(p_14_out));
  FDRE \LP_CNTS[3].lp_data_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_14_out),
        .Q(p_0_in96_in),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h4444F444)) 
    \LP_CNTS[3].lp_header[3]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I1(p_1_in97_in),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(\LP_CNTS[0].lp_header[0]_i_4_n_0 ),
        .O(\LP_CNTS[3].lp_header[3]_i_1_n_0 ));
  FDRE \LP_CNTS[3].lp_header_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[3].lp_header[3]_i_1_n_0 ),
        .Q(p_1_in97_in),
        .R(ram_full_i_reg));
  LUT4 #(
    .INIT(16'h4404)) 
    core_men_f_i_1
       (.I0(data_done),
        .I1(m_axis_aresetn),
        .I2(core_men_r2c),
        .I3(core_men_f),
        .O(core_men_f_i_1_n_0));
  FDRE core_men_f_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(core_men_f_i_1_n_0),
        .Q(core_men_f),
        .R(1'b0));
  FDRE \crc_blk_sel_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0]_0 ),
        .Q(crc_blk_sel[0]),
        .R(SR));
  FDRE \crc_blk_sel_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1]_1 ),
        .Q(crc_blk_sel[1]),
        .R(SR));
  FDRE \crc_blk_sel_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1]_0 ),
        .Q(crc_blk_sel[2]),
        .R(SR));
  FDRE \crc_blk_sel_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0] ),
        .Q(crc_blk_sel[3]),
        .R(SR));
  FDRE \crc_p_strb_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1] [0]),
        .Q(crc_p_strb[0]),
        .R(SR));
  FDRE \crc_p_strb_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1] [1]),
        .Q(crc_p_strb[1]),
        .R(SR));
  FDRE \crc_p_value_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [0]),
        .Q(crc_p_value[0]),
        .R(SR));
  FDRE \crc_p_value_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [10]),
        .Q(crc_p_value[10]),
        .R(SR));
  FDRE \crc_p_value_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [11]),
        .Q(crc_p_value[11]),
        .R(SR));
  FDRE \crc_p_value_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [12]),
        .Q(crc_p_value[12]),
        .R(SR));
  FDRE \crc_p_value_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [13]),
        .Q(crc_p_value[13]),
        .R(SR));
  FDRE \crc_p_value_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [14]),
        .Q(crc_p_value[14]),
        .R(SR));
  FDRE \crc_p_value_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [15]),
        .Q(crc_p_value[15]),
        .R(SR));
  FDRE \crc_p_value_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [1]),
        .Q(crc_p_value[1]),
        .R(SR));
  FDRE \crc_p_value_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [2]),
        .Q(crc_p_value[2]),
        .R(SR));
  FDRE \crc_p_value_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [3]),
        .Q(crc_p_value[3]),
        .R(SR));
  FDRE \crc_p_value_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [4]),
        .Q(crc_p_value[4]),
        .R(SR));
  FDRE \crc_p_value_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [5]),
        .Q(crc_p_value[5]),
        .R(SR));
  FDRE \crc_p_value_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [6]),
        .Q(crc_p_value[6]),
        .R(SR));
  FDRE \crc_p_value_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [7]),
        .Q(crc_p_value[7]),
        .R(SR));
  FDRE \crc_p_value_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [8]),
        .Q(crc_p_value[8]),
        .R(SR));
  FDRE \crc_p_value_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[27] [9]),
        .Q(crc_p_value[9]),
        .R(SR));
  FDRE crc_partial_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_partial0),
        .Q(crc_partial),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \cur_byte_cnt[10]_i_2 
       (.I0(cur_byte_cnt[10]),
        .I1(cur_byte_cnt[9]),
        .I2(\cur_byte_cnt[9]_i_2_n_0 ),
        .I3(cur_byte_cnt[8]),
        .O(\cur_byte_cnt_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'h55955555)) 
    \cur_byte_cnt[11]_i_2 
       (.I0(cur_byte_cnt[11]),
        .I1(cur_byte_cnt[10]),
        .I2(cur_byte_cnt[8]),
        .I3(\cur_byte_cnt[9]_i_2_n_0 ),
        .I4(cur_byte_cnt[9]),
        .O(\cur_byte_cnt_reg[11]_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \cur_byte_cnt[12]_i_2 
       (.I0(cur_byte_cnt[12]),
        .I1(cur_byte_cnt[10]),
        .I2(cur_byte_cnt[8]),
        .I3(\cur_byte_cnt[9]_i_2_n_0 ),
        .I4(cur_byte_cnt[9]),
        .I5(cur_byte_cnt[11]),
        .O(\cur_byte_cnt_reg[12]_0 ));
  LUT5 #(
    .INIT(32'h0099F0F0)) 
    \cur_byte_cnt[13]_i_1 
       (.I0(cur_byte_cnt[13]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(\byt_cnt_adj_reg[15] [13]),
        .I3(ecc_start_d1),
        .I4(core_men_r2c),
        .O(p_2_in[13]));
  LUT6 #(
    .INIT(64'h00009A9AFF00FF00)) 
    \cur_byte_cnt[14]_i_1 
       (.I0(cur_byte_cnt[14]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(cur_byte_cnt[13]),
        .I3(\byt_cnt_adj_reg[15] [14]),
        .I4(ecc_start_d1),
        .I5(core_men_r2c),
        .O(p_2_in[14]));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \cur_byte_cnt[14]_i_2 
       (.I0(cur_byte_cnt[11]),
        .I1(cur_byte_cnt[9]),
        .I2(\cur_byte_cnt[9]_i_2_n_0 ),
        .I3(cur_byte_cnt[8]),
        .I4(cur_byte_cnt[10]),
        .I5(cur_byte_cnt[12]),
        .O(\cur_byte_cnt[14]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \cur_byte_cnt[15]_i_1 
       (.I0(data_done),
        .I1(m_axis_aresetn),
        .O(\cur_byte_cnt[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF8F)) 
    \cur_byte_cnt[15]_i_2 
       (.I0(fsm_wip_reg),
        .I1(pkt_valid),
        .I2(core_men_r2c),
        .I3(ecc_start_d1),
        .O(\cur_byte_cnt[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCCFCCCFCCCFEEEE)) 
    \cur_byte_cnt[15]_i_4 
       (.I0(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I1(wc_gt_pload),
        .I2(\cur_byte_cnt[15]_i_6_n_0 ),
        .I3(diwc_corrected_zero),
        .I4(\data_type_reg_reg[5] [1]),
        .I5(\data_type_reg_reg[5] [0]),
        .O(data_done));
  LUT4 #(
    .INIT(16'h5955)) 
    \cur_byte_cnt[15]_i_5 
       (.I0(cur_byte_cnt[15]),
        .I1(cur_byte_cnt[13]),
        .I2(\cur_byte_cnt[14]_i_2_n_0 ),
        .I3(cur_byte_cnt[14]),
        .O(\cur_byte_cnt_reg[15]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0155)) 
    \cur_byte_cnt[15]_i_6 
       (.I0(core_men_f),
        .I1(pkt_valid_d1),
        .I2(pkt_valid),
        .I3(pre_byt_cnt1_reg_n_0),
        .O(\cur_byte_cnt[15]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0A3A3A0A3A0A3A0A)) 
    \cur_byte_cnt[4]_i_1 
       (.I0(\byt_cnt_adj_reg[15] [4]),
        .I1(ecc_start_d1),
        .I2(core_men_r2c),
        .I3(cur_byte_cnt[4]),
        .I4(\cur_byte_cnt_reg[4]_0 [2]),
        .I5(\cur_byte_cnt_reg[4]_0 [3]),
        .O(p_2_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \cur_byte_cnt[5]_i_2 
       (.I0(cur_byte_cnt[5]),
        .I1(cur_byte_cnt[4]),
        .I2(\cur_byte_cnt_reg[4]_0 [3]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .O(\cur_byte_cnt_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \cur_byte_cnt[6]_i_2 
       (.I0(cur_byte_cnt[6]),
        .I1(cur_byte_cnt[5]),
        .I2(\cur_byte_cnt_reg[4]_0 [2]),
        .I3(\cur_byte_cnt_reg[4]_0 [3]),
        .I4(cur_byte_cnt[4]),
        .O(\cur_byte_cnt_reg[6]_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \cur_byte_cnt[7]_i_2 
       (.I0(cur_byte_cnt[7]),
        .I1(cur_byte_cnt[6]),
        .I2(cur_byte_cnt[4]),
        .I3(\cur_byte_cnt_reg[4]_0 [3]),
        .I4(\cur_byte_cnt_reg[4]_0 [2]),
        .I5(cur_byte_cnt[5]),
        .O(\cur_byte_cnt_reg[7]_0 ));
  LUT5 #(
    .INIT(32'h0099F0F0)) 
    \cur_byte_cnt[8]_i_1 
       (.I0(cur_byte_cnt[8]),
        .I1(\cur_byte_cnt[9]_i_2_n_0 ),
        .I2(\byt_cnt_adj_reg[15] [8]),
        .I3(ecc_start_d1),
        .I4(core_men_r2c),
        .O(p_2_in[8]));
  LUT6 #(
    .INIT(64'h0000A6A6FF00FF00)) 
    \cur_byte_cnt[9]_i_1 
       (.I0(cur_byte_cnt[9]),
        .I1(cur_byte_cnt[8]),
        .I2(\cur_byte_cnt[9]_i_2_n_0 ),
        .I3(\byt_cnt_adj_reg[15] [9]),
        .I4(ecc_start_d1),
        .I5(core_men_r2c),
        .O(p_2_in[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \cur_byte_cnt[9]_i_2 
       (.I0(cur_byte_cnt[6]),
        .I1(cur_byte_cnt[4]),
        .I2(\cur_byte_cnt_reg[4]_0 [3]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .I4(cur_byte_cnt[5]),
        .I5(cur_byte_cnt[7]),
        .O(\cur_byte_cnt[9]_i_2_n_0 ));
  FDRE \cur_byte_cnt_reg[0] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[0]),
        .Q(\cur_byte_cnt_reg[4]_0 [0]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[10] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[7]),
        .Q(cur_byte_cnt[10]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[11] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[8]),
        .Q(cur_byte_cnt[11]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[12] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[9]),
        .Q(cur_byte_cnt[12]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[13] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[13]),
        .Q(cur_byte_cnt[13]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[14] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[14]),
        .Q(cur_byte_cnt[14]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[15] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[10]),
        .Q(cur_byte_cnt[15]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[1] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[1]),
        .Q(\cur_byte_cnt_reg[4]_0 [1]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[2] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[2]),
        .Q(\cur_byte_cnt_reg[4]_0 [2]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[3] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[3]),
        .Q(\cur_byte_cnt_reg[4]_0 [3]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[4] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[4]),
        .Q(cur_byte_cnt[4]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[5] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[4]),
        .Q(cur_byte_cnt[5]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[6] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[5]),
        .Q(cur_byte_cnt[6]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[7] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(D[6]),
        .Q(cur_byte_cnt[7]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[8] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[8]),
        .Q(cur_byte_cnt[8]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[9] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[9]),
        .Q(cur_byte_cnt[9]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \data_p_strb[0]_i_1 
       (.I0(crc_p_strb[0]),
        .I1(crc_p_strb[1]),
        .O(\data_p_strb_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \data_p_strb[1]_i_1 
       (.I0(crc_partial),
        .I1(crc_start_d1),
        .O(E));
  LUT1 #(
    .INIT(2'h1)) 
    \data_p_strb[1]_i_2 
       (.I0(crc_p_strb[0]),
        .O(\data_p_strb_reg[1] [1]));
  LUT5 #(
    .INIT(32'h0000EF00)) 
    data_sdown_reg_i_1
       (.I0(data_shutdown),
        .I1(data_sdown_reg_i_2_n_0),
        .I2(end_mem_wr1),
        .I3(m_axis_aresetn),
        .I4(core_men_r2c),
        .O(data_sdown_reg_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    data_sdown_reg_i_2
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(p_0_in[0]),
        .I4(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .O(data_sdown_reg_i_2_n_0));
  FDRE data_sdown_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_sdown_reg_i_1_n_0),
        .Q(data_shutdown),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h8)) 
    data_wip_reg_i_6
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ),
        .I1(data_wip_reg),
        .O(crc_partial_reg_0));
  FDRE data_wip_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_wip),
        .Q(data_wip_reg),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h2)) 
    end_mem_wr1_i_1
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ),
        .I1(end_mem_wr1_i_2_n_0),
        .O(end_mem_wr1_i_1_n_0));
  LUT6 #(
    .INIT(64'h8800DFFFFFFFFFFF)) 
    end_mem_wr1_i_2
       (.I0(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .I1(p_0_in[0]),
        .I2(data_wip_reg),
        .I3(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .I4(end_mem_wr1),
        .I5(m_axis_aresetn),
        .O(end_mem_wr1_i_2_n_0));
  FDRE end_mem_wr1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(end_mem_wr1_i_1_n_0),
        .Q(end_mem_wr1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFEFE044400000000)) 
    end_mem_wr2_i_1
       (.I0(end_mem_wr2_i_2_n_0),
        .I1(p_0_in[3]),
        .I2(p_0_in[2]),
        .I3(p_0_in[1]),
        .I4(end_mem_wr2),
        .I5(m_axis_aresetn),
        .O(end_mem_wr2_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'hB)) 
    end_mem_wr2_i_2
       (.I0(p_0_in[0]),
        .I1(\LP_CNTS[3].lp_data_reg[3]_0 ),
        .O(end_mem_wr2_i_2_n_0));
  FDRE end_mem_wr2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(end_mem_wr2_i_1_n_0),
        .Q(end_mem_wr2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[0]_i_1 
       (.I0(crc_p_value[0]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [0]),
        .O(\exp_crc_i_reg[15] [0]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[10]_i_1 
       (.I0(crc_p_value[10]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [10]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [2]),
        .O(\exp_crc_i_reg[15] [10]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[11]_i_1 
       (.I0(crc_p_value[11]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [11]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [3]),
        .O(\exp_crc_i_reg[15] [11]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[12]_i_1 
       (.I0(crc_p_value[12]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [12]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [4]),
        .O(\exp_crc_i_reg[15] [12]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[13]_i_1 
       (.I0(crc_p_value[13]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [13]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [5]),
        .O(\exp_crc_i_reg[15] [13]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[14]_i_1 
       (.I0(crc_p_value[14]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [14]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [6]),
        .O(\exp_crc_i_reg[15] [14]));
  LUT6 #(
    .INIT(64'h5000500044450000)) 
    \exp_crc_i[15]_i_1 
       (.I0(crc_start_d1),
        .I1(\data_p_strb_reg[1]_0 [0]),
        .I2(crc_p_strb[1]),
        .I3(crc_p_strb[0]),
        .I4(pkt_valid_d1),
        .I5(crc_partial),
        .O(\exp_crc_i_reg[12] [1]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[15]_i_2 
       (.I0(crc_p_value[15]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [15]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [7]),
        .O(\exp_crc_i_reg[15] [15]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \exp_crc_i[15]_i_3 
       (.I0(crc_p_strb[0]),
        .I1(crc_p_strb[1]),
        .O(\exp_crc_i[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[1]_i_1 
       (.I0(crc_p_value[1]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [1]),
        .O(\exp_crc_i_reg[15] [1]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[2]_i_1 
       (.I0(crc_p_value[2]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [2]),
        .O(\exp_crc_i_reg[15] [2]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[3]_i_1 
       (.I0(crc_p_value[3]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [3]),
        .O(\exp_crc_i_reg[15] [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[4]_i_1 
       (.I0(crc_p_value[4]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [4]),
        .O(\exp_crc_i_reg[15] [4]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[5]_i_1 
       (.I0(crc_p_value[5]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [5]),
        .O(\exp_crc_i_reg[15] [5]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[6]_i_1 
       (.I0(crc_p_value[6]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [6]),
        .O(\exp_crc_i_reg[15] [6]));
  LUT2 #(
    .INIT(4'h2)) 
    \exp_crc_i[7]_i_1 
       (.I0(\exp_crc_i[7]_i_3_n_0 ),
        .I1(crc_start_d1),
        .O(\exp_crc_i_reg[12] [0]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[7]_i_2 
       (.I0(crc_p_value[7]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [7]),
        .O(\exp_crc_i_reg[15] [7]));
  LUT6 #(
    .INIT(64'hE4E4A0A4A0A4A0A4)) 
    \exp_crc_i[7]_i_3 
       (.I0(crc_partial),
        .I1(pkt_valid_d1),
        .I2(crc_p_strb[0]),
        .I3(crc_p_strb[1]),
        .I4(\data_p_strb_reg[1]_0 [0]),
        .I5(\data_p_strb_reg[1]_0 [1]),
        .O(\exp_crc_i[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[8]_i_1 
       (.I0(crc_p_value[8]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [8]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [0]),
        .O(\exp_crc_i_reg[15] [8]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[9]_i_1 
       (.I0(crc_p_value[9]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [9]),
        .I4(\data_p_strb_reg[1]_0 [1]),
        .I5(\c_data_reg[15] [1]),
        .O(\exp_crc_i_reg[15] [9]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    frame_rcvd
       (.I0(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i_reg ),
        .I2(\FRAME_RCVD_GEN[2].frame_rcvd_i_reg ),
        .I3(\FRAME_RCVD_GEN[3].frame_rcvd_i_reg ),
        .O(src_in));
  FDRE fsm_wip_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsm_wip_reg_reg_0),
        .Q(fsm_wip_reg),
        .R(SR));
  LUT5 #(
    .INIT(32'hCE000000)) 
    lbuf_blk_wen_i_i_1
       (.I0(lbuf_blk_wen_i),
        .I1(lbuf_rst_code),
        .I2(\data_type_reg_reg[1] ),
        .I3(m_axis_aresetn),
        .I4(core_men_r2c),
        .O(lbuf_blk_wen_i_i_1_n_0));
  LUT5 #(
    .INIT(32'h40000000)) 
    lbuf_blk_wen_i_i_2
       (.I0(din[64]),
        .I1(din[67]),
        .I2(din[65]),
        .I3(wr_en),
        .I4(din[66]),
        .O(lbuf_rst_code));
  FDRE lbuf_blk_wen_i_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(lbuf_blk_wen_i_i_1_n_0),
        .Q(lbuf_blk_wen_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \m_axis_tdata[63]_i_1 
       (.I0(m_axis_aresetn),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \mem_wdata[64]_i_1 
       (.I0(p_0_in[0]),
        .I1(m_axis_aresetn),
        .I2(mem_wdata2),
        .O(\mem_wdata[64]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \mem_wdata[65]_i_1 
       (.I0(p_0_in[1]),
        .I1(mem_wdata2),
        .O(\mem_wdata[65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \mem_wdata[66]_i_1 
       (.I0(p_0_in[2]),
        .I1(mem_wdata2),
        .O(\mem_wdata[66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \mem_wdata[67]_i_1 
       (.I0(p_0_in[3]),
        .I1(mem_wdata2),
        .O(\mem_wdata[67]_i_1_n_0 ));
  FDRE \mem_wdata_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .Q(din[0]),
        .R(SR));
  FDRE \mem_wdata_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [10]),
        .Q(din[10]),
        .R(SR));
  FDRE \mem_wdata_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [11]),
        .Q(din[11]),
        .R(SR));
  FDRE \mem_wdata_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [12]),
        .Q(din[12]),
        .R(SR));
  FDRE \mem_wdata_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [13]),
        .Q(din[13]),
        .R(SR));
  FDRE \mem_wdata_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [14]),
        .Q(din[14]),
        .R(SR));
  FDRE \mem_wdata_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [15]),
        .Q(din[15]),
        .R(SR));
  FDRE \mem_wdata_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [16]),
        .Q(din[16]),
        .R(SR));
  FDRE \mem_wdata_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [17]),
        .Q(din[17]),
        .R(SR));
  FDRE \mem_wdata_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [18]),
        .Q(din[18]),
        .R(SR));
  FDRE \mem_wdata_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [19]),
        .Q(din[19]),
        .R(SR));
  FDRE \mem_wdata_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .Q(din[1]),
        .R(SR));
  FDRE \mem_wdata_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [20]),
        .Q(din[20]),
        .R(SR));
  FDRE \mem_wdata_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [21]),
        .Q(din[21]),
        .R(SR));
  FDRE \mem_wdata_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [22]),
        .Q(din[22]),
        .R(SR));
  FDRE \mem_wdata_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [23]),
        .Q(din[23]),
        .R(SR));
  FDRE \mem_wdata_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [24]),
        .Q(din[24]),
        .R(SR));
  FDRE \mem_wdata_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [25]),
        .Q(din[25]),
        .R(SR));
  FDRE \mem_wdata_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [26]),
        .Q(din[26]),
        .R(SR));
  FDRE \mem_wdata_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [27]),
        .Q(din[27]),
        .R(SR));
  FDRE \mem_wdata_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [28]),
        .Q(din[28]),
        .R(SR));
  FDRE \mem_wdata_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [29]),
        .Q(din[29]),
        .R(SR));
  FDRE \mem_wdata_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .Q(din[2]),
        .R(SR));
  FDRE \mem_wdata_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [30]),
        .Q(din[30]),
        .R(SR));
  FDRE \mem_wdata_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [31]),
        .Q(din[31]),
        .R(SR));
  FDRE \mem_wdata_reg[32] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ),
        .Q(din[32]),
        .R(SR));
  FDRE \mem_wdata_reg[33] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ),
        .Q(din[33]),
        .R(SR));
  FDRE \mem_wdata_reg[34] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ),
        .Q(din[34]),
        .R(SR));
  FDRE \mem_wdata_reg[35] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ),
        .Q(din[35]),
        .R(SR));
  FDRE \mem_wdata_reg[36] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ),
        .Q(din[36]),
        .R(SR));
  FDRE \mem_wdata_reg[37] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ),
        .Q(din[37]),
        .R(SR));
  FDRE \mem_wdata_reg[38] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ),
        .Q(din[38]),
        .R(SR));
  FDRE \mem_wdata_reg[39] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ),
        .Q(din[39]),
        .R(SR));
  FDRE \mem_wdata_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .Q(din[3]),
        .R(SR));
  FDRE \mem_wdata_reg[40] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ),
        .Q(din[40]),
        .R(SR));
  FDRE \mem_wdata_reg[41] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ),
        .Q(din[41]),
        .R(SR));
  FDRE \mem_wdata_reg[42] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ),
        .Q(din[42]),
        .R(SR));
  FDRE \mem_wdata_reg[43] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ),
        .Q(din[43]),
        .R(SR));
  FDRE \mem_wdata_reg[44] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ),
        .Q(din[44]),
        .R(SR));
  FDRE \mem_wdata_reg[45] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ),
        .Q(din[45]),
        .R(SR));
  FDRE \mem_wdata_reg[46] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ),
        .Q(din[46]),
        .R(SR));
  FDRE \mem_wdata_reg[47] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ),
        .Q(din[47]),
        .R(SR));
  FDRE \mem_wdata_reg[48] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ),
        .Q(din[48]),
        .R(SR));
  FDRE \mem_wdata_reg[49] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ),
        .Q(din[49]),
        .R(SR));
  FDRE \mem_wdata_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .Q(din[4]),
        .R(SR));
  FDRE \mem_wdata_reg[50] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ),
        .Q(din[50]),
        .R(SR));
  FDRE \mem_wdata_reg[51] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ),
        .Q(din[51]),
        .R(SR));
  FDRE \mem_wdata_reg[52] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ),
        .Q(din[52]),
        .R(SR));
  FDRE \mem_wdata_reg[53] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ),
        .Q(din[53]),
        .R(SR));
  FDRE \mem_wdata_reg[54] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ),
        .Q(din[54]),
        .R(SR));
  FDRE \mem_wdata_reg[55] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ),
        .Q(din[55]),
        .R(SR));
  FDRE \mem_wdata_reg[56] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ),
        .Q(din[56]),
        .R(SR));
  FDRE \mem_wdata_reg[57] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ),
        .Q(din[57]),
        .R(SR));
  FDRE \mem_wdata_reg[58] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ),
        .Q(din[58]),
        .R(SR));
  FDRE \mem_wdata_reg[59] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ),
        .Q(din[59]),
        .R(SR));
  FDRE \mem_wdata_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .Q(din[5]),
        .R(SR));
  FDRE \mem_wdata_reg[60] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ),
        .Q(din[60]),
        .R(SR));
  FDRE \mem_wdata_reg[61] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ),
        .Q(din[61]),
        .R(SR));
  FDRE \mem_wdata_reg[62] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ),
        .Q(din[62]),
        .R(SR));
  FDRE \mem_wdata_reg[63] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ),
        .Q(din[63]),
        .R(SR));
  FDRE \mem_wdata_reg[64] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[64]_i_1_n_0 ),
        .Q(din[64]),
        .R(1'b0));
  FDRE \mem_wdata_reg[65] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[65]_i_1_n_0 ),
        .Q(din[65]),
        .R(SR));
  FDRE \mem_wdata_reg[66] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[66]_i_1_n_0 ),
        .Q(din[66]),
        .R(SR));
  FDRE \mem_wdata_reg[67] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[67]_i_1_n_0 ),
        .Q(din[67]),
        .R(SR));
  FDRE \mem_wdata_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_vc[0]),
        .Q(din[6]),
        .R(SR));
  FDRE \mem_wdata_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_vc[1]),
        .Q(din[7]),
        .R(SR));
  FDRE \mem_wdata_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [8]),
        .Q(din[8]),
        .R(SR));
  FDRE \mem_wdata_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg__1 [9]),
        .Q(din[9]),
        .R(SR));
  FDRE mem_wen_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_wen0),
        .Q(wr_en),
        .R(SR));
  FDRE pkt_valid_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_valid),
        .Q(pkt_valid_d1),
        .R(SR));
  LUT4 #(
    .INIT(16'hFFBF)) 
    pre_byt_cnt1_i_1
       (.I0(data_done),
        .I1(m_axis_aresetn),
        .I2(core_men_r2c),
        .I3(ecc_start_d1),
        .O(pre_byt_cnt2));
  LUT6 #(
    .INIT(64'h9009909009600909)) 
    pre_byt_cnt1_i_12
       (.I0(cur_byte_cnt[15]),
        .I1(\byt_cnt_adj_reg[15] [15]),
        .I2(cur_byte_cnt[14]),
        .I3(\cur_byte_cnt[14]_i_2_n_0 ),
        .I4(cur_byte_cnt[13]),
        .I5(\byt_cnt_adj_reg[15] [14]),
        .O(pre_byt_cnt1_i_12_n_0));
  LUT5 #(
    .INIT(32'h96000096)) 
    pre_byt_cnt1_i_13
       (.I0(cur_byte_cnt[13]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(\byt_cnt_adj_reg[15] [13]),
        .I3(\cur_byte_cnt_reg[12]_0 ),
        .I4(\byt_cnt_adj_reg[15] [12]),
        .O(pre_byt_cnt1_i_13_n_0));
  LUT4 #(
    .INIT(16'h6006)) 
    pre_byt_cnt1_i_14
       (.I0(\cur_byte_cnt_reg[11]_0 ),
        .I1(\byt_cnt_adj_reg[15] [11]),
        .I2(\cur_byte_cnt_reg[10]_0 ),
        .I3(\byt_cnt_adj_reg[15] [10]),
        .O(pre_byt_cnt1_i_14_n_0));
  LUT5 #(
    .INIT(32'h90090960)) 
    pre_byt_cnt1_i_15
       (.I0(cur_byte_cnt[9]),
        .I1(\byt_cnt_adj_reg[15] [9]),
        .I2(cur_byte_cnt[8]),
        .I3(\cur_byte_cnt[9]_i_2_n_0 ),
        .I4(\byt_cnt_adj_reg[15] [8]),
        .O(pre_byt_cnt1_i_15_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_16
       (.I0(\cur_byte_cnt_reg[7]_0 ),
        .I1(\byt_cnt_adj_reg[15] [7]),
        .I2(\cur_byte_cnt_reg[6]_0 ),
        .I3(\byt_cnt_adj_reg[15] [6]),
        .O(pre_byt_cnt1_i_16_n_0));
  LUT6 #(
    .INIT(64'h0990909060090909)) 
    pre_byt_cnt1_i_17
       (.I0(cur_byte_cnt[5]),
        .I1(\byt_cnt_adj_reg[15] [5]),
        .I2(cur_byte_cnt[4]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .I4(\cur_byte_cnt_reg[4]_0 [3]),
        .I5(\byt_cnt_adj_reg[15] [4]),
        .O(pre_byt_cnt1_i_17_n_0));
  LUT4 #(
    .INIT(16'h0690)) 
    pre_byt_cnt1_i_18
       (.I0(\cur_byte_cnt_reg[4]_0 [3]),
        .I1(\byt_cnt_adj_reg[15] [3]),
        .I2(\byt_cnt_adj_reg[15] [2]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .O(pre_byt_cnt1_i_18_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_19
       (.I0(\cur_byte_cnt_reg[4]_0 [1]),
        .I1(\byt_cnt_adj_reg[15] [1]),
        .I2(\cur_byte_cnt_reg[4]_0 [0]),
        .I3(\byt_cnt_adj_reg[15] [0]),
        .O(pre_byt_cnt1_i_19_n_0));
  LUT4 #(
    .INIT(16'hFF80)) 
    pre_byt_cnt1_i_2
       (.I0(pkt_valid),
        .I1(fsm_wip_reg),
        .I2(pre_byt_cnt1_reg_i_3_n_0),
        .I3(pre_byt_cnt1_reg_n_0),
        .O(pre_byt_cnt1_i_2_n_0));
  LUT6 #(
    .INIT(64'h51550400D3DD4544)) 
    pre_byt_cnt1_i_4
       (.I0(\byt_cnt_adj_reg[15] [15]),
        .I1(cur_byte_cnt[14]),
        .I2(\cur_byte_cnt[14]_i_2_n_0 ),
        .I3(cur_byte_cnt[13]),
        .I4(cur_byte_cnt[15]),
        .I5(\byt_cnt_adj_reg[15] [14]),
        .O(pre_byt_cnt1_i_4_n_0));
  LUT5 #(
    .INIT(32'h09099F09)) 
    pre_byt_cnt1_i_5
       (.I0(cur_byte_cnt[13]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(\byt_cnt_adj_reg[15] [13]),
        .I3(\cur_byte_cnt_reg[12]_0 ),
        .I4(\byt_cnt_adj_reg[15] [12]),
        .O(pre_byt_cnt1_i_5_n_0));
  LUT5 #(
    .INIT(32'h4510C751)) 
    pre_byt_cnt1_i_7
       (.I0(\byt_cnt_adj_reg[15] [9]),
        .I1(\cur_byte_cnt[9]_i_2_n_0 ),
        .I2(cur_byte_cnt[8]),
        .I3(cur_byte_cnt[9]),
        .I4(\byt_cnt_adj_reg[15] [8]),
        .O(pre_byt_cnt1_i_7_n_0));
  LUT6 #(
    .INIT(64'h155540003FD55540)) 
    pre_byt_cnt1_i_9
       (.I0(\byt_cnt_adj_reg[15] [5]),
        .I1(\cur_byte_cnt_reg[4]_0 [2]),
        .I2(\cur_byte_cnt_reg[4]_0 [3]),
        .I3(cur_byte_cnt[4]),
        .I4(cur_byte_cnt[5]),
        .I5(\byt_cnt_adj_reg[15] [4]),
        .O(pre_byt_cnt1_i_9_n_0));
  FDRE pre_byt_cnt1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pre_byt_cnt1_i_2_n_0),
        .Q(pre_byt_cnt1_reg_n_0),
        .R(pre_byt_cnt2));
  CARRY8 pre_byt_cnt1_reg_i_3
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({pre_byt_cnt1_reg_i_3_n_0,pre_byt_cnt1_reg_i_3_n_1,pre_byt_cnt1_reg_i_3_n_2,pre_byt_cnt1_reg_i_3_n_3,NLW_pre_byt_cnt1_reg_i_3_CO_UNCONNECTED[3],pre_byt_cnt1_reg_i_3_n_5,pre_byt_cnt1_reg_i_3_n_6,pre_byt_cnt1_reg_i_3_n_7}),
        .DI({pre_byt_cnt1_i_4_n_0,pre_byt_cnt1_i_5_n_0,DI[3],pre_byt_cnt1_i_7_n_0,DI[2],pre_byt_cnt1_i_9_n_0,DI[1:0]}),
        .O(NLW_pre_byt_cnt1_reg_i_3_O_UNCONNECTED[7:0]),
        .S({pre_byt_cnt1_i_12_n_0,pre_byt_cnt1_i_13_n_0,pre_byt_cnt1_i_14_n_0,pre_byt_cnt1_i_15_n_0,pre_byt_cnt1_i_16_n_0,pre_byt_cnt1_i_17_n_0,pre_byt_cnt1_i_18_n_0,pre_byt_cnt1_i_19_n_0}));
  LUT5 #(
    .INIT(32'hFFFFE000)) 
    pre_byt_cnt2_i_1
       (.I0(pre_byt_cnt22186_in),
        .I1(diwc_corrected_lte4),
        .I2(pkt_valid),
        .I3(fsm_wip_reg),
        .I4(pre_byt_cnt2_reg_n_0),
        .O(pre_byt_cnt2_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_10
       (.I0(\cur_byte_cnt_reg[4]_0 [1]),
        .I1(\byte_cnt_reg_reg[15] [1]),
        .I2(\cur_byte_cnt_reg[4]_0 [0]),
        .I3(\byte_cnt_reg_reg[15] [0]),
        .O(pre_byt_cnt2_i_10_n_0));
  LUT6 #(
    .INIT(64'h9009909009600909)) 
    pre_byt_cnt2_i_11
       (.I0(cur_byte_cnt[15]),
        .I1(\byte_cnt_reg_reg[15] [15]),
        .I2(cur_byte_cnt[14]),
        .I3(\cur_byte_cnt[14]_i_2_n_0 ),
        .I4(cur_byte_cnt[13]),
        .I5(\byte_cnt_reg_reg[15] [14]),
        .O(pre_byt_cnt2_i_11_n_0));
  LUT5 #(
    .INIT(32'h96000096)) 
    pre_byt_cnt2_i_12
       (.I0(cur_byte_cnt[13]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(\byte_cnt_reg_reg[15] [13]),
        .I3(\cur_byte_cnt_reg[12]_0 ),
        .I4(\byte_cnt_reg_reg[15] [12]),
        .O(pre_byt_cnt2_i_12_n_0));
  LUT4 #(
    .INIT(16'h6006)) 
    pre_byt_cnt2_i_13
       (.I0(\cur_byte_cnt_reg[11]_0 ),
        .I1(\byte_cnt_reg_reg[15] [11]),
        .I2(\cur_byte_cnt_reg[10]_0 ),
        .I3(\byte_cnt_reg_reg[15] [10]),
        .O(pre_byt_cnt2_i_13_n_0));
  LUT5 #(
    .INIT(32'h90090960)) 
    pre_byt_cnt2_i_14
       (.I0(cur_byte_cnt[9]),
        .I1(\byte_cnt_reg_reg[15] [9]),
        .I2(cur_byte_cnt[8]),
        .I3(\cur_byte_cnt[9]_i_2_n_0 ),
        .I4(\byte_cnt_reg_reg[15] [8]),
        .O(pre_byt_cnt2_i_14_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_15
       (.I0(\cur_byte_cnt_reg[7]_0 ),
        .I1(\byte_cnt_reg_reg[15] [7]),
        .I2(\cur_byte_cnt_reg[6]_0 ),
        .I3(\byte_cnt_reg_reg[15] [6]),
        .O(pre_byt_cnt2_i_15_n_0));
  LUT6 #(
    .INIT(64'h0990909060090909)) 
    pre_byt_cnt2_i_16
       (.I0(cur_byte_cnt[5]),
        .I1(\byte_cnt_reg_reg[15] [5]),
        .I2(cur_byte_cnt[4]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .I4(\cur_byte_cnt_reg[4]_0 [3]),
        .I5(\byte_cnt_reg_reg[15] [4]),
        .O(pre_byt_cnt2_i_16_n_0));
  LUT4 #(
    .INIT(16'h0690)) 
    pre_byt_cnt2_i_17
       (.I0(\cur_byte_cnt_reg[4]_0 [3]),
        .I1(\byte_cnt_reg_reg[15] [3]),
        .I2(\byte_cnt_reg_reg[15] [2]),
        .I3(\cur_byte_cnt_reg[4]_0 [2]),
        .O(pre_byt_cnt2_i_17_n_0));
  LUT6 #(
    .INIT(64'h51550400D3DD4544)) 
    pre_byt_cnt2_i_3
       (.I0(\byte_cnt_reg_reg[15] [15]),
        .I1(cur_byte_cnt[14]),
        .I2(\cur_byte_cnt[14]_i_2_n_0 ),
        .I3(cur_byte_cnt[13]),
        .I4(cur_byte_cnt[15]),
        .I5(\byte_cnt_reg_reg[15] [14]),
        .O(pre_byt_cnt2_i_3_n_0));
  LUT5 #(
    .INIT(32'h09099F09)) 
    pre_byt_cnt2_i_4
       (.I0(cur_byte_cnt[13]),
        .I1(\cur_byte_cnt[14]_i_2_n_0 ),
        .I2(\byte_cnt_reg_reg[15] [13]),
        .I3(\cur_byte_cnt_reg[12]_0 ),
        .I4(\byte_cnt_reg_reg[15] [12]),
        .O(pre_byt_cnt2_i_4_n_0));
  LUT5 #(
    .INIT(32'h4510C751)) 
    pre_byt_cnt2_i_6
       (.I0(\byte_cnt_reg_reg[15] [9]),
        .I1(\cur_byte_cnt[9]_i_2_n_0 ),
        .I2(cur_byte_cnt[8]),
        .I3(cur_byte_cnt[9]),
        .I4(\byte_cnt_reg_reg[15] [8]),
        .O(pre_byt_cnt2_i_6_n_0));
  LUT6 #(
    .INIT(64'h155540003FD55540)) 
    pre_byt_cnt2_i_8
       (.I0(\byte_cnt_reg_reg[15] [5]),
        .I1(\cur_byte_cnt_reg[4]_0 [2]),
        .I2(\cur_byte_cnt_reg[4]_0 [3]),
        .I3(cur_byte_cnt[4]),
        .I4(cur_byte_cnt[5]),
        .I5(\byte_cnt_reg_reg[15] [4]),
        .O(pre_byt_cnt2_i_8_n_0));
  FDRE pre_byt_cnt2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pre_byt_cnt2_i_1_n_0),
        .Q(pre_byt_cnt2_reg_n_0),
        .R(pre_byt_cnt2));
  CARRY8 pre_byt_cnt2_reg_i_2
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({pre_byt_cnt22186_in,pre_byt_cnt2_reg_i_2_n_1,pre_byt_cnt2_reg_i_2_n_2,pre_byt_cnt2_reg_i_2_n_3,NLW_pre_byt_cnt2_reg_i_2_CO_UNCONNECTED[3],pre_byt_cnt2_reg_i_2_n_5,pre_byt_cnt2_reg_i_2_n_6,pre_byt_cnt2_reg_i_2_n_7}),
        .DI({pre_byt_cnt2_i_3_n_0,pre_byt_cnt2_i_4_n_0,\byte_cnt_reg_reg[11] [2],pre_byt_cnt2_i_6_n_0,\byte_cnt_reg_reg[11] [1],pre_byt_cnt2_i_8_n_0,\byte_cnt_reg_reg[11] [0],pre_byt_cnt2_i_10_n_0}),
        .O(NLW_pre_byt_cnt2_reg_i_2_O_UNCONNECTED[7:0]),
        .S({pre_byt_cnt2_i_11_n_0,pre_byt_cnt2_i_12_n_0,pre_byt_cnt2_i_13_n_0,pre_byt_cnt2_i_14_n_0,pre_byt_cnt2_i_15_n_0,pre_byt_cnt2_i_16_n_0,pre_byt_cnt2_i_17_n_0,S}));
  FDRE wc_err_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(wc_gt_pload),
        .Q(wc_err),
        .R(SR));
  LUT4 #(
    .INIT(16'h4000)) 
    wc_gt_pload_i_1
       (.I0(pre_byt_cnt1_reg_n_0),
        .I1(pkt_valid_d1),
        .I2(dout),
        .I3(fsm_wip_reg),
        .O(wc_gt_pload0));
  FDRE wc_gt_pload_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(wc_gt_pload0),
        .Q(wc_gt_pload),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_gen_spkt_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_gen_spkt_fifo
   (src_ff_reg,
    \isr_i_reg[19] ,
    interrupt,
    D,
    E,
    rstn_i,
    m_axis_aclk,
    s_axi_aclk,
    diwc_corrected,
    wr_en,
    Q,
    \isr_i_reg[19]_0 ,
    s_axi_wdata,
    wr2_isr,
    \ier_reg[14] ,
    \core_config_reg[1] ,
    \ier_reg[20] ,
    \ier_reg[11] ,
    \gie_reg[0] ,
    \core_config_reg[1]_0 ,
    O,
    \rd_addr_reg[3] ,
    \rd_addr_reg[6] ,
    \rd_addr_reg[3]_0 ,
    \rd_addr_reg[3]_1 ,
    \rd_addr_reg[3]_2 ,
    \rd_addr_reg[3]_3 ,
    \rd_addr_reg[3]_4 ,
    \ier_reg[4] ,
    \rd_addr_reg[3]_5 ,
    \img_info2_vc0_reg[1] ,
    \rd_addr_reg[3]_6 ,
    \rd_addr_reg[3]_7 ,
    \syncstages_ff_reg[1] ,
    \rd_addr_reg[2] ,
    \rd_addr_reg[2]_0 ,
    \rd_addr_reg[2]_1 ,
    \LX_INFO_GEN[0].lx_info_reg[0][5] ,
    \rd_addr_reg[2]_2 ,
    \rd_addr_reg[2]_3 ,
    \img_info1_vc1_reg[6] ,
    \core_config_reg[1]_1 ,
    \img_info1_vc1_reg[7] ,
    \core_config_reg[1]_2 ,
    \img_info1_vc1_reg[8] ,
    \core_config_reg[1]_3 ,
    \img_info1_vc1_reg[9] ,
    \core_config_reg[1]_4 ,
    \img_info1_vc1_reg[12] ,
    \core_config_reg[1]_5 ,
    \img_info1_vc1_reg[13] ,
    \core_config_reg[1]_6 ,
    \rd_addr_reg[3]_8 ,
    \img_info1_vc0_reg[19] ,
    \img_info1_vc1_reg[19] ,
    \rd_addr_reg[2]_4 ,
    \rd_addr_reg[2]_5 ,
    \rd_addr_reg[3]_9 ,
    \rd_addr_reg[3]_10 ,
    s_axi_araddr,
    wr_req,
    reset_released,
    rd_req,
    s_axi_arvalid,
    \rd_addr_reg[5] ,
    disable_in_progress,
    \img_info1_vc3_reg[0] ,
    \img_info1_vc2_reg[23] ,
    \img_info2_vc2_reg[5] ,
    \rd_addr_reg[2]_6 ,
    \img_info1_vc3_reg[1] ,
    \img_info1_vc3_reg[23] ,
    \img_info2_vc3_reg[5] ,
    \ier_reg[21] ,
    \img_info1_vc1_reg[23] );
  output src_ff_reg;
  output [0:0]\isr_i_reg[19] ;
  output interrupt;
  output [23:0]D;
  output [0:0]E;
  input rstn_i;
  input m_axis_aclk;
  input s_axi_aclk;
  input [23:0]diwc_corrected;
  input wr_en;
  input [0:0]Q;
  input [0:0]\isr_i_reg[19]_0 ;
  input [0:0]s_axi_wdata;
  input wr2_isr;
  input \ier_reg[14] ;
  input [4:0]\core_config_reg[1] ;
  input [5:0]\ier_reg[20] ;
  input \ier_reg[11] ;
  input \gie_reg[0] ;
  input \core_config_reg[1]_0 ;
  input [7:0]O;
  input \rd_addr_reg[3] ;
  input [4:0]\rd_addr_reg[6] ;
  input \rd_addr_reg[3]_0 ;
  input \rd_addr_reg[3]_1 ;
  input \rd_addr_reg[3]_2 ;
  input \rd_addr_reg[3]_3 ;
  input \rd_addr_reg[3]_4 ;
  input \ier_reg[4] ;
  input \rd_addr_reg[3]_5 ;
  input \img_info2_vc0_reg[1] ;
  input \rd_addr_reg[3]_6 ;
  input \rd_addr_reg[3]_7 ;
  input [1:0]\syncstages_ff_reg[1] ;
  input \rd_addr_reg[2] ;
  input \rd_addr_reg[2]_0 ;
  input \rd_addr_reg[2]_1 ;
  input \LX_INFO_GEN[0].lx_info_reg[0][5] ;
  input \rd_addr_reg[2]_2 ;
  input \rd_addr_reg[2]_3 ;
  input \img_info1_vc1_reg[6] ;
  input \core_config_reg[1]_1 ;
  input \img_info1_vc1_reg[7] ;
  input \core_config_reg[1]_2 ;
  input \img_info1_vc1_reg[8] ;
  input \core_config_reg[1]_3 ;
  input \img_info1_vc1_reg[9] ;
  input \core_config_reg[1]_4 ;
  input \img_info1_vc1_reg[12] ;
  input \core_config_reg[1]_5 ;
  input \img_info1_vc1_reg[13] ;
  input \core_config_reg[1]_6 ;
  input \rd_addr_reg[3]_8 ;
  input [0:0]\img_info1_vc0_reg[19] ;
  input [0:0]\img_info1_vc1_reg[19] ;
  input \rd_addr_reg[2]_4 ;
  input \rd_addr_reg[2]_5 ;
  input \rd_addr_reg[3]_9 ;
  input \rd_addr_reg[3]_10 ;
  input [4:0]s_axi_araddr;
  input wr_req;
  input reset_released;
  input rd_req;
  input s_axi_arvalid;
  input \rd_addr_reg[5] ;
  input disable_in_progress;
  input \img_info1_vc3_reg[0] ;
  input [23:0]\img_info1_vc2_reg[23] ;
  input [5:0]\img_info2_vc2_reg[5] ;
  input \rd_addr_reg[2]_6 ;
  input \img_info1_vc3_reg[1] ;
  input [21:0]\img_info1_vc3_reg[23] ;
  input [3:0]\img_info2_vc3_reg[5] ;
  input \ier_reg[21] ;
  input \img_info1_vc1_reg[23] ;

  wire [23:0]D;
  wire [0:0]E;
  wire \LX_INFO_GEN[0].lx_info_reg[0][5] ;
  wire [7:0]O;
  wire [0:0]Q;
  wire [4:0]\core_config_reg[1] ;
  wire \core_config_reg[1]_0 ;
  wire \core_config_reg[1]_1 ;
  wire \core_config_reg[1]_2 ;
  wire \core_config_reg[1]_3 ;
  wire \core_config_reg[1]_4 ;
  wire \core_config_reg[1]_5 ;
  wire \core_config_reg[1]_6 ;
  wire disable_in_progress;
  wire [23:0]diwc_corrected;
  wire \gie_reg[0] ;
  wire \ier_reg[11] ;
  wire \ier_reg[14] ;
  wire [5:0]\ier_reg[20] ;
  wire \ier_reg[21] ;
  wire \ier_reg[4] ;
  wire [0:0]\img_info1_vc0_reg[19] ;
  wire \img_info1_vc1_reg[12] ;
  wire \img_info1_vc1_reg[13] ;
  wire [0:0]\img_info1_vc1_reg[19] ;
  wire \img_info1_vc1_reg[23] ;
  wire \img_info1_vc1_reg[6] ;
  wire \img_info1_vc1_reg[7] ;
  wire \img_info1_vc1_reg[8] ;
  wire \img_info1_vc1_reg[9] ;
  wire [23:0]\img_info1_vc2_reg[23] ;
  wire \img_info1_vc3_reg[0] ;
  wire \img_info1_vc3_reg[1] ;
  wire [21:0]\img_info1_vc3_reg[23] ;
  wire \img_info2_vc0_reg[1] ;
  wire [5:0]\img_info2_vc2_reg[5] ;
  wire [3:0]\img_info2_vc3_reg[5] ;
  wire interrupt;
  wire interrupt_INST_0_i_3_n_0;
  wire interrupt_INST_0_i_9_n_0;
  wire [0:0]\isr_i_reg[19] ;
  wire [0:0]\isr_i_reg[19]_0 ;
  wire [19:19]isr_o;
  wire m_axis_aclk;
  wire \rd_addr_reg[2] ;
  wire \rd_addr_reg[2]_0 ;
  wire \rd_addr_reg[2]_1 ;
  wire \rd_addr_reg[2]_2 ;
  wire \rd_addr_reg[2]_3 ;
  wire \rd_addr_reg[2]_4 ;
  wire \rd_addr_reg[2]_5 ;
  wire \rd_addr_reg[2]_6 ;
  wire \rd_addr_reg[3] ;
  wire \rd_addr_reg[3]_0 ;
  wire \rd_addr_reg[3]_1 ;
  wire \rd_addr_reg[3]_10 ;
  wire \rd_addr_reg[3]_2 ;
  wire \rd_addr_reg[3]_3 ;
  wire \rd_addr_reg[3]_4 ;
  wire \rd_addr_reg[3]_5 ;
  wire \rd_addr_reg[3]_6 ;
  wire \rd_addr_reg[3]_7 ;
  wire \rd_addr_reg[3]_8 ;
  wire \rd_addr_reg[3]_9 ;
  wire \rd_addr_reg[5] ;
  wire [4:0]\rd_addr_reg[6] ;
  wire rd_req;
  wire reset_released;
  wire rstn_i;
  wire rstn_o;
  wire s_axi_aclk;
  wire [4:0]s_axi_araddr;
  wire s_axi_arvalid;
  wire \s_axi_rdata[0]_i_3_n_0 ;
  wire \s_axi_rdata[0]_i_8_n_0 ;
  wire \s_axi_rdata[10]_i_2_n_0 ;
  wire \s_axi_rdata[11]_i_2_n_0 ;
  wire \s_axi_rdata[12]_i_2_n_0 ;
  wire \s_axi_rdata[13]_i_2_n_0 ;
  wire \s_axi_rdata[14]_i_2_n_0 ;
  wire \s_axi_rdata[15]_i_2_n_0 ;
  wire \s_axi_rdata[16]_i_3_n_0 ;
  wire \s_axi_rdata[17]_i_3_n_0 ;
  wire \s_axi_rdata[18]_i_3_n_0 ;
  wire \s_axi_rdata[19]_i_2_n_0 ;
  wire \s_axi_rdata[19]_i_3_n_0 ;
  wire \s_axi_rdata[19]_i_4_n_0 ;
  wire \s_axi_rdata[1]_i_3_n_0 ;
  wire \s_axi_rdata[1]_i_8_n_0 ;
  wire \s_axi_rdata[20]_i_3_n_0 ;
  wire \s_axi_rdata[21]_i_3_n_0 ;
  wire \s_axi_rdata[22]_i_3_n_0 ;
  wire \s_axi_rdata[23]_i_4_n_0 ;
  wire \s_axi_rdata[2]_i_3_n_0 ;
  wire \s_axi_rdata[2]_i_7_n_0 ;
  wire \s_axi_rdata[3]_i_3_n_0 ;
  wire \s_axi_rdata[3]_i_7_n_0 ;
  wire \s_axi_rdata[4]_i_2_n_0 ;
  wire \s_axi_rdata[4]_i_6_n_0 ;
  wire \s_axi_rdata[5]_i_2_n_0 ;
  wire \s_axi_rdata[5]_i_6_n_0 ;
  wire \s_axi_rdata[6]_i_2_n_0 ;
  wire \s_axi_rdata[7]_i_2_n_0 ;
  wire \s_axi_rdata[8]_i_2_n_0 ;
  wire \s_axi_rdata[9]_i_2_n_0 ;
  wire [0:0]s_axi_wdata;
  wire spkt_fifo_empty;
  wire [23:0]spkt_fifo_rdata;
  wire spkt_fifo_ren;
  wire spkt_fifo_rst;
  wire src_ff_reg;
  wire [1:0]\syncstages_ff_reg[1] ;
  wire wr2_isr;
  wire wr_en;
  wire wr_req;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo2,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo2 generic_pkt
       (.din(diwc_corrected),
        .dout(spkt_fifo_rdata),
        .empty(spkt_fifo_empty),
        .full(src_ff_reg),
        .rd_clk(s_axi_aclk),
        .rd_en(spkt_fifo_ren),
        .rst(spkt_fifo_rst),
        .wr_clk(m_axis_aclk),
        .wr_en(wr_en));
  LUT1 #(
    .INIT(2'h1)) 
    generic_pkt_i_1
       (.I0(rstn_o),
        .O(spkt_fifo_rst));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    generic_pkt_i_3
       (.I0(s_axi_araddr[3]),
        .I1(s_axi_araddr[4]),
        .I2(s_axi_araddr[1]),
        .I3(s_axi_araddr[2]),
        .I4(s_axi_araddr[0]),
        .I5(E),
        .O(spkt_fifo_ren));
  LUT6 #(
    .INIT(64'hFFFFFFEA00000000)) 
    interrupt_INST_0
       (.I0(\ier_reg[14] ),
        .I1(\core_config_reg[1] [2]),
        .I2(\ier_reg[20] [2]),
        .I3(interrupt_INST_0_i_3_n_0),
        .I4(\ier_reg[11] ),
        .I5(\gie_reg[0] ),
        .O(interrupt));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'h45)) 
    interrupt_INST_0_i_19
       (.I0(Q),
        .I1(\isr_i_reg[19]_0 ),
        .I2(spkt_fifo_empty),
        .O(isr_o));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    interrupt_INST_0_i_3
       (.I0(interrupt_INST_0_i_9_n_0),
        .I1(\ier_reg[20] [1]),
        .I2(\core_config_reg[1] [1]),
        .I3(\ier_reg[20] [0]),
        .I4(\core_config_reg[1] [0]),
        .I5(\ier_reg[4] ),
        .O(interrupt_INST_0_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    interrupt_INST_0_i_9
       (.I0(\core_config_reg[1] [3]),
        .I1(\ier_reg[20] [3]),
        .I2(\core_config_reg[1] [4]),
        .I3(\ier_reg[20] [5]),
        .I4(\ier_reg[20] [4]),
        .I5(isr_o),
        .O(interrupt_INST_0_i_9_n_0));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h4FCF)) 
    \isr_i[19]_i_1 
       (.I0(s_axi_wdata),
        .I1(\isr_i_reg[19]_0 ),
        .I2(spkt_fifo_empty),
        .I3(wr2_isr),
        .O(\isr_i_reg[19] ));
  LUT4 #(
    .INIT(16'h0400)) 
    \rd_addr[6]_i_1 
       (.I0(wr_req),
        .I1(reset_released),
        .I2(rd_req),
        .I3(s_axi_arvalid),
        .O(E));
  LUT6 #(
    .INIT(64'hFF888888F8F88888)) 
    \s_axi_rdata[0]_i_3 
       (.I0(\rd_addr_reg[5] ),
        .I1(disable_in_progress),
        .I2(\s_axi_rdata[0]_i_8_n_0 ),
        .I3(\img_info1_vc3_reg[0] ),
        .I4(\rd_addr_reg[6] [3]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[0]_i_8 
       (.I0(spkt_fifo_rdata[0]),
        .I1(\img_info1_vc2_reg[23] [0]),
        .I2(\img_info2_vc2_reg[5] [0]),
        .I3(\rd_addr_reg[6] [4]),
        .I4(\rd_addr_reg[6] [0]),
        .O(\s_axi_rdata[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \s_axi_rdata[10]_i_1 
       (.I0(\s_axi_rdata[10]_i_2_n_0 ),
        .I1(\rd_addr_reg[3]_3 ),
        .I2(\rd_addr_reg[6] [3]),
        .I3(\rd_addr_reg[6] [2]),
        .O(D[10]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[10]_i_2 
       (.I0(spkt_fifo_rdata[10]),
        .I1(\img_info1_vc2_reg[23] [10]),
        .I2(\img_info1_vc3_reg[23] [8]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[10]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \s_axi_rdata[11]_i_1 
       (.I0(\s_axi_rdata[11]_i_2_n_0 ),
        .I1(\rd_addr_reg[3]_4 ),
        .I2(\rd_addr_reg[6] [3]),
        .I3(\rd_addr_reg[6] [2]),
        .O(D[11]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[11]_i_2 
       (.I0(spkt_fifo_rdata[11]),
        .I1(\img_info1_vc2_reg[23] [11]),
        .I2(\img_info1_vc3_reg[23] [9]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[12]_i_1 
       (.I0(\s_axi_rdata[12]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[12] ),
        .I2(\core_config_reg[1]_5 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[12]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[12]_i_2 
       (.I0(spkt_fifo_rdata[12]),
        .I1(\img_info1_vc2_reg[23] [12]),
        .I2(\img_info1_vc3_reg[23] [10]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[13]_i_1 
       (.I0(\s_axi_rdata[13]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[13] ),
        .I2(\core_config_reg[1]_6 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[13]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[13]_i_2 
       (.I0(spkt_fifo_rdata[13]),
        .I1(\img_info1_vc2_reg[23] [13]),
        .I2(\img_info1_vc3_reg[23] [11]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[13]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \s_axi_rdata[14]_i_1 
       (.I0(\s_axi_rdata[14]_i_2_n_0 ),
        .I1(\rd_addr_reg[3]_2 ),
        .I2(\rd_addr_reg[6] [3]),
        .I3(\rd_addr_reg[6] [2]),
        .O(D[14]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[14]_i_2 
       (.I0(spkt_fifo_rdata[14]),
        .I1(\img_info1_vc2_reg[23] [14]),
        .I2(\img_info1_vc3_reg[23] [12]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[14]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \s_axi_rdata[15]_i_1 
       (.I0(\s_axi_rdata[15]_i_2_n_0 ),
        .I1(\rd_addr_reg[3]_1 ),
        .I2(\rd_addr_reg[6] [3]),
        .I3(\rd_addr_reg[6] [2]),
        .O(D[15]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[15]_i_2 
       (.I0(spkt_fifo_rdata[15]),
        .I1(\img_info1_vc2_reg[23] [15]),
        .I2(\img_info1_vc3_reg[23] [13]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[16]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[0]),
        .I2(\rd_addr_reg[3]_0 ),
        .I3(\s_axi_rdata[16]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[16]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[16]_i_3 
       (.I0(spkt_fifo_rdata[16]),
        .I1(\img_info1_vc2_reg[23] [16]),
        .I2(\img_info1_vc3_reg[23] [14]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[17]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[1]),
        .I2(\rd_addr_reg[3] ),
        .I3(\s_axi_rdata[17]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[17]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[17]_i_3 
       (.I0(spkt_fifo_rdata[17]),
        .I1(\img_info1_vc2_reg[23] [17]),
        .I2(\img_info1_vc3_reg[23] [15]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[18]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[2]),
        .I2(\rd_addr_reg[3]_8 ),
        .I3(\s_axi_rdata[18]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[18]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[18]_i_3 
       (.I0(spkt_fifo_rdata[18]),
        .I1(\img_info1_vc2_reg[23] [18]),
        .I2(\img_info1_vc3_reg[23] [16]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[19]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[3]),
        .I2(\s_axi_rdata[19]_i_2_n_0 ),
        .I3(\s_axi_rdata[19]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[19]));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[19]_i_2 
       (.I0(\rd_addr_reg[6] [1]),
        .I1(\rd_addr_reg[6] [4]),
        .I2(\rd_addr_reg[6] [0]),
        .I3(\img_info1_vc0_reg[19] ),
        .I4(\img_info1_vc1_reg[19] ),
        .I5(\s_axi_rdata[19]_i_4_n_0 ),
        .O(\s_axi_rdata[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[19]_i_3 
       (.I0(spkt_fifo_rdata[19]),
        .I1(\img_info1_vc2_reg[23] [19]),
        .I2(\img_info1_vc3_reg[23] [17]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF450045004500)) 
    \s_axi_rdata[19]_i_4 
       (.I0(Q),
        .I1(\isr_i_reg[19]_0 ),
        .I2(spkt_fifo_empty),
        .I3(\rd_addr_reg[2]_4 ),
        .I4(\ier_reg[20] [4]),
        .I5(\rd_addr_reg[2]_5 ),
        .O(\s_axi_rdata[19]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFF888888F8F88888)) 
    \s_axi_rdata[1]_i_3 
       (.I0(\rd_addr_reg[2]_6 ),
        .I1(\syncstages_ff_reg[1] [0]),
        .I2(\s_axi_rdata[1]_i_8_n_0 ),
        .I3(\img_info1_vc3_reg[1] ),
        .I4(\rd_addr_reg[6] [3]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[1]_i_8 
       (.I0(spkt_fifo_rdata[1]),
        .I1(\img_info1_vc2_reg[23] [1]),
        .I2(\img_info2_vc2_reg[5] [1]),
        .I3(\rd_addr_reg[6] [4]),
        .I4(\rd_addr_reg[6] [0]),
        .O(\s_axi_rdata[1]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[20]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[4]),
        .I2(\rd_addr_reg[3]_9 ),
        .I3(\s_axi_rdata[20]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[20]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[20]_i_3 
       (.I0(spkt_fifo_rdata[20]),
        .I1(\img_info1_vc2_reg[23] [20]),
        .I2(\img_info1_vc3_reg[23] [18]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[21]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[5]),
        .I2(\ier_reg[21] ),
        .I3(\s_axi_rdata[21]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[21]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[21]_i_3 
       (.I0(spkt_fifo_rdata[21]),
        .I1(\img_info1_vc2_reg[23] [21]),
        .I2(\img_info1_vc3_reg[23] [19]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF88F8F888888888)) 
    \s_axi_rdata[22]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[6]),
        .I2(\rd_addr_reg[3]_10 ),
        .I3(\s_axi_rdata[22]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[22]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[22]_i_3 
       (.I0(spkt_fifo_rdata[22]),
        .I1(\img_info1_vc2_reg[23] [22]),
        .I2(\img_info1_vc3_reg[23] [20]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8888888)) 
    \s_axi_rdata[23]_i_1 
       (.I0(\core_config_reg[1]_0 ),
        .I1(O[7]),
        .I2(\rd_addr_reg[6] [3]),
        .I3(\rd_addr_reg[6] [2]),
        .I4(\s_axi_rdata[23]_i_4_n_0 ),
        .I5(\img_info1_vc1_reg[23] ),
        .O(D[23]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[23]_i_4 
       (.I0(spkt_fifo_rdata[23]),
        .I1(\img_info1_vc2_reg[23] [23]),
        .I2(\img_info1_vc3_reg[23] [21]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFAEAEAEAEAEAEAE)) 
    \s_axi_rdata[2]_i_1 
       (.I0(\rd_addr_reg[3]_6 ),
        .I1(\core_config_reg[1]_0 ),
        .I2(spkt_fifo_empty),
        .I3(\s_axi_rdata[2]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hFAEEAAAAAAAAAAAA)) 
    \s_axi_rdata[2]_i_3 
       (.I0(\s_axi_rdata[2]_i_7_n_0 ),
        .I1(\img_info1_vc3_reg[23] [0]),
        .I2(\img_info2_vc3_reg[5] [0]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D591C480)) 
    \s_axi_rdata[2]_i_7 
       (.I0(\rd_addr_reg[6] [0]),
        .I1(\rd_addr_reg[6] [4]),
        .I2(\img_info2_vc2_reg[5] [2]),
        .I3(\img_info1_vc2_reg[23] [2]),
        .I4(spkt_fifo_rdata[2]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAEAEAEAEA)) 
    \s_axi_rdata[3]_i_1 
       (.I0(\rd_addr_reg[3]_7 ),
        .I1(\core_config_reg[1]_0 ),
        .I2(\syncstages_ff_reg[1] [1]),
        .I3(\s_axi_rdata[3]_i_3_n_0 ),
        .I4(\rd_addr_reg[6] [2]),
        .I5(\rd_addr_reg[6] [3]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hFAEEAAAAAAAAAAAA)) 
    \s_axi_rdata[3]_i_3 
       (.I0(\s_axi_rdata[3]_i_7_n_0 ),
        .I1(\img_info1_vc3_reg[23] [1]),
        .I2(\img_info2_vc3_reg[5] [1]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D591C480)) 
    \s_axi_rdata[3]_i_7 
       (.I0(\rd_addr_reg[6] [0]),
        .I1(\rd_addr_reg[6] [4]),
        .I2(\img_info2_vc2_reg[5] [3]),
        .I3(\img_info1_vc2_reg[23] [3]),
        .I4(spkt_fifo_rdata[3]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hBB33BB33BB338830)) 
    \s_axi_rdata[4]_i_1 
       (.I0(\s_axi_rdata[4]_i_2_n_0 ),
        .I1(\rd_addr_reg[6] [2]),
        .I2(\rd_addr_reg[2] ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[2]_0 ),
        .I5(\rd_addr_reg[2]_1 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'hFAEEAAAAAAAAAAAA)) 
    \s_axi_rdata[4]_i_2 
       (.I0(\s_axi_rdata[4]_i_6_n_0 ),
        .I1(\img_info1_vc3_reg[23] [2]),
        .I2(\img_info2_vc3_reg[5] [2]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D591C480)) 
    \s_axi_rdata[4]_i_6 
       (.I0(\rd_addr_reg[6] [0]),
        .I1(\rd_addr_reg[6] [4]),
        .I2(\img_info2_vc2_reg[5] [4]),
        .I3(\img_info1_vc2_reg[23] [4]),
        .I4(spkt_fifo_rdata[4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[4]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBB33BB33BB338830)) 
    \s_axi_rdata[5]_i_1 
       (.I0(\s_axi_rdata[5]_i_2_n_0 ),
        .I1(\rd_addr_reg[6] [2]),
        .I2(\LX_INFO_GEN[0].lx_info_reg[0][5] ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[2]_2 ),
        .I5(\rd_addr_reg[2]_3 ),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hFAEEAAAAAAAAAAAA)) 
    \s_axi_rdata[5]_i_2 
       (.I0(\s_axi_rdata[5]_i_6_n_0 ),
        .I1(\img_info1_vc3_reg[23] [3]),
        .I2(\img_info2_vc3_reg[5] [3]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D591C480)) 
    \s_axi_rdata[5]_i_6 
       (.I0(\rd_addr_reg[6] [0]),
        .I1(\rd_addr_reg[6] [4]),
        .I2(\img_info2_vc2_reg[5] [5]),
        .I3(\img_info1_vc2_reg[23] [5]),
        .I4(spkt_fifo_rdata[5]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[5]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[6]_i_1 
       (.I0(\s_axi_rdata[6]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[6] ),
        .I2(\core_config_reg[1]_1 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[6]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[6]_i_2 
       (.I0(spkt_fifo_rdata[6]),
        .I1(\img_info1_vc2_reg[23] [6]),
        .I2(\img_info1_vc3_reg[23] [4]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[7]_i_1 
       (.I0(\s_axi_rdata[7]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[7] ),
        .I2(\core_config_reg[1]_2 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[7]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[7]_i_2 
       (.I0(spkt_fifo_rdata[7]),
        .I1(\img_info1_vc2_reg[23] [7]),
        .I2(\img_info1_vc3_reg[23] [5]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[8]_i_1 
       (.I0(\s_axi_rdata[8]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[8] ),
        .I2(\core_config_reg[1]_3 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[8]_i_2 
       (.I0(spkt_fifo_rdata[8]),
        .I1(\img_info1_vc2_reg[23] [8]),
        .I2(\img_info1_vc3_reg[23] [6]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAA00FC00)) 
    \s_axi_rdata[9]_i_1 
       (.I0(\s_axi_rdata[9]_i_2_n_0 ),
        .I1(\img_info1_vc1_reg[9] ),
        .I2(\core_config_reg[1]_4 ),
        .I3(\rd_addr_reg[6] [3]),
        .I4(\rd_addr_reg[6] [2]),
        .O(D[9]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[9]_i_2 
       (.I0(spkt_fifo_rdata[9]),
        .I1(\img_info1_vc2_reg[23] [9]),
        .I2(\img_info1_vc3_reg[23] [7]),
        .I3(\rd_addr_reg[6] [0]),
        .I4(\rd_addr_reg[6] [4]),
        .I5(\rd_addr_reg[6] [1]),
        .O(\s_axi_rdata[9]_i_2_n_0 ));
  MUXF7 \s_axi_rdata_reg[0]_i_1 
       (.I0(\rd_addr_reg[3]_5 ),
        .I1(\s_axi_rdata[0]_i_3_n_0 ),
        .O(D[0]),
        .S(\rd_addr_reg[6] [2]));
  MUXF7 \s_axi_rdata_reg[1]_i_1 
       (.I0(\img_info2_vc0_reg[1] ),
        .I1(\s_axi_rdata[1]_i_3_n_0 ),
        .O(D[1]),
        .S(\rd_addr_reg[6] [2]));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b0" *) 
  (* RST_ACTIVE_HIGH = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__parameterized0 xpm_arst_03
       (.dest_arst(rstn_o),
        .dest_clk(m_axis_aclk),
        .src_arst(rstn_i));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_isr_cdc" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_isr_cdc
   (dest_out,
    dest_pulse,
    lx_info_all,
    D,
    isr_0,
    p_0_in19_in,
    p_0_in14_in,
    p_0_in13_in,
    p_0_in12_in,
    p_0_in11_in,
    p_0_in10_in,
    p_0_in9_in,
    p_0_in,
    interrupt,
    \isr_i_reg[31]_0 ,
    interrupt_0,
    m_axis_aclk,
    src_in,
    s_axi_aclk,
    Q,
    wc_err,
    SR,
    SS,
    dl0_errcontrol,
    dl0_erresc,
    dl0_rxulpmesc,
    dl0_stopstate,
    dl1_errcontrol,
    dl1_erresc,
    dl1_rxulpmesc,
    dl1_stopstate,
    dl2_errcontrol,
    dl2_erresc,
    dl2_rxulpmesc,
    dl2_stopstate,
    dl3_errcontrol,
    dl3_erresc,
    dl3_rxulpmesc,
    dl3_stopstate,
    cl_rxulpsclknot,
    cl_stopstate,
    \gpr1.dout_i_reg[39] ,
    \FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ,
    \core_config_reg[1] ,
    \prot_config_reg[1] ,
    \isr_i_reg[19]_0 ,
    s_axi_wdata,
    wr2_isr,
    \ier_reg[31] ,
    \core_config_reg[1]_0 ,
    m_axis_aresetn,
    \errframedata_d1_reg[3] ,
    \ERR_FRAME_DATA[0].errframedata_reg[0] ,
    \ERR_FRAME_DATA[1].errframedata_reg[1] ,
    \ERR_FRAME_DATA[2].errframedata_reg[2] ,
    p_0_in_0,
    di_not_supported_i,
    diwc_valid,
    dout,
    pkt_valid,
    phecc_done);
  output [1:0]dest_out;
  output dest_pulse;
  output [15:0]lx_info_all;
  output [1:0]D;
  output isr_0;
  output p_0_in19_in;
  output p_0_in14_in;
  output p_0_in13_in;
  output p_0_in12_in;
  output p_0_in11_in;
  output p_0_in10_in;
  output p_0_in9_in;
  output p_0_in;
  output [15:0]interrupt;
  output [12:0]\isr_i_reg[31]_0 ;
  output interrupt_0;
  input m_axis_aclk;
  input [1:0]src_in;
  input s_axi_aclk;
  input [1:0]Q;
  input wc_err;
  input [0:0]SR;
  input [0:0]SS;
  input dl0_errcontrol;
  input dl0_erresc;
  input dl0_rxulpmesc;
  input dl0_stopstate;
  input dl1_errcontrol;
  input dl1_erresc;
  input dl1_rxulpmesc;
  input dl1_stopstate;
  input dl2_errcontrol;
  input dl2_erresc;
  input dl2_rxulpmesc;
  input dl2_stopstate;
  input dl3_errcontrol;
  input dl3_erresc;
  input dl3_rxulpmesc;
  input dl3_stopstate;
  input cl_rxulpsclknot;
  input cl_stopstate;
  input [19:0]\gpr1.dout_i_reg[39] ;
  input [0:0]\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ;
  input [0:0]\core_config_reg[1] ;
  input [1:0]\prot_config_reg[1] ;
  input [0:0]\isr_i_reg[19]_0 ;
  input [21:0]s_axi_wdata;
  input wr2_isr;
  input [2:0]\ier_reg[31] ;
  input [0:0]\core_config_reg[1]_0 ;
  input m_axis_aresetn;
  input [3:0]\errframedata_d1_reg[3] ;
  input \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  input \ERR_FRAME_DATA[1].errframedata_reg[1] ;
  input \ERR_FRAME_DATA[2].errframedata_reg[2] ;
  input p_0_in_0;
  input di_not_supported_i;
  input diwc_valid;
  input [8:0]dout;
  input pkt_valid;
  input phecc_done;

  wire [1:0]D;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  wire \ERR_FRAME_DATA[1].errframedata_reg[1] ;
  wire \ERR_FRAME_DATA[2].errframedata_reg[2] ;
  wire [0:0]\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ;
  wire \HSC2R_CDC[0].hsc2r_send_reg_n_0_[0] ;
  wire \HSC2R_CDC[10].hsc2r_send_reg_n_0_[10] ;
  wire \HSC2R_CDC[11].hsc2r_send_reg_n_0_[11] ;
  wire \HSC2R_CDC[12].hsc2r_send_reg_n_0_[12] ;
  wire \HSC2R_CDC[13].hsc2r_send_reg_n_0_[13] ;
  wire \HSC2R_CDC[14].hsc2r_send_reg_n_0_[14] ;
  wire \HSC2R_CDC[15].hsc2r_send_reg_n_0_[15] ;
  wire \HSC2R_CDC[16].hsc2r_send_reg_n_0_[16] ;
  wire \HSC2R_CDC[17].hsc2r_send_reg_n_0_[17] ;
  wire \HSC2R_CDC[18].hsc2r_send_reg_n_0_[18] ;
  wire \HSC2R_CDC[19].hsc2r_send_reg_n_0_[19] ;
  wire \HSC2R_CDC[1].hsc2r_send_reg_n_0_[1] ;
  wire \HSC2R_CDC[20].hsc2r_send_reg_n_0_[20] ;
  wire \HSC2R_CDC[2].hsc2r_send_reg_n_0_[2] ;
  wire \HSC2R_CDC[3].hsc2r_send_reg_n_0_[3] ;
  wire \HSC2R_CDC[4].hsc2r_send_reg_n_0_[4] ;
  wire \HSC2R_CDC[5].hsc2r_send_reg_n_0_[5] ;
  wire \HSC2R_CDC[6].hsc2r_send_reg_n_0_[6] ;
  wire \HSC2R_CDC[7].hsc2r_send_reg_n_0_[7] ;
  wire \HSC2R_CDC[8].hsc2r_send_reg_n_0_[8] ;
  wire \HSC2R_CDC[9].hsc2r_send_reg_n_0_[9] ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire cl_rxulpsclknot;
  wire cl_stopstate;
  wire [0:0]\core_config_reg[1] ;
  wire [0:0]\core_config_reg[1]_0 ;
  wire [1:0]dest_out;
  wire dest_pulse;
  wire di_not_supported_i;
  wire diwc_valid;
  wire dl0_errcontrol;
  wire dl0_erresc;
  wire dl0_rxulpmesc;
  wire dl0_stopstate;
  wire dl1_errcontrol;
  wire dl1_erresc;
  wire dl1_rxulpmesc;
  wire dl1_stopstate;
  wire dl2_errcontrol;
  wire dl2_erresc;
  wire dl2_rxulpmesc;
  wire dl2_stopstate;
  wire dl3_errcontrol;
  wire dl3_erresc;
  wire dl3_rxulpmesc;
  wire dl3_stopstate;
  wire [8:0]dout;
  wire ecc_rcv;
  wire ecc_send;
  wire ecc_send_i_1_n_0;
  wire ecc_vld;
  wire ecc_vld_i;
  wire [1:0]ecc_vld_out;
  wire \ecc_vld_out[0]_i_1_n_0 ;
  wire \ecc_vld_out[1]_i_1_n_0 ;
  wire [1:0]ecc_vld_out_i;
  wire [3:0]\errframedata_d1_reg[3] ;
  wire [19:0]\gpr1.dout_i_reg[39] ;
  wire hsc2r_rcv_0;
  wire hsc2r_rcv_1;
  wire hsc2r_rcv_10;
  wire hsc2r_rcv_11;
  wire hsc2r_rcv_12;
  wire hsc2r_rcv_13;
  wire hsc2r_rcv_14;
  wire hsc2r_rcv_15;
  wire hsc2r_rcv_16;
  wire hsc2r_rcv_17;
  wire hsc2r_rcv_18;
  wire hsc2r_rcv_19;
  wire hsc2r_rcv_2;
  wire hsc2r_rcv_20;
  wire hsc2r_rcv_3;
  wire hsc2r_rcv_4;
  wire hsc2r_rcv_5;
  wire hsc2r_rcv_6;
  wire hsc2r_rcv_7;
  wire hsc2r_rcv_8;
  wire hsc2r_rcv_9;
  wire hsc2r_vld_i_0;
  wire hsc2r_vld_i_1;
  wire hsc2r_vld_i_10;
  wire hsc2r_vld_i_11;
  wire hsc2r_vld_i_12;
  wire hsc2r_vld_i_13;
  wire hsc2r_vld_i_14;
  wire hsc2r_vld_i_15;
  wire hsc2r_vld_i_16;
  wire hsc2r_vld_i_17;
  wire hsc2r_vld_i_18;
  wire hsc2r_vld_i_19;
  wire hsc2r_vld_i_2;
  wire hsc2r_vld_i_20;
  wire hsc2r_vld_i_3;
  wire hsc2r_vld_i_4;
  wire hsc2r_vld_i_5;
  wire hsc2r_vld_i_6;
  wire hsc2r_vld_i_7;
  wire hsc2r_vld_i_8;
  wire hsc2r_vld_i_9;
  wire [2:0]\ier_reg[31] ;
  wire [15:0]interrupt;
  wire interrupt_0;
  wire isr_0;
  wire [17:2]isr_i;
  wire \isr_i[17]_i_2_n_0 ;
  wire [0:0]\isr_i_reg[19]_0 ;
  wire [12:0]\isr_i_reg[31]_0 ;
  wire [31:9]isr_o;
  wire [15:0]lx_info_all;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire p_0_in;
  wire p_0_in10_in;
  wire p_0_in11_in;
  wire p_0_in12_in;
  wire p_0_in13_in;
  wire p_0_in14_in;
  wire p_0_in15_in;
  wire p_0_in16_in;
  wire p_0_in17_in;
  wire p_0_in18_in;
  wire p_0_in19_in;
  wire p_0_in9_in;
  wire p_0_in_0;
  wire p_11_out;
  wire p_14_out;
  wire p_17_out;
  wire [31:0]p_1_in;
  wire p_20_out;
  wire p_23_out;
  wire p_26_out;
  wire p_29_out;
  wire p_2_out;
  wire p_32_out;
  wire p_35_out;
  wire p_38_out;
  wire p_41_out;
  wire p_44_out;
  wire p_47_out;
  wire p_50_out;
  wire p_53_out;
  wire p_56_out;
  wire p_59_out;
  wire p_5_out;
  wire p_62_out;
  wire p_8_out;
  wire phecc_done;
  wire pkt_valid;
  wire [1:0]\prot_config_reg[1] ;
  wire s0_i;
  wire s1_i;
  wire s2_i;
  wire s_axi_aclk;
  wire [21:0]s_axi_wdata;
  wire [1:0]src_in;
  wire wc_err;
  wire wr2_isr;
  wire [0:0]\NLW_HSC2R_CDC[0].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[10].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[11].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[1].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[20].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[2].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[3].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[4].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[5].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[6].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[7].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[8].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[9].hsc2r_bus_cdc_dest_out_UNCONNECTED ;

  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__1 \HSC2R_CDC[0].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[0].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_0),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [0]),
        .src_rcv(hsc2r_rcv_0),
        .src_send(\HSC2R_CDC[0].hsc2r_send_reg_n_0_[0] ));
  LUT5 #(
    .INIT(32'h44440040)) 
    \HSC2R_CDC[0].hsc2r_send[0]_i_1 
       (.I0(hsc2r_rcv_0),
        .I1(m_axis_aresetn),
        .I2(\errframedata_d1_reg[3] [0]),
        .I3(\ERR_FRAME_DATA[0].errframedata_reg[0] ),
        .I4(\HSC2R_CDC[0].hsc2r_send_reg_n_0_[0] ),
        .O(p_62_out));
  FDRE \HSC2R_CDC[0].hsc2r_send_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_62_out),
        .Q(\HSC2R_CDC[0].hsc2r_send_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[0].hsc2r_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_0),
        .Q(isr_0),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__2 \HSC2R_CDC[10].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[10].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_10),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [10]),
        .src_rcv(hsc2r_rcv_10),
        .src_send(\HSC2R_CDC[10].hsc2r_send_reg_n_0_[10] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[10].hsc2r_send[10]_i_1 
       (.I0(hsc2r_rcv_10),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [10]),
        .I3(\HSC2R_CDC[10].hsc2r_send_reg_n_0_[10] ),
        .O(p_32_out));
  FDRE \HSC2R_CDC[10].hsc2r_send_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_32_out),
        .Q(\HSC2R_CDC[10].hsc2r_send_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[10].hsc2r_vld_out_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_10),
        .Q(p_0_in10_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__3 \HSC2R_CDC[11].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[11].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_11),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [11]),
        .src_rcv(hsc2r_rcv_11),
        .src_send(\HSC2R_CDC[11].hsc2r_send_reg_n_0_[11] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[11].hsc2r_send[11]_i_1 
       (.I0(hsc2r_rcv_11),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [11]),
        .I3(\HSC2R_CDC[11].hsc2r_send_reg_n_0_[11] ),
        .O(p_29_out));
  FDRE \HSC2R_CDC[11].hsc2r_send_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_29_out),
        .Q(\HSC2R_CDC[11].hsc2r_send_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[11].hsc2r_vld_out_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_11),
        .Q(p_0_in9_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__4 \HSC2R_CDC[12].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_12),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [12]),
        .src_rcv(hsc2r_rcv_12),
        .src_send(\HSC2R_CDC[12].hsc2r_send_reg_n_0_[12] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[12].hsc2r_send[12]_i_1 
       (.I0(hsc2r_rcv_12),
        .I1(m_axis_aresetn),
        .I2(dout[0]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[12].hsc2r_send_reg_n_0_[12] ),
        .O(p_26_out));
  FDRE \HSC2R_CDC[12].hsc2r_send_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_26_out),
        .Q(\HSC2R_CDC[12].hsc2r_send_reg_n_0_[12] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__5 \HSC2R_CDC[13].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_13),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [13]),
        .src_rcv(hsc2r_rcv_13),
        .src_send(\HSC2R_CDC[13].hsc2r_send_reg_n_0_[13] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[13].hsc2r_send[13]_i_1 
       (.I0(hsc2r_rcv_13),
        .I1(m_axis_aresetn),
        .I2(dout[1]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[13].hsc2r_send_reg_n_0_[13] ),
        .O(p_23_out));
  FDRE \HSC2R_CDC[13].hsc2r_send_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_23_out),
        .Q(\HSC2R_CDC[13].hsc2r_send_reg_n_0_[13] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__6 \HSC2R_CDC[14].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_14),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [14]),
        .src_rcv(hsc2r_rcv_14),
        .src_send(\HSC2R_CDC[14].hsc2r_send_reg_n_0_[14] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[14].hsc2r_send[14]_i_1 
       (.I0(hsc2r_rcv_14),
        .I1(m_axis_aresetn),
        .I2(dout[2]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[14].hsc2r_send_reg_n_0_[14] ),
        .O(p_20_out));
  FDRE \HSC2R_CDC[14].hsc2r_send_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_20_out),
        .Q(\HSC2R_CDC[14].hsc2r_send_reg_n_0_[14] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__7 \HSC2R_CDC[15].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_15),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [15]),
        .src_rcv(hsc2r_rcv_15),
        .src_send(\HSC2R_CDC[15].hsc2r_send_reg_n_0_[15] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[15].hsc2r_send[15]_i_1 
       (.I0(hsc2r_rcv_15),
        .I1(m_axis_aresetn),
        .I2(dout[3]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[15].hsc2r_send_reg_n_0_[15] ),
        .O(p_17_out));
  FDRE \HSC2R_CDC[15].hsc2r_send_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_17_out),
        .Q(\HSC2R_CDC[15].hsc2r_send_reg_n_0_[15] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__8 \HSC2R_CDC[16].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_16),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [16]),
        .src_rcv(hsc2r_rcv_16),
        .src_send(\HSC2R_CDC[16].hsc2r_send_reg_n_0_[16] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[16].hsc2r_send[16]_i_1 
       (.I0(hsc2r_rcv_16),
        .I1(m_axis_aresetn),
        .I2(dout[4]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[16].hsc2r_send_reg_n_0_[16] ),
        .O(p_14_out));
  FDRE \HSC2R_CDC[16].hsc2r_send_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_14_out),
        .Q(\HSC2R_CDC[16].hsc2r_send_reg_n_0_[16] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__9 \HSC2R_CDC[17].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_17),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [17]),
        .src_rcv(hsc2r_rcv_17),
        .src_send(\HSC2R_CDC[17].hsc2r_send_reg_n_0_[17] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[17].hsc2r_send[17]_i_1 
       (.I0(hsc2r_rcv_17),
        .I1(m_axis_aresetn),
        .I2(dout[5]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[17].hsc2r_send_reg_n_0_[17] ),
        .O(p_11_out));
  FDRE \HSC2R_CDC[17].hsc2r_send_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_11_out),
        .Q(\HSC2R_CDC[17].hsc2r_send_reg_n_0_[17] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__10 \HSC2R_CDC[18].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_18),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [18]),
        .src_rcv(hsc2r_rcv_18),
        .src_send(\HSC2R_CDC[18].hsc2r_send_reg_n_0_[18] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[18].hsc2r_send[18]_i_1 
       (.I0(hsc2r_rcv_18),
        .I1(m_axis_aresetn),
        .I2(dout[6]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[18].hsc2r_send_reg_n_0_[18] ),
        .O(p_8_out));
  FDRE \HSC2R_CDC[18].hsc2r_send_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_8_out),
        .Q(\HSC2R_CDC[18].hsc2r_send_reg_n_0_[18] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__11 \HSC2R_CDC[19].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_19),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [19]),
        .src_rcv(hsc2r_rcv_19),
        .src_send(\HSC2R_CDC[19].hsc2r_send_reg_n_0_[19] ));
  LUT6 #(
    .INIT(64'h4444444440000000)) 
    \HSC2R_CDC[19].hsc2r_send[19]_i_1 
       (.I0(hsc2r_rcv_19),
        .I1(m_axis_aresetn),
        .I2(dout[7]),
        .I3(pkt_valid),
        .I4(dout[8]),
        .I5(\HSC2R_CDC[19].hsc2r_send_reg_n_0_[19] ),
        .O(p_5_out));
  FDRE \HSC2R_CDC[19].hsc2r_send_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_5_out),
        .Q(\HSC2R_CDC[19].hsc2r_send_reg_n_0_[19] ),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__12 \HSC2R_CDC[1].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[1].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_1),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [1]),
        .src_rcv(hsc2r_rcv_1),
        .src_send(\HSC2R_CDC[1].hsc2r_send_reg_n_0_[1] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[1].hsc2r_send[1]_i_1 
       (.I0(hsc2r_rcv_1),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [1]),
        .I3(\HSC2R_CDC[1].hsc2r_send_reg_n_0_[1] ),
        .O(p_59_out));
  FDRE \HSC2R_CDC[1].hsc2r_send_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_59_out),
        .Q(\HSC2R_CDC[1].hsc2r_send_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[1].hsc2r_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_1),
        .Q(p_0_in19_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__13 \HSC2R_CDC[20].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[20].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_20),
        .src_clk(m_axis_aclk),
        .src_in(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ),
        .src_rcv(hsc2r_rcv_20),
        .src_send(\HSC2R_CDC[20].hsc2r_send_reg_n_0_[20] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[20].hsc2r_send[20]_i_1 
       (.I0(hsc2r_rcv_20),
        .I1(m_axis_aresetn),
        .I2(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ),
        .I3(\HSC2R_CDC[20].hsc2r_send_reg_n_0_[20] ),
        .O(p_2_out));
  FDRE \HSC2R_CDC[20].hsc2r_send_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(\HSC2R_CDC[20].hsc2r_send_reg_n_0_[20] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[20].hsc2r_vld_out_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_20),
        .Q(p_0_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__14 \HSC2R_CDC[2].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[2].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_2),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [2]),
        .src_rcv(hsc2r_rcv_2),
        .src_send(\HSC2R_CDC[2].hsc2r_send_reg_n_0_[2] ));
  LUT5 #(
    .INIT(32'h44440040)) 
    \HSC2R_CDC[2].hsc2r_send[2]_i_1 
       (.I0(hsc2r_rcv_2),
        .I1(m_axis_aresetn),
        .I2(\errframedata_d1_reg[3] [1]),
        .I3(\ERR_FRAME_DATA[1].errframedata_reg[1] ),
        .I4(\HSC2R_CDC[2].hsc2r_send_reg_n_0_[2] ),
        .O(p_56_out));
  FDRE \HSC2R_CDC[2].hsc2r_send_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_56_out),
        .Q(\HSC2R_CDC[2].hsc2r_send_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[2].hsc2r_vld_out_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_2),
        .Q(p_0_in18_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__15 \HSC2R_CDC[3].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[3].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_3),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [3]),
        .src_rcv(hsc2r_rcv_3),
        .src_send(\HSC2R_CDC[3].hsc2r_send_reg_n_0_[3] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[3].hsc2r_send[3]_i_1 
       (.I0(hsc2r_rcv_3),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [3]),
        .I3(\HSC2R_CDC[3].hsc2r_send_reg_n_0_[3] ),
        .O(p_53_out));
  FDRE \HSC2R_CDC[3].hsc2r_send_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_53_out),
        .Q(\HSC2R_CDC[3].hsc2r_send_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[3].hsc2r_vld_out_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_3),
        .Q(p_0_in17_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__16 \HSC2R_CDC[4].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[4].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_4),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [4]),
        .src_rcv(hsc2r_rcv_4),
        .src_send(\HSC2R_CDC[4].hsc2r_send_reg_n_0_[4] ));
  LUT5 #(
    .INIT(32'h44440040)) 
    \HSC2R_CDC[4].hsc2r_send[4]_i_1 
       (.I0(hsc2r_rcv_4),
        .I1(m_axis_aresetn),
        .I2(\errframedata_d1_reg[3] [2]),
        .I3(\ERR_FRAME_DATA[2].errframedata_reg[2] ),
        .I4(\HSC2R_CDC[4].hsc2r_send_reg_n_0_[4] ),
        .O(p_50_out));
  FDRE \HSC2R_CDC[4].hsc2r_send_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_50_out),
        .Q(\HSC2R_CDC[4].hsc2r_send_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[4].hsc2r_vld_out_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_4),
        .Q(p_0_in16_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__17 \HSC2R_CDC[5].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[5].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_5),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [5]),
        .src_rcv(hsc2r_rcv_5),
        .src_send(\HSC2R_CDC[5].hsc2r_send_reg_n_0_[5] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[5].hsc2r_send[5]_i_1 
       (.I0(hsc2r_rcv_5),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [5]),
        .I3(\HSC2R_CDC[5].hsc2r_send_reg_n_0_[5] ),
        .O(p_47_out));
  FDRE \HSC2R_CDC[5].hsc2r_send_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_47_out),
        .Q(\HSC2R_CDC[5].hsc2r_send_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[5].hsc2r_vld_out_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_5),
        .Q(p_0_in15_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__18 \HSC2R_CDC[6].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[6].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_6),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [6]),
        .src_rcv(hsc2r_rcv_6),
        .src_send(\HSC2R_CDC[6].hsc2r_send_reg_n_0_[6] ));
  LUT5 #(
    .INIT(32'h44440040)) 
    \HSC2R_CDC[6].hsc2r_send[6]_i_1 
       (.I0(hsc2r_rcv_6),
        .I1(m_axis_aresetn),
        .I2(\errframedata_d1_reg[3] [3]),
        .I3(p_0_in_0),
        .I4(\HSC2R_CDC[6].hsc2r_send_reg_n_0_[6] ),
        .O(p_44_out));
  FDRE \HSC2R_CDC[6].hsc2r_send_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_44_out),
        .Q(\HSC2R_CDC[6].hsc2r_send_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[6].hsc2r_vld_out_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_6),
        .Q(p_0_in14_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__19 \HSC2R_CDC[7].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[7].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_7),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [7]),
        .src_rcv(hsc2r_rcv_7),
        .src_send(\HSC2R_CDC[7].hsc2r_send_reg_n_0_[7] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[7].hsc2r_send[7]_i_1 
       (.I0(hsc2r_rcv_7),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [7]),
        .I3(\HSC2R_CDC[7].hsc2r_send_reg_n_0_[7] ),
        .O(p_41_out));
  FDRE \HSC2R_CDC[7].hsc2r_send_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_41_out),
        .Q(\HSC2R_CDC[7].hsc2r_send_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[7].hsc2r_vld_out_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_7),
        .Q(p_0_in13_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__xdcDup__20 \HSC2R_CDC[8].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[8].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_8),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [8]),
        .src_rcv(hsc2r_rcv_8),
        .src_send(\HSC2R_CDC[8].hsc2r_send_reg_n_0_[8] ));
  LUT5 #(
    .INIT(32'h44444000)) 
    \HSC2R_CDC[8].hsc2r_send[8]_i_1 
       (.I0(hsc2r_rcv_8),
        .I1(m_axis_aresetn),
        .I2(di_not_supported_i),
        .I3(diwc_valid),
        .I4(\HSC2R_CDC[8].hsc2r_send_reg_n_0_[8] ),
        .O(p_38_out));
  FDRE \HSC2R_CDC[8].hsc2r_send_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_38_out),
        .Q(\HSC2R_CDC[8].hsc2r_send_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[8].hsc2r_vld_out_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_8),
        .Q(p_0_in12_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake \HSC2R_CDC[9].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[9].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_9),
        .src_clk(m_axis_aclk),
        .src_in(\gpr1.dout_i_reg[39] [9]),
        .src_rcv(hsc2r_rcv_9),
        .src_send(\HSC2R_CDC[9].hsc2r_send_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'h4440)) 
    \HSC2R_CDC[9].hsc2r_send[9]_i_1 
       (.I0(hsc2r_rcv_9),
        .I1(m_axis_aresetn),
        .I2(\gpr1.dout_i_reg[39] [9]),
        .I3(\HSC2R_CDC[9].hsc2r_send_reg_n_0_[9] ),
        .O(p_35_out));
  FDRE \HSC2R_CDC[9].hsc2r_send_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_35_out),
        .Q(\HSC2R_CDC[9].hsc2r_send_reg_n_0_[9] ),
        .R(1'b0));
  FDRE \HSC2R_CDC[9].hsc2r_vld_out_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_9),
        .Q(p_0_in11_in),
        .R(SS));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__49 \PPI_CL_ASYNC[0].xpm_single_cl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(D[0]),
        .src_clk(1'b0),
        .src_in(cl_rxulpsclknot));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__50 \PPI_CL_ASYNC[1].xpm_single_cl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(D[1]),
        .src_clk(1'b0),
        .src_in(cl_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__33 \PPI_DL_ASYNC[0].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[0]),
        .src_clk(1'b0),
        .src_in(dl0_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__43 \PPI_DL_ASYNC[10].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[10]),
        .src_clk(1'b0),
        .src_in(dl2_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__44 \PPI_DL_ASYNC[11].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[11]),
        .src_clk(1'b0),
        .src_in(dl2_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__45 \PPI_DL_ASYNC[12].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[12]),
        .src_clk(1'b0),
        .src_in(dl3_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__46 \PPI_DL_ASYNC[13].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[13]),
        .src_clk(1'b0),
        .src_in(dl3_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__47 \PPI_DL_ASYNC[14].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[14]),
        .src_clk(1'b0),
        .src_in(dl3_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__48 \PPI_DL_ASYNC[15].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[15]),
        .src_clk(1'b0),
        .src_in(dl3_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__34 \PPI_DL_ASYNC[1].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[1]),
        .src_clk(1'b0),
        .src_in(dl0_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__35 \PPI_DL_ASYNC[2].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[2]),
        .src_clk(1'b0),
        .src_in(dl0_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__36 \PPI_DL_ASYNC[3].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[3]),
        .src_clk(1'b0),
        .src_in(dl0_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__37 \PPI_DL_ASYNC[4].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[4]),
        .src_clk(1'b0),
        .src_in(dl1_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__38 \PPI_DL_ASYNC[5].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[5]),
        .src_clk(1'b0),
        .src_in(dl1_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__39 \PPI_DL_ASYNC[6].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[6]),
        .src_clk(1'b0),
        .src_in(dl1_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__40 \PPI_DL_ASYNC[7].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[7]),
        .src_clk(1'b0),
        .src_in(dl1_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__41 \PPI_DL_ASYNC[8].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[8]),
        .src_clk(1'b0),
        .src_in(dl2_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__42 \PPI_DL_ASYNC[9].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[9]),
        .src_clk(1'b0),
        .src_in(dl2_erresc));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__parameterized0 ecc_cdc
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(ecc_vld_out_i),
        .dest_req(ecc_vld_i),
        .src_clk(m_axis_aclk),
        .src_in(Q),
        .src_rcv(ecc_rcv),
        .src_send(ecc_send));
  LUT4 #(
    .INIT(16'h00E0)) 
    ecc_send_i_1
       (.I0(ecc_send),
        .I1(phecc_done),
        .I2(m_axis_aresetn),
        .I3(ecc_rcv),
        .O(ecc_send_i_1_n_0));
  FDRE ecc_send_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_send_i_1_n_0),
        .Q(ecc_send),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \ecc_vld_out[0]_i_1 
       (.I0(ecc_vld_i),
        .I1(ecc_vld_out_i[0]),
        .O(\ecc_vld_out[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \ecc_vld_out[1]_i_1 
       (.I0(ecc_vld_i),
        .I1(ecc_vld_out_i[1]),
        .O(\ecc_vld_out[1]_i_1_n_0 ));
  FDRE \ecc_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\ecc_vld_out[0]_i_1_n_0 ),
        .Q(ecc_vld_out[0]),
        .R(SS));
  FDRE \ecc_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\ecc_vld_out[1]_i_1_n_0 ),
        .Q(ecc_vld_out[1]),
        .R(SS));
  FDRE ecc_vld_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ecc_vld_i),
        .Q(ecc_vld),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_10
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in15_in),
        .I2(isr_i[5]),
        .O(interrupt[5]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_11
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in18_in),
        .I2(isr_i[2]),
        .O(interrupt[2]));
  LUT4 #(
    .INIT(16'h5540)) 
    interrupt_INST_0_i_14
       (.I0(\core_config_reg[1] ),
        .I1(ecc_vld),
        .I2(ecc_vld_out[1]),
        .I3(isr_i[11]),
        .O(interrupt[9]));
  LUT4 #(
    .INIT(16'h5540)) 
    interrupt_INST_0_i_15
       (.I0(\core_config_reg[1] ),
        .I1(ecc_vld),
        .I2(ecc_vld_out[0]),
        .I3(isr_i[10]),
        .O(interrupt[8]));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    interrupt_INST_0_i_16
       (.I0(isr_o[9]),
        .I1(\ier_reg[31] [0]),
        .I2(isr_o[31]),
        .I3(\ier_reg[31] [2]),
        .I4(\ier_reg[31] [1]),
        .I5(isr_o[22]),
        .O(interrupt_0));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_17
       (.I0(\core_config_reg[1] ),
        .I1(dest_out[0]),
        .I2(\isr_i_reg[31]_0 [8]),
        .O(interrupt[14]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_18
       (.I0(\core_config_reg[1] ),
        .I1(dest_out[1]),
        .I2(\isr_i_reg[31]_0 [10]),
        .O(interrupt[15]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_2
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in14_in),
        .I2(\isr_i_reg[31]_0 [2]),
        .O(interrupt[6]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_20
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in19_in),
        .I2(\isr_i_reg[31]_0 [1]),
        .O(interrupt[1]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_22
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in12_in),
        .I2(\isr_i_reg[31]_0 [4]),
        .O(interrupt[7]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_23
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in11_in),
        .I2(\isr_i_reg[31]_0 [5]),
        .O(isr_o[9]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_24
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in),
        .I2(\isr_i_reg[31]_0 [12]),
        .O(isr_o[31]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_25
       (.I0(\core_config_reg[1] ),
        .I1(dest_pulse),
        .I2(\isr_i_reg[31]_0 [11]),
        .O(isr_o[22]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h54)) 
    interrupt_INST_0_i_7
       (.I0(\core_config_reg[1] ),
        .I1(s0_i),
        .I2(isr_i[14]),
        .O(interrupt[10]));
  LUT4 #(
    .INIT(16'h5554)) 
    interrupt_INST_0_i_8
       (.I0(\core_config_reg[1] ),
        .I1(lx_info_all[3]),
        .I2(\isr_i[17]_i_2_n_0 ),
        .I3(isr_i[17]),
        .O(interrupt[13]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(isr_0),
        .I2(\isr_i_reg[31]_0 [0]),
        .I3(wr2_isr),
        .O(p_1_in[0]));
  LUT5 #(
    .INIT(32'hD5C0FFC0)) 
    \isr_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(ecc_vld),
        .I2(ecc_vld_out[0]),
        .I3(isr_i[10]),
        .I4(wr2_isr),
        .O(p_1_in[10]));
  LUT5 #(
    .INIT(32'hD5C0FFC0)) 
    \isr_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(ecc_vld),
        .I2(ecc_vld_out[1]),
        .I3(isr_i[11]),
        .I4(wr2_isr),
        .O(p_1_in[11]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(p_0_in10_in),
        .I2(\isr_i_reg[31]_0 [6]),
        .I3(wr2_isr),
        .O(p_1_in[12]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(p_0_in9_in),
        .I2(\isr_i_reg[31]_0 [7]),
        .I3(wr2_isr),
        .O(p_1_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(s0_i),
        .I2(isr_i[14]),
        .I3(wr2_isr),
        .O(p_1_in[14]));
  LUT6 #(
    .INIT(64'hFFFCFECCFFFCEECC)) 
    \isr_i[14]_i_2 
       (.I0(lx_info_all[8]),
        .I1(lx_info_all[0]),
        .I2(\prot_config_reg[1] [0]),
        .I3(\prot_config_reg[1] [1]),
        .I4(lx_info_all[4]),
        .I5(lx_info_all[12]),
        .O(s0_i));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(s1_i),
        .I2(isr_i[15]),
        .I3(wr2_isr),
        .O(p_1_in[15]));
  LUT6 #(
    .INIT(64'hFFFCFECCFFFCEECC)) 
    \isr_i[15]_i_2 
       (.I0(lx_info_all[9]),
        .I1(lx_info_all[1]),
        .I2(\prot_config_reg[1] [0]),
        .I3(\prot_config_reg[1] [1]),
        .I4(lx_info_all[5]),
        .I5(lx_info_all[13]),
        .O(s1_i));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(s2_i),
        .I2(isr_i[16]),
        .I3(wr2_isr),
        .O(p_1_in[16]));
  LUT6 #(
    .INIT(64'hFFFCFECCFFFCEECC)) 
    \isr_i[16]_i_2 
       (.I0(lx_info_all[10]),
        .I1(lx_info_all[2]),
        .I2(\prot_config_reg[1] [0]),
        .I3(\prot_config_reg[1] [1]),
        .I4(lx_info_all[6]),
        .I5(lx_info_all[14]),
        .O(s2_i));
  LUT5 #(
    .INIT(32'hEFEEFFEE)) 
    \isr_i[17]_i_1 
       (.I0(lx_info_all[3]),
        .I1(\isr_i[17]_i_2_n_0 ),
        .I2(s_axi_wdata[17]),
        .I3(isr_i[17]),
        .I4(wr2_isr),
        .O(p_1_in[17]));
  LUT6 #(
    .INIT(64'hFFFCFECCFFFCEECC)) 
    \isr_i[17]_i_2 
       (.I0(lx_info_all[11]),
        .I1(D[1]),
        .I2(\prot_config_reg[1] [0]),
        .I3(\prot_config_reg[1] [1]),
        .I4(lx_info_all[7]),
        .I5(lx_info_all[15]),
        .O(\isr_i[17]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(dest_out[0]),
        .I2(\isr_i_reg[31]_0 [8]),
        .I3(wr2_isr),
        .O(p_1_in[18]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(p_0_in19_in),
        .I2(\isr_i_reg[31]_0 [1]),
        .I3(wr2_isr),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[20]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(dest_out[1]),
        .I2(\isr_i_reg[31]_0 [10]),
        .I3(wr2_isr),
        .O(p_1_in[20]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[22]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(dest_pulse),
        .I2(\isr_i_reg[31]_0 [11]),
        .I3(wr2_isr),
        .O(p_1_in[22]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(p_0_in18_in),
        .I2(isr_i[2]),
        .I3(wr2_isr),
        .O(p_1_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[31]_i_2 
       (.I0(s_axi_wdata[21]),
        .I1(p_0_in),
        .I2(\isr_i_reg[31]_0 [12]),
        .I3(wr2_isr),
        .O(p_1_in[31]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(p_0_in17_in),
        .I2(isr_i[3]),
        .I3(wr2_isr),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(p_0_in16_in),
        .I2(isr_i[4]),
        .I3(wr2_isr),
        .O(p_1_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(p_0_in15_in),
        .I2(isr_i[5]),
        .I3(wr2_isr),
        .O(p_1_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(p_0_in14_in),
        .I2(\isr_i_reg[31]_0 [2]),
        .I3(wr2_isr),
        .O(p_1_in[6]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(p_0_in13_in),
        .I2(\isr_i_reg[31]_0 [3]),
        .I3(wr2_isr),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(p_0_in12_in),
        .I2(\isr_i_reg[31]_0 [4]),
        .I3(wr2_isr),
        .O(p_1_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(p_0_in11_in),
        .I2(\isr_i_reg[31]_0 [5]),
        .I3(wr2_isr),
        .O(p_1_in[9]));
  FDRE \isr_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[0]),
        .Q(\isr_i_reg[31]_0 [0]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[10]),
        .Q(isr_i[10]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[11]),
        .Q(isr_i[11]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[12]),
        .Q(\isr_i_reg[31]_0 [6]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[13]),
        .Q(\isr_i_reg[31]_0 [7]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[14]),
        .Q(isr_i[14]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[15]),
        .Q(isr_i[15]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[16]),
        .Q(isr_i[16]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[17]),
        .Q(isr_i[17]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[18]),
        .Q(\isr_i_reg[31]_0 [8]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\isr_i_reg[19]_0 ),
        .Q(\isr_i_reg[31]_0 [9]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[1]),
        .Q(\isr_i_reg[31]_0 [1]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[20]),
        .Q(\isr_i_reg[31]_0 [10]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[22]),
        .Q(\isr_i_reg[31]_0 [11]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[2]),
        .Q(isr_i[2]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[31]),
        .Q(\isr_i_reg[31]_0 [12]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[3]),
        .Q(isr_i[3]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[4]),
        .Q(isr_i[4]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[5]),
        .Q(isr_i[5]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[6]),
        .Q(\isr_i_reg[31]_0 [2]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[7]),
        .Q(\isr_i_reg[31]_0 [3]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[8]),
        .Q(\isr_i_reg[31]_0 [4]),
        .R(\core_config_reg[1]_0 ));
  FDRE \isr_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[9]),
        .Q(\isr_i_reg[31]_0 [5]),
        .R(\core_config_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \s_axi_rdata[0]_i_10 
       (.I0(\core_config_reg[1] ),
        .I1(isr_0),
        .I2(\isr_i_reg[31]_0 [0]),
        .O(interrupt[0]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \s_axi_rdata[15]_i_5 
       (.I0(\core_config_reg[1] ),
        .I1(s1_i),
        .I2(isr_i[15]),
        .O(interrupt[11]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \s_axi_rdata[16]_i_5 
       (.I0(\core_config_reg[1] ),
        .I1(s2_i),
        .I2(isr_i[16]),
        .O(interrupt[12]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \s_axi_rdata[3]_i_8 
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in17_in),
        .I2(isr_i[3]),
        .O(interrupt[3]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \s_axi_rdata[4]_i_8 
       (.I0(\core_config_reg[1] ),
        .I1(p_0_in16_in),
        .I2(isr_i[4]),
        .O(interrupt[4]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_array_single xpm_array_single_05
       (.dest_clk(s_axi_aclk),
        .dest_out(dest_out),
        .src_clk(m_axis_aclk),
        .src_in(src_in));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__1 xpm_pulse_02
       (.dest_clk(s_axi_aclk),
        .dest_pulse(dest_pulse),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(wc_err),
        .src_rst(SR));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_lane_merger" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_lane_merger
   (\pkt_fifo_cnt_reg[0]_0 ,
    o_pkt_prcng,
    wr_en,
    din,
    Q,
    l0_empty_reg_0,
    dl0_rxbyteclkhs,
    rd_en,
    dout,
    empty_fwft_i_reg,
    \goreg_dm.dout_i_reg[11] ,
    empty_fwft_i_reg_0,
    \goreg_dm.dout_i_reg[11]_0 ,
    empty,
    empty_fwft_i_reg_1,
    \goreg_dm.dout_i_reg[11]_1 ,
    empty_fwft_i_reg_2,
    empty_fwft_i_reg_3,
    empty_fwft_i_reg_4,
    \goreg_dm.dout_i_reg[10] ,
    dest_arst,
    \arststages_ff_reg[1] ,
    \arststages_ff_reg[1]_0 ,
    \active_lanes_reg[1] ,
    E,
    D);
  output \pkt_fifo_cnt_reg[0]_0 ;
  output o_pkt_prcng;
  output wr_en;
  output [41:0]din;
  output [1:0]Q;
  output l0_empty_reg_0;
  input dl0_rxbyteclkhs;
  input rd_en;
  input [11:0]dout;
  input empty_fwft_i_reg;
  input [10:0]\goreg_dm.dout_i_reg[11] ;
  input empty_fwft_i_reg_0;
  input [10:0]\goreg_dm.dout_i_reg[11]_0 ;
  input empty;
  input empty_fwft_i_reg_1;
  input [10:0]\goreg_dm.dout_i_reg[11]_1 ;
  input empty_fwft_i_reg_2;
  input empty_fwft_i_reg_3;
  input empty_fwft_i_reg_4;
  input \goreg_dm.dout_i_reg[10] ;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input \arststages_ff_reg[1]_0 ;
  input [1:0]\active_lanes_reg[1] ;
  input [0:0]E;
  input [9:0]D;

  wire \CSI_OPT3_OFF.ppi_fifo_i_4_n_0 ;
  wire \CSI_OPT3_OFF.ppi_fifo_i_5_n_0 ;
  wire [9:0]D;
  wire [0:0]E;
  wire [1:0]Q;
  wire [1:0]\active_lanes_reg[1] ;
  wire \arststages_ff_reg[1] ;
  wire \arststages_ff_reg[1]_0 ;
  wire buf0;
  wire \buf0_reg_n_0_[0] ;
  wire \buf0_reg_n_0_[1] ;
  wire \buf0_reg_n_0_[2] ;
  wire \buf0_reg_n_0_[3] ;
  wire \buf0_reg_n_0_[4] ;
  wire \buf0_reg_n_0_[5] ;
  wire \buf0_reg_n_0_[6] ;
  wire \buf0_reg_n_0_[7] ;
  wire \buf0_reg_n_0_[8] ;
  wire \buf0_reg_n_0_[9] ;
  wire buf1;
  wire \buf1_reg_n_0_[0] ;
  wire \buf1_reg_n_0_[1] ;
  wire \buf1_reg_n_0_[2] ;
  wire \buf1_reg_n_0_[3] ;
  wire \buf1_reg_n_0_[4] ;
  wire \buf1_reg_n_0_[5] ;
  wire \buf1_reg_n_0_[6] ;
  wire \buf1_reg_n_0_[7] ;
  wire \buf1_reg_n_0_[8] ;
  wire \buf1_reg_n_0_[9] ;
  wire buf2;
  wire \buf2_reg_n_0_[0] ;
  wire \buf2_reg_n_0_[1] ;
  wire \buf2_reg_n_0_[2] ;
  wire \buf2_reg_n_0_[3] ;
  wire \buf2_reg_n_0_[4] ;
  wire \buf2_reg_n_0_[5] ;
  wire \buf2_reg_n_0_[6] ;
  wire \buf2_reg_n_0_[7] ;
  wire \buf2_reg_n_0_[8] ;
  wire \buf2_reg_n_0_[9] ;
  wire dest_arst;
  wire [41:0]din;
  wire dl0_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire empty_fwft_i_reg_0;
  wire empty_fwft_i_reg_1;
  wire empty_fwft_i_reg_2;
  wire empty_fwft_i_reg_3;
  wire empty_fwft_i_reg_4;
  wire fifos_empty;
  wire fifos_empty0;
  wire \goreg_dm.dout_i_reg[10] ;
  wire [10:0]\goreg_dm.dout_i_reg[11] ;
  wire [10:0]\goreg_dm.dout_i_reg[11]_0 ;
  wire [10:0]\goreg_dm.dout_i_reg[11]_1 ;
  wire l0_empty;
  wire l0_empty_i_1_n_0;
  wire l0_empty_reg_0;
  wire l1_empty;
  wire l1_empty_i_1_n_0;
  wire l2_empty;
  wire l2_empty_i_1_n_0;
  wire l3_empty;
  wire l3_empty_i_1_n_0;
  wire [4:3]lane_mux_sel;
  wire mst_rd_en_d1;
  wire mst_rd_en_d1_i_2_n_0;
  wire o_pkt_prcng;
  wire o_pkt_prcng_d1;
  wire o_pkt_prcng_d1_i_2_n_0;
  wire [9:0]p_0_in;
  wire p_17_in;
  wire [39:0]p_1_in;
  wire pkt_1st_last;
  wire pkt_1st_last0;
  wire \pkt_fifo_cnt[0]_i_1_n_0 ;
  wire \pkt_fifo_cnt[1]_i_2_n_0 ;
  wire \pkt_fifo_cnt_reg[0]_0 ;
  wire \pkt_fifo_wdata[0]_i_2_n_0 ;
  wire \pkt_fifo_wdata[10]_i_2_n_0 ;
  wire \pkt_fifo_wdata[10]_i_3_n_0 ;
  wire \pkt_fifo_wdata[10]_i_4_n_0 ;
  wire \pkt_fifo_wdata[11]_i_2_n_0 ;
  wire \pkt_fifo_wdata[11]_i_3_n_0 ;
  wire \pkt_fifo_wdata[12]_i_2_n_0 ;
  wire \pkt_fifo_wdata[12]_i_3_n_0 ;
  wire \pkt_fifo_wdata[13]_i_2_n_0 ;
  wire \pkt_fifo_wdata[13]_i_3_n_0 ;
  wire \pkt_fifo_wdata[14]_i_2_n_0 ;
  wire \pkt_fifo_wdata[14]_i_3_n_0 ;
  wire \pkt_fifo_wdata[15]_i_2_n_0 ;
  wire \pkt_fifo_wdata[15]_i_3_n_0 ;
  wire \pkt_fifo_wdata[16]_i_2_n_0 ;
  wire \pkt_fifo_wdata[16]_i_3_n_0 ;
  wire \pkt_fifo_wdata[17]_i_2_n_0 ;
  wire \pkt_fifo_wdata[17]_i_3_n_0 ;
  wire \pkt_fifo_wdata[18]_i_2_n_0 ;
  wire \pkt_fifo_wdata[18]_i_3_n_0 ;
  wire \pkt_fifo_wdata[19]_i_1_n_0 ;
  wire \pkt_fifo_wdata[19]_i_3_n_0 ;
  wire \pkt_fifo_wdata[19]_i_4_n_0 ;
  wire \pkt_fifo_wdata[19]_i_5_n_0 ;
  wire \pkt_fifo_wdata[19]_i_6_n_0 ;
  wire \pkt_fifo_wdata[1]_i_2_n_0 ;
  wire \pkt_fifo_wdata[20]_i_2_n_0 ;
  wire \pkt_fifo_wdata[21]_i_2_n_0 ;
  wire \pkt_fifo_wdata[22]_i_2_n_0 ;
  wire \pkt_fifo_wdata[23]_i_2_n_0 ;
  wire \pkt_fifo_wdata[24]_i_2_n_0 ;
  wire \pkt_fifo_wdata[25]_i_2_n_0 ;
  wire \pkt_fifo_wdata[26]_i_2_n_0 ;
  wire \pkt_fifo_wdata[27]_i_2_n_0 ;
  wire \pkt_fifo_wdata[28]_i_2_n_0 ;
  wire \pkt_fifo_wdata[29]_i_1_n_0 ;
  wire \pkt_fifo_wdata[29]_i_3_n_0 ;
  wire \pkt_fifo_wdata[29]_i_4_n_0 ;
  wire \pkt_fifo_wdata[29]_i_5_n_0 ;
  wire \pkt_fifo_wdata[29]_i_6_n_0 ;
  wire \pkt_fifo_wdata[2]_i_2_n_0 ;
  wire \pkt_fifo_wdata[30]_i_2_n_0 ;
  wire \pkt_fifo_wdata[31]_i_2_n_0 ;
  wire \pkt_fifo_wdata[32]_i_2_n_0 ;
  wire \pkt_fifo_wdata[33]_i_2_n_0 ;
  wire \pkt_fifo_wdata[34]_i_2_n_0 ;
  wire \pkt_fifo_wdata[35]_i_2_n_0 ;
  wire \pkt_fifo_wdata[36]_i_2_n_0 ;
  wire \pkt_fifo_wdata[37]_i_2_n_0 ;
  wire \pkt_fifo_wdata[38]_i_2_n_0 ;
  wire \pkt_fifo_wdata[39]_i_1_n_0 ;
  wire \pkt_fifo_wdata[39]_i_3_n_0 ;
  wire \pkt_fifo_wdata[3]_i_2_n_0 ;
  wire \pkt_fifo_wdata[40]_i_1_n_0 ;
  wire \pkt_fifo_wdata[4]_i_2_n_0 ;
  wire \pkt_fifo_wdata[5]_i_2_n_0 ;
  wire \pkt_fifo_wdata[6]_i_2_n_0 ;
  wire \pkt_fifo_wdata[7]_i_2_n_0 ;
  wire \pkt_fifo_wdata[8]_i_2_n_0 ;
  wire \pkt_fifo_wdata[9]_i_2_n_0 ;
  wire \pkt_fifo_wdata[9]_i_3_n_0 ;
  wire \pkt_fifo_wdata[9]_i_4_n_0 ;
  wire pkt_fifo_wen_i_1_n_0;
  wire pkt_fifo_wen_i_2_n_0;
  wire rd_en;
  wire wr_en;

  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT5 #(
    .INIT(32'hFFFFFFF1)) 
    \CSI_OPT3_OFF.ppi_fifo_i_3 
       (.I0(mst_rd_en_d1),
        .I1(mst_rd_en_d1_i_2_n_0),
        .I2(fifos_empty),
        .I3(\CSI_OPT3_OFF.ppi_fifo_i_4_n_0 ),
        .I4(\CSI_OPT3_OFF.ppi_fifo_i_5_n_0 ),
        .O(l0_empty_reg_0));
  LUT6 #(
    .INIT(64'h4F44444400000000)) 
    \CSI_OPT3_OFF.ppi_fifo_i_4 
       (.I0(l2_empty),
        .I1(empty),
        .I2(l3_empty),
        .I3(empty_fwft_i_reg_1),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\CSI_OPT3_OFF.ppi_fifo_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00E0EEEE00E000E0)) 
    \CSI_OPT3_OFF.ppi_fifo_i_5 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(empty_fwft_i_reg_2),
        .I3(l0_empty),
        .I4(l1_empty),
        .I5(empty_fwft_i_reg_3),
        .O(\CSI_OPT3_OFF.ppi_fifo_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h00AAAA02)) 
    \buf0[9]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(lane_mux_sel[3]),
        .I2(lane_mux_sel[4]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(buf0));
  FDCE \buf0_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [0]),
        .Q(\buf0_reg_n_0_[0] ));
  FDCE \buf0_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [1]),
        .Q(\buf0_reg_n_0_[1] ));
  FDCE \buf0_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [2]),
        .Q(\buf0_reg_n_0_[2] ));
  FDCE \buf0_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [3]),
        .Q(\buf0_reg_n_0_[3] ));
  FDCE \buf0_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [4]),
        .Q(\buf0_reg_n_0_[4] ));
  FDCE \buf0_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [5]),
        .Q(\buf0_reg_n_0_[5] ));
  FDCE \buf0_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [6]),
        .Q(\buf0_reg_n_0_[6] ));
  FDCE \buf0_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [7]),
        .Q(\buf0_reg_n_0_[7] ));
  FDCE \buf0_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [8]),
        .Q(\buf0_reg_n_0_[8] ));
  FDCE \buf0_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf0),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[11] [9]),
        .Q(\buf0_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[0]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [0]),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[1]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [1]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [1]),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[2]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [2]),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[3]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [3]),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[4]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [4]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [4]),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[5]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [5]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [5]),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[6]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [6]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [6]),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[7]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [7]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [7]),
        .O(p_0_in[7]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[8]_i_1 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [8]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [8]),
        .O(p_0_in[8]));
  LUT5 #(
    .INIT(32'h282A2828)) 
    \buf1[9]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .O(buf1));
  LUT4 #(
    .INIT(16'hABA8)) 
    \buf1[9]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [9]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11] [9]),
        .O(p_0_in[9]));
  FDCE \buf1_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[0]),
        .Q(\buf1_reg_n_0_[0] ));
  FDCE \buf1_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[1]),
        .Q(\buf1_reg_n_0_[1] ));
  FDCE \buf1_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[2]),
        .Q(\buf1_reg_n_0_[2] ));
  FDCE \buf1_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[3]),
        .Q(\buf1_reg_n_0_[3] ));
  FDCE \buf1_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[4]),
        .Q(\buf1_reg_n_0_[4] ));
  FDCE \buf1_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[5]),
        .Q(\buf1_reg_n_0_[5] ));
  FDCE \buf1_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[6]),
        .Q(\buf1_reg_n_0_[6] ));
  FDCE \buf1_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[7]),
        .Q(\buf1_reg_n_0_[7] ));
  FDCE \buf1_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[8]),
        .Q(\buf1_reg_n_0_[8] ));
  FDCE \buf1_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_0_in[9]),
        .Q(\buf1_reg_n_0_[9] ));
  LUT5 #(
    .INIT(32'h00AA0008)) 
    \buf2[9]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(lane_mux_sel[4]),
        .I2(lane_mux_sel[3]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(buf2));
  FDCE \buf2_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[0]),
        .Q(\buf2_reg_n_0_[0] ));
  FDCE \buf2_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[1]),
        .Q(\buf2_reg_n_0_[1] ));
  FDCE \buf2_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[2]),
        .Q(\buf2_reg_n_0_[2] ));
  FDCE \buf2_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[3]),
        .Q(\buf2_reg_n_0_[3] ));
  FDCE \buf2_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[4]),
        .Q(\buf2_reg_n_0_[4] ));
  FDCE \buf2_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[5]),
        .Q(\buf2_reg_n_0_[5] ));
  FDCE \buf2_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[6]),
        .Q(\buf2_reg_n_0_[6] ));
  FDCE \buf2_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[7]),
        .Q(\buf2_reg_n_0_[7] ));
  FDCE \buf2_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[8]),
        .Q(\buf2_reg_n_0_[8] ));
  FDCE \buf2_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(buf2),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(D[9]),
        .Q(\buf2_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'h8000)) 
    fifos_empty_i_1
       (.I0(l2_empty),
        .I1(l0_empty),
        .I2(l1_empty),
        .I3(l3_empty),
        .O(fifos_empty0));
  FDRE fifos_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(fifos_empty0),
        .Q(fifos_empty),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h1F110F00)) 
    l0_empty_i_1
       (.I0(empty_fwft_i_reg_2),
        .I1(l0_empty_reg_0),
        .I2(fifos_empty),
        .I3(l0_empty),
        .I4(\goreg_dm.dout_i_reg[11] [10]),
        .O(l0_empty_i_1_n_0));
  FDRE l0_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(l0_empty_i_1_n_0),
        .Q(l0_empty),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h888F888FFFFF888F)) 
    l1_empty_i_1
       (.I0(empty_fwft_i_reg_0),
        .I1(\goreg_dm.dout_i_reg[11]_0 [10]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(l1_empty),
        .I5(fifos_empty),
        .O(l1_empty_i_1_n_0));
  FDRE l1_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(l1_empty_i_1_n_0),
        .Q(l1_empty),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h10FF10FFFFFF10FF)) 
    l2_empty_i_1
       (.I0(empty),
        .I1(l0_empty_reg_0),
        .I2(\goreg_dm.dout_i_reg[11]_1 [10]),
        .I3(Q[1]),
        .I4(l2_empty),
        .I5(fifos_empty),
        .O(l2_empty_i_1_n_0));
  FDRE l2_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(l2_empty_i_1_n_0),
        .Q(l2_empty),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8FFF8FFFFFFF8FFF)) 
    l3_empty_i_1
       (.I0(rd_en),
        .I1(dout[11]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(l3_empty),
        .I5(fifos_empty),
        .O(l3_empty_i_1_n_0));
  FDRE l3_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(l3_empty_i_1_n_0),
        .Q(l3_empty),
        .R(1'b0));
  FDRE \lanes_updated_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(empty_fwft_i_reg_2),
        .D(\active_lanes_reg[1] [0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \lanes_updated_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(empty_fwft_i_reg_2),
        .D(\active_lanes_reg[1] [1]),
        .Q(Q[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    mst_rd_en_d1_i_1
       (.I0(mst_rd_en_d1),
        .I1(mst_rd_en_d1_i_2_n_0),
        .I2(fifos_empty),
        .O(p_17_in));
  LUT6 #(
    .INIT(64'hFFFFFFFF44C40000)) 
    mst_rd_en_d1_i_2
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(dout[10]),
        .I3(empty_fwft_i_reg_1),
        .I4(empty_fwft_i_reg_4),
        .I5(\goreg_dm.dout_i_reg[10] ),
        .O(mst_rd_en_d1_i_2_n_0));
  FDCE mst_rd_en_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_17_in),
        .Q(mst_rd_en_d1));
  LUT5 #(
    .INIT(32'h0000FF02)) 
    o_pkt_prcng_d1_i_1
       (.I0(mst_rd_en_d1_i_2_n_0),
        .I1(pkt_1st_last),
        .I2(empty_fwft_i_reg_2),
        .I3(o_pkt_prcng_d1),
        .I4(o_pkt_prcng_d1_i_2_n_0),
        .O(o_pkt_prcng));
  LUT4 #(
    .INIT(16'hFF7F)) 
    o_pkt_prcng_d1_i_2
       (.I0(dest_arst),
        .I1(\arststages_ff_reg[1] ),
        .I2(\arststages_ff_reg[1]_0 ),
        .I3(fifos_empty),
        .O(o_pkt_prcng_d1_i_2_n_0));
  FDRE o_pkt_prcng_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(o_pkt_prcng),
        .Q(o_pkt_prcng_d1),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h80000000)) 
    pkt_1st_last_i_1
       (.I0(empty_fwft_i_reg),
        .I1(mst_rd_en_d1_i_2_n_0),
        .I2(\goreg_dm.dout_i_reg[11] [10]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(pkt_1st_last0));
  FDRE pkt_1st_last_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_1st_last0),
        .Q(pkt_1st_last),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \pkt_fifo_cnt[0]_i_1 
       (.I0(o_pkt_prcng),
        .I1(lane_mux_sel[3]),
        .O(\pkt_fifo_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \pkt_fifo_cnt[1]_i_2 
       (.I0(o_pkt_prcng),
        .I1(lane_mux_sel[4]),
        .I2(lane_mux_sel[3]),
        .O(\pkt_fifo_cnt[1]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \pkt_fifo_cnt[1]_i_3 
       (.I0(dest_arst),
        .O(\pkt_fifo_cnt_reg[0]_0 ));
  FDCE \pkt_fifo_cnt_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(E),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\pkt_fifo_cnt[0]_i_1_n_0 ),
        .Q(lane_mux_sel[3]));
  FDCE \pkt_fifo_cnt_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(E),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\pkt_fifo_cnt[1]_i_2_n_0 ),
        .Q(lane_mux_sel[4]));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[0]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [0]),
        .I2(\buf0_reg_n_0_[0] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[0]_i_2_n_0 ),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[0]_i_2 
       (.I0(\buf1_reg_n_0_[0] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[0] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00A80000)) 
    \pkt_fifo_wdata[10]_i_1 
       (.I0(Q[1]),
        .I1(lane_mux_sel[3]),
        .I2(lane_mux_sel[4]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[10]_i_2_n_0 ),
        .I5(\pkt_fifo_wdata[10]_i_3_n_0 ),
        .O(p_1_in[10]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[10]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11] [0]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[0] ),
        .I3(lane_mux_sel[4]),
        .I4(\buf1_reg_n_0_[0] ),
        .O(\pkt_fifo_wdata[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFFAABAAAAAAAAA)) 
    \pkt_fifo_wdata[10]_i_3 
       (.I0(\pkt_fifo_wdata[10]_i_4_n_0 ),
        .I1(lane_mux_sel[4]),
        .I2(Q[1]),
        .I3(lane_mux_sel[3]),
        .I4(Q[0]),
        .I5(\goreg_dm.dout_i_reg[11]_0 [0]),
        .O(\pkt_fifo_wdata[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5554000400540004)) 
    \pkt_fifo_wdata[10]_i_4 
       (.I0(Q[1]),
        .I1(\goreg_dm.dout_i_reg[11] [0]),
        .I2(lane_mux_sel[4]),
        .I3(Q[0]),
        .I4(\buf1_reg_n_0_[0] ),
        .I5(lane_mux_sel[3]),
        .O(\pkt_fifo_wdata[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[11]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[11]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [1]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[11]_i_3_n_0 ),
        .O(p_1_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[11]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[1] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [1]),
        .O(\pkt_fifo_wdata[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[11]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [1]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[1] ),
        .I3(\buf1_reg_n_0_[1] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[12]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[12]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [2]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[12]_i_3_n_0 ),
        .O(p_1_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[12]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[2] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [2]),
        .O(\pkt_fifo_wdata[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[12]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [2]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[2] ),
        .I3(\buf1_reg_n_0_[2] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[13]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[13]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [3]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[13]_i_3_n_0 ),
        .O(p_1_in[13]));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[13]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[3] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [3]),
        .O(\pkt_fifo_wdata[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[13]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [3]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[3] ),
        .I3(\buf1_reg_n_0_[3] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[14]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[14]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [4]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[14]_i_3_n_0 ),
        .O(p_1_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[14]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[4] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [4]),
        .O(\pkt_fifo_wdata[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[14]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [4]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[4] ),
        .I3(lane_mux_sel[4]),
        .I4(\buf1_reg_n_0_[4] ),
        .O(\pkt_fifo_wdata[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[15]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[15]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [5]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[15]_i_3_n_0 ),
        .O(p_1_in[15]));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[15]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[5] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [5]),
        .O(\pkt_fifo_wdata[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[15]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [5]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[5] ),
        .I3(\buf1_reg_n_0_[5] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[16]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[16]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [6]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[16]_i_3_n_0 ),
        .O(p_1_in[16]));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[16]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[6] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [6]),
        .O(\pkt_fifo_wdata[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[16]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [6]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[6] ),
        .I3(\buf1_reg_n_0_[6] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[17]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[17]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [7]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[17]_i_3_n_0 ),
        .O(p_1_in[17]));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[17]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[7] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [7]),
        .O(\pkt_fifo_wdata[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[17]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [7]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[7] ),
        .I3(\buf1_reg_n_0_[7] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[18]_i_1 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[18]_i_2_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [8]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[18]_i_3_n_0 ),
        .O(p_1_in[18]));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[18]_i_2 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[8] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [8]),
        .O(\pkt_fifo_wdata[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[18]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11] [8]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[8] ),
        .I3(\buf1_reg_n_0_[8] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hEEE0EEEEE000EEE0)) 
    \pkt_fifo_wdata[19]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(fifos_empty),
        .I2(Q[1]),
        .I3(lane_mux_sel[3]),
        .I4(pkt_fifo_wen_i_2_n_0),
        .I5(\goreg_dm.dout_i_reg[11] [10]),
        .O(\pkt_fifo_wdata[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFEFCFE0CAE0CFE0C)) 
    \pkt_fifo_wdata[19]_i_2 
       (.I0(\pkt_fifo_wdata[19]_i_3_n_0 ),
        .I1(\pkt_fifo_wdata[19]_i_4_n_0 ),
        .I2(Q[1]),
        .I3(\goreg_dm.dout_i_reg[11]_0 [9]),
        .I4(\pkt_fifo_wdata[19]_i_5_n_0 ),
        .I5(\pkt_fifo_wdata[19]_i_6_n_0 ),
        .O(p_1_in[19]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \pkt_fifo_wdata[19]_i_3 
       (.I0(Q[0]),
        .I1(lane_mux_sel[3]),
        .O(\pkt_fifo_wdata[19]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h8C8F8C80)) 
    \pkt_fifo_wdata[19]_i_4 
       (.I0(lane_mux_sel[3]),
        .I1(\buf1_reg_n_0_[9] ),
        .I2(Q[0]),
        .I3(lane_mux_sel[4]),
        .I4(\goreg_dm.dout_i_reg[11] [9]),
        .O(\pkt_fifo_wdata[19]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \pkt_fifo_wdata[19]_i_5 
       (.I0(Q[0]),
        .I1(lane_mux_sel[4]),
        .I2(lane_mux_sel[3]),
        .O(\pkt_fifo_wdata[19]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \pkt_fifo_wdata[19]_i_6 
       (.I0(\goreg_dm.dout_i_reg[11] [9]),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[9] ),
        .I3(\buf1_reg_n_0_[9] ),
        .I4(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[19]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[1]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [1]),
        .I2(\buf0_reg_n_0_[1] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[1]_i_2_n_0 ),
        .O(p_1_in[1]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[1]_i_2 
       (.I0(\buf1_reg_n_0_[1] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[20]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [0]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [0]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[20]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[20]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[20]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [0]),
        .I1(\goreg_dm.dout_i_reg[11] [0]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[0] ),
        .O(\pkt_fifo_wdata[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[21]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [1]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [1]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[21]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[21]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[21]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [1]),
        .I1(\goreg_dm.dout_i_reg[11] [1]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[1] ),
        .O(\pkt_fifo_wdata[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[22]_i_1 
       (.I0(Q[0]),
        .I1(\pkt_fifo_wdata[22]_i_2_n_0 ),
        .I2(\goreg_dm.dout_i_reg[11] [2]),
        .I3(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I4(\goreg_dm.dout_i_reg[11]_1 [2]),
        .I5(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .O(p_1_in[22]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[22]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [2]),
        .I1(\goreg_dm.dout_i_reg[11] [2]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[2] ),
        .O(\pkt_fifo_wdata[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[23]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [3]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [3]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[23]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[23]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[23]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [3]),
        .I1(\goreg_dm.dout_i_reg[11] [3]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[3] ),
        .O(\pkt_fifo_wdata[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[24]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [4]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [4]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[24]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[24]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[24]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [4]),
        .I1(\goreg_dm.dout_i_reg[11] [4]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[4] ),
        .O(\pkt_fifo_wdata[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[25]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [5]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [5]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[25]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[25]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[25]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [5]),
        .I1(\goreg_dm.dout_i_reg[11] [5]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[5] ),
        .O(\pkt_fifo_wdata[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[26]_i_1 
       (.I0(Q[0]),
        .I1(\pkt_fifo_wdata[26]_i_2_n_0 ),
        .I2(\goreg_dm.dout_i_reg[11]_1 [6]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\goreg_dm.dout_i_reg[11] [6]),
        .I5(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .O(p_1_in[26]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[26]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [6]),
        .I1(\goreg_dm.dout_i_reg[11] [6]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[6] ),
        .O(\pkt_fifo_wdata[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[27]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [7]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [7]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[27]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[27]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[27]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [7]),
        .I1(\goreg_dm.dout_i_reg[11] [7]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[7] ),
        .O(\pkt_fifo_wdata[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[28]_i_1 
       (.I0(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [8]),
        .I2(\goreg_dm.dout_i_reg[11]_1 [8]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\pkt_fifo_wdata[28]_i_2_n_0 ),
        .I5(Q[0]),
        .O(p_1_in[28]));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[28]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [8]),
        .I1(\goreg_dm.dout_i_reg[11] [8]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[8] ),
        .O(\pkt_fifo_wdata[28]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \pkt_fifo_wdata[29]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(fifos_empty),
        .I2(\pkt_fifo_wdata[29]_i_3_n_0 ),
        .O(\pkt_fifo_wdata[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \pkt_fifo_wdata[29]_i_2 
       (.I0(Q[0]),
        .I1(\pkt_fifo_wdata[29]_i_4_n_0 ),
        .I2(\goreg_dm.dout_i_reg[11]_1 [9]),
        .I3(\pkt_fifo_wdata[29]_i_5_n_0 ),
        .I4(\goreg_dm.dout_i_reg[11] [9]),
        .I5(\pkt_fifo_wdata[29]_i_6_n_0 ),
        .O(p_1_in[29]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT5 #(
    .INIT(32'h000111BF)) 
    \pkt_fifo_wdata[29]_i_3 
       (.I0(Q[0]),
        .I1(lane_mux_sel[4]),
        .I2(\goreg_dm.dout_i_reg[11] [10]),
        .I3(lane_mux_sel[3]),
        .I4(Q[1]),
        .O(\pkt_fifo_wdata[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFFFC000A000C000)) 
    \pkt_fifo_wdata[29]_i_4 
       (.I0(\goreg_dm.dout_i_reg[11]_0 [9]),
        .I1(\goreg_dm.dout_i_reg[11] [9]),
        .I2(Q[1]),
        .I3(lane_mux_sel[4]),
        .I4(lane_mux_sel[3]),
        .I5(\buf2_reg_n_0_[9] ),
        .O(\pkt_fifo_wdata[29]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h7770)) 
    \pkt_fifo_wdata[29]_i_5 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(lane_mux_sel[4]),
        .I3(lane_mux_sel[3]),
        .O(\pkt_fifo_wdata[29]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hB8BB)) 
    \pkt_fifo_wdata[29]_i_6 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(lane_mux_sel[3]),
        .I3(lane_mux_sel[4]),
        .O(\pkt_fifo_wdata[29]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hF4F4FFF4)) 
    \pkt_fifo_wdata[2]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I1(\buf0_reg_n_0_[2] ),
        .I2(\pkt_fifo_wdata[2]_i_2_n_0 ),
        .I3(\goreg_dm.dout_i_reg[11] [2]),
        .I4(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .O(p_1_in[2]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[2]_i_2 
       (.I0(\buf1_reg_n_0_[2] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[2] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[30]_i_1 
       (.I0(dout[0]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [0]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[30]_i_2_n_0 ),
        .O(p_1_in[30]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[30]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [0]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [0]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [0]),
        .O(\pkt_fifo_wdata[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[31]_i_1 
       (.I0(dout[1]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [1]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[31]_i_2_n_0 ),
        .O(p_1_in[31]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[31]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [1]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [1]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [1]),
        .O(\pkt_fifo_wdata[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[32]_i_1 
       (.I0(dout[2]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [2]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[32]_i_2_n_0 ),
        .O(p_1_in[32]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[32]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [2]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [2]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [2]),
        .O(\pkt_fifo_wdata[32]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[33]_i_1 
       (.I0(dout[3]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [3]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[33]_i_2_n_0 ),
        .O(p_1_in[33]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[33]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [3]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [3]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [3]),
        .O(\pkt_fifo_wdata[33]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[34]_i_1 
       (.I0(dout[4]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [4]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[34]_i_2_n_0 ),
        .O(p_1_in[34]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[34]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [4]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [4]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [4]),
        .O(\pkt_fifo_wdata[34]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[35]_i_1 
       (.I0(dout[5]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [5]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[35]_i_2_n_0 ),
        .O(p_1_in[35]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[35]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [5]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [5]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [5]),
        .O(\pkt_fifo_wdata[35]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[36]_i_1 
       (.I0(dout[6]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [6]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[36]_i_2_n_0 ),
        .O(p_1_in[36]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[36]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [6]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [6]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [6]),
        .O(\pkt_fifo_wdata[36]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[37]_i_1 
       (.I0(dout[7]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [7]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[37]_i_2_n_0 ),
        .O(p_1_in[37]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[37]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [7]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [7]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [7]),
        .O(\pkt_fifo_wdata[37]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[38]_i_1 
       (.I0(dout[8]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [8]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[38]_i_2_n_0 ),
        .O(p_1_in[38]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[38]_i_2 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [8]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [8]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [8]),
        .O(\pkt_fifo_wdata[38]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEE0EEE0EEE0E000)) 
    \pkt_fifo_wdata[39]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(fifos_empty),
        .I2(lane_mux_sel[3]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[39]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \pkt_fifo_wdata[39]_i_2 
       (.I0(dout[9]),
        .I1(Q[1]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [9]),
        .I3(Q[0]),
        .I4(\pkt_fifo_wdata[39]_i_3_n_0 ),
        .O(p_1_in[39]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    \pkt_fifo_wdata[39]_i_3 
       (.I0(\goreg_dm.dout_i_reg[11]_1 [9]),
        .I1(lane_mux_sel[3]),
        .I2(\goreg_dm.dout_i_reg[11]_0 [9]),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(\goreg_dm.dout_i_reg[11] [9]),
        .O(\pkt_fifo_wdata[39]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hF4F4FFF4)) 
    \pkt_fifo_wdata[3]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [3]),
        .I2(\pkt_fifo_wdata[3]_i_2_n_0 ),
        .I3(\buf0_reg_n_0_[3] ),
        .I4(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .O(p_1_in[3]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[3]_i_2 
       (.I0(\buf1_reg_n_0_[3] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[3] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hF4)) 
    \pkt_fifo_wdata[40]_i_1 
       (.I0(wr_en),
        .I1(din[40]),
        .I2(mst_rd_en_d1_i_2_n_0),
        .O(\pkt_fifo_wdata[40]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[4]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [4]),
        .I2(\buf0_reg_n_0_[4] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[4]_i_2_n_0 ),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[4]_i_2 
       (.I0(\buf1_reg_n_0_[4] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[4] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[5]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [5]),
        .I2(\buf0_reg_n_0_[5] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[5]_i_2_n_0 ),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[5]_i_2 
       (.I0(\buf1_reg_n_0_[5] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[5] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF4F4FFF4)) 
    \pkt_fifo_wdata[6]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [6]),
        .I2(\pkt_fifo_wdata[6]_i_2_n_0 ),
        .I3(\buf0_reg_n_0_[6] ),
        .I4(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .O(p_1_in[6]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[6]_i_2 
       (.I0(\buf1_reg_n_0_[6] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[6] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[7]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [7]),
        .I2(\buf0_reg_n_0_[7] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[7]_i_2_n_0 ),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[7]_i_2 
       (.I0(\buf1_reg_n_0_[7] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[7] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF4F4FFF4)) 
    \pkt_fifo_wdata[8]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [8]),
        .I2(\pkt_fifo_wdata[8]_i_2_n_0 ),
        .I3(\buf0_reg_n_0_[8] ),
        .I4(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[8]_i_2 
       (.I0(\buf1_reg_n_0_[8] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[8] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF44F4)) 
    \pkt_fifo_wdata[9]_i_1 
       (.I0(\pkt_fifo_wdata[9]_i_2_n_0 ),
        .I1(\goreg_dm.dout_i_reg[11] [9]),
        .I2(\buf0_reg_n_0_[9] ),
        .I3(\pkt_fifo_wdata[9]_i_3_n_0 ),
        .I4(\pkt_fifo_wdata[9]_i_4_n_0 ),
        .O(p_1_in[9]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h30FA)) 
    \pkt_fifo_wdata[9]_i_2 
       (.I0(lane_mux_sel[4]),
        .I1(Q[1]),
        .I2(lane_mux_sel[3]),
        .I3(Q[0]),
        .O(\pkt_fifo_wdata[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'hA8FB)) 
    \pkt_fifo_wdata[9]_i_3 
       (.I0(Q[1]),
        .I1(lane_mux_sel[4]),
        .I2(Q[0]),
        .I3(lane_mux_sel[3]),
        .O(\pkt_fifo_wdata[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \pkt_fifo_wdata[9]_i_4 
       (.I0(\buf1_reg_n_0_[9] ),
        .I1(lane_mux_sel[3]),
        .I2(\buf2_reg_n_0_[9] ),
        .I3(Q[1]),
        .I4(lane_mux_sel[4]),
        .I5(Q[0]),
        .O(\pkt_fifo_wdata[9]_i_4_n_0 ));
  FDRE \pkt_fifo_wdata_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[0]),
        .Q(din[0]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[10] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[10]),
        .Q(din[10]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[11] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[11]),
        .Q(din[11]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[12] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[12]),
        .Q(din[12]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[13] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[13]),
        .Q(din[13]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[14] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[14]),
        .Q(din[14]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[15] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[15]),
        .Q(din[15]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[16] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[16]),
        .Q(din[16]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[17] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[17]),
        .Q(din[17]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[18] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[18]),
        .Q(din[18]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[19] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[19]_i_1_n_0 ),
        .D(p_1_in[19]),
        .Q(din[19]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[1]),
        .Q(din[1]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[20] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[20]),
        .Q(din[20]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[21] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[21]),
        .Q(din[21]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[22] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[22]),
        .Q(din[22]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[23] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[23]),
        .Q(din[23]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[24] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[24]),
        .Q(din[24]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[25] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[25]),
        .Q(din[25]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[26] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[26]),
        .Q(din[26]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[27] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[27]),
        .Q(din[27]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[28] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[28]),
        .Q(din[28]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[29] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[29]_i_1_n_0 ),
        .D(p_1_in[29]),
        .Q(din[29]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[2]),
        .Q(din[2]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[30] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[30]),
        .Q(din[30]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[31] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[31]),
        .Q(din[31]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[32] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[32]),
        .Q(din[32]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[33] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[33]),
        .Q(din[33]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[34] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[34]),
        .Q(din[34]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[35] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[35]),
        .Q(din[35]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[36] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[36]),
        .Q(din[36]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[37] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[37]),
        .Q(din[37]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[38] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[38]),
        .Q(din[38]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[39] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(p_1_in[39]),
        .Q(din[39]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[3]),
        .Q(din[3]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[40] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\pkt_fifo_wdata[40]_i_1_n_0 ),
        .Q(din[40]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[41] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(fifos_empty),
        .Q(din[41]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[4]),
        .Q(din[4]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[5]),
        .Q(din[5]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[6]),
        .Q(din[6]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[7]),
        .Q(din[7]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[8]),
        .Q(din[8]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[9]),
        .Q(din[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEEEEE0EEE0EEE0E0)) 
    pkt_fifo_wen_i_1
       (.I0(empty_fwft_i_reg),
        .I1(fifos_empty),
        .I2(\goreg_dm.dout_i_reg[11] [10]),
        .I3(pkt_fifo_wen_i_2_n_0),
        .I4(Q[1]),
        .I5(lane_mux_sel[3]),
        .O(pkt_fifo_wen_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h1)) 
    pkt_fifo_wen_i_2
       (.I0(Q[0]),
        .I1(lane_mux_sel[4]),
        .O(pkt_fifo_wen_i_2_n_0));
  FDRE pkt_fifo_wen_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fifo_wen_i_1_n_0),
        .Q(wr_en),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_line_buffer" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_line_buffer
   (D,
    full,
    almost_full,
    empty,
    \LP_CNTS[0].lp_header_reg[0] ,
    m_axis_aclk,
    SR,
    din,
    wr_en,
    rd_en,
    dest_out,
    m_axis_aresetn);
  output [67:0]D;
  output full;
  output almost_full;
  output empty;
  output \LP_CNTS[0].lp_header_reg[0] ;
  input m_axis_aclk;
  input [0:0]SR;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input dest_out;
  input m_axis_aresetn;

  wire [67:0]D;
  wire \LP_CNTS[0].lp_header_reg[0] ;
  wire [0:0]SR;
  wire almost_full;
  wire dest_out;
  wire [67:0]din;
  wire empty;
  wire full;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire rd_en;
  wire wr_en;

  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fc13 line_buf
       (.D(D),
        .\LP_CNTS[0].lp_header_reg[0] (\LP_CNTS[0].lp_header_reg[0] ),
        .SR(SR),
        .almost_full(almost_full),
        .dest_out(dest_out),
        .din(din),
        .empty(empty),
        .full(full),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .rd_en(rd_en),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_phecc" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_phecc
   (ecc_start_d1,
    \FSM_sequential_cur_state_reg[0] ,
    phecc_done,
    phecc_status,
    nxt_state1114_out,
    nxt_state1,
    \cur_lp_vc_reg[1] ,
    diwc_valid,
    diwc_corrected,
    p_63_out,
    p_61_out,
    p_59_out,
    p_57_out,
    crc_start_d1_reg,
    crc_start_d1_reg_0,
    src_ff_reg,
    di_not_supported_i,
    p_75_out,
    p_74_out,
    p_72_out,
    p_73_out,
    \reg_ecc_status_i_reg[2] ,
    lp_wc0_i_reg_reg,
    CO,
    clear,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[63] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[66] ,
    \data_type_reg_reg[5]_0 ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[64] ,
    short_pkt,
    mem_wen0,
    mem_wdata2,
    lbuf_blk_wen_i_reg,
    D,
    byt_cnt_adj,
    pre_byt_cnt2_reg,
    byte_cnt,
    DI,
    S,
    \crc_blk_sel_reg[3] ,
    \crc_p_strb_reg[1] ,
    img_send_reg,
    \crc_blk_sel_reg[2] ,
    \crc_blk_sel_reg[1] ,
    \crc_blk_sel_reg[0] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[65] ,
    wr_en,
    diwc_corrected_zero,
    diwc_corrected_lte4,
    SR,
    phecc_start,
    m_axis_aclk,
    pkt_valid,
    out,
    lp_wc0,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ,
    m_axis_aresetn,
    dest_out,
    pkt_data,
    \gpr1.dout_i_reg[0] ,
    \gpr1.dout_i_reg[1] ,
    \gpr1.dout_i_reg[2] ,
    \gpr1.dout_i_reg[3] ,
    \gpr1.dout_i_reg[4] ,
    \gpr1.dout_i_reg[5] ,
    \gpr1.dout_i_reg[6] ,
    \gpr1.dout_i_reg[7] ,
    \gpr1.dout_i_reg[10] ,
    \gpr1.dout_i_reg[12] ,
    \gpr1.dout_i_reg[13] ,
    \gpr1.dout_i_reg[20] ,
    \gpr1.dout_i_reg[21] ,
    \gpr1.dout_i_reg[22] ,
    \gpr1.dout_i_reg[23] ,
    \gpr1.dout_i_reg[24] ,
    \gpr1.dout_i_reg[25] ,
    \gpr1.dout_i_reg[26] ,
    data_wip_reg,
    lbuf_blk_wen_i,
    \LINE_BUF_WR_64.mem_wen_i_reg ,
    full,
    almost_full,
    \cur_byte_cnt_reg[12] ,
    \cur_byte_cnt_reg[15] ,
    \cur_byte_cnt_reg[11] ,
    \cur_byte_cnt_reg[10] ,
    \cur_byte_cnt_reg[7] ,
    \cur_byte_cnt_reg[6] ,
    \cur_byte_cnt_reg[5] ,
    \cur_byte_cnt_reg[3] ,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ,
    \gpr1.dout_i_reg[17] ,
    \gpr1.dout_i_reg[17]_0 ,
    \gpr1.dout_i_reg[16] ,
    \gpr1.dout_i_reg[15] ,
    \gpr1.dout_i_reg[14] ,
    \gpr1.dout_i_reg[21]_0 ,
    src_send,
    src_rcv,
    end_mem_wr2,
    end_mem_wr1_reg);
  output ecc_start_d1;
  output \FSM_sequential_cur_state_reg[0] ;
  output phecc_done;
  output [1:0]phecc_status;
  output nxt_state1114_out;
  output nxt_state1;
  output [0:0]\cur_lp_vc_reg[1] ;
  output diwc_valid;
  output [23:0]diwc_corrected;
  output p_63_out;
  output p_61_out;
  output p_59_out;
  output p_57_out;
  output crc_start_d1_reg;
  output crc_start_d1_reg_0;
  output [0:0]src_ff_reg;
  output di_not_supported_i;
  output p_75_out;
  output p_74_out;
  output p_72_out;
  output p_73_out;
  output [1:0]\reg_ecc_status_i_reg[2] ;
  output lp_wc0_i_reg_reg;
  output [0:0]CO;
  output clear;
  output \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ;
  output [27:0]\LINE_BUF_WR_64.mem_wdata_i_reg[63] ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[66] ;
  output [1:0]\data_type_reg_reg[5]_0 ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[64] ;
  output short_pkt;
  output mem_wen0;
  output mem_wdata2;
  output lbuf_blk_wen_i_reg;
  output [10:0]D;
  output [15:0]byt_cnt_adj;
  output [2:0]pre_byt_cnt2_reg;
  output [15:0]byte_cnt;
  output [3:0]DI;
  output [0:0]S;
  output \crc_blk_sel_reg[3] ;
  output [1:0]\crc_p_strb_reg[1] ;
  output img_send_reg;
  output \crc_blk_sel_reg[2] ;
  output \crc_blk_sel_reg[1] ;
  output \crc_blk_sel_reg[0] ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[65] ;
  output wr_en;
  output diwc_corrected_zero;
  output diwc_corrected_lte4;
  input [0:0]SR;
  input phecc_start;
  input m_axis_aclk;
  input pkt_valid;
  input [0:0]out;
  input lp_wc0;
  input [5:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ;
  input m_axis_aresetn;
  input dest_out;
  input [31:0]pkt_data;
  input \gpr1.dout_i_reg[0] ;
  input \gpr1.dout_i_reg[1] ;
  input \gpr1.dout_i_reg[2] ;
  input \gpr1.dout_i_reg[3] ;
  input \gpr1.dout_i_reg[4] ;
  input \gpr1.dout_i_reg[5] ;
  input \gpr1.dout_i_reg[6] ;
  input \gpr1.dout_i_reg[7] ;
  input \gpr1.dout_i_reg[10] ;
  input \gpr1.dout_i_reg[12] ;
  input \gpr1.dout_i_reg[13] ;
  input \gpr1.dout_i_reg[20] ;
  input \gpr1.dout_i_reg[21] ;
  input \gpr1.dout_i_reg[22] ;
  input \gpr1.dout_i_reg[23] ;
  input \gpr1.dout_i_reg[24] ;
  input \gpr1.dout_i_reg[25] ;
  input \gpr1.dout_i_reg[26] ;
  input data_wip_reg;
  input lbuf_blk_wen_i;
  input \LINE_BUF_WR_64.mem_wen_i_reg ;
  input full;
  input almost_full;
  input \cur_byte_cnt_reg[12] ;
  input \cur_byte_cnt_reg[15] ;
  input \cur_byte_cnt_reg[11] ;
  input \cur_byte_cnt_reg[10] ;
  input \cur_byte_cnt_reg[7] ;
  input \cur_byte_cnt_reg[6] ;
  input \cur_byte_cnt_reg[5] ;
  input [3:0]\cur_byte_cnt_reg[3] ;
  input [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ;
  input \gpr1.dout_i_reg[17] ;
  input \gpr1.dout_i_reg[17]_0 ;
  input \gpr1.dout_i_reg[16] ;
  input \gpr1.dout_i_reg[15] ;
  input \gpr1.dout_i_reg[14] ;
  input \gpr1.dout_i_reg[21]_0 ;
  input src_send;
  input src_rcv;
  input end_mem_wr2;
  input end_mem_wr1_reg;

  wire [0:0]CO;
  wire [10:0]D;
  wire [3:0]DI;
  wire \FE_DETECT[0].fe_detect[0]_i_2_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_5_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_6_n_0 ;
  wire \FSM_sequential_cur_state_reg[0] ;
  wire [5:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ;
  wire [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ;
  wire \LINE_BUF_WR_64.mem_data_l32[21]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_19_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_20_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_21_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_22_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_27_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_28_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[64]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_5 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_6 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_7 ;
  wire [27:0]\LINE_BUF_WR_64.mem_wdata_i_reg[63] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[64] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[65] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[66] ;
  wire \LINE_BUF_WR_64.mem_wen_i_reg ;
  wire [0:0]S;
  wire [0:0]SR;
  wire almost_full;
  wire [15:0]byt_cnt_adj;
  wire [15:0]byt_cnt_adj_reg0;
  wire \byt_cnt_adj_reg[15]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_5_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_6_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_7_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_8_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_9_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_10_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_5_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_6_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_7_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_8_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_9_n_0 ;
  wire [15:0]byt_cnt_adj_reg__0;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_3 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_5 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_6 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_7 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_0 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_3 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_5 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_6 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_7 ;
  wire [15:0]byte_cnt;
  wire \byte_cnt_reg[15]_i_1_n_0 ;
  wire \byte_cnt_reg[15]_i_2_n_0 ;
  (* DONT_TOUCH *) wire [7:0]calcd_ecc;
  wire calcd_ecc_inferred_i_10_n_0;
  wire calcd_ecc_inferred_i_11_n_0;
  wire calcd_ecc_inferred_i_12_n_0;
  wire calcd_ecc_inferred_i_13_n_0;
  wire calcd_ecc_inferred_i_14_n_0;
  wire calcd_ecc_inferred_i_15_n_0;
  wire calcd_ecc_inferred_i_7_n_0;
  wire calcd_ecc_inferred_i_8_n_0;
  wire calcd_ecc_inferred_i_9_n_0;
  wire clear;
  (* DONT_TOUCH *) wire code_notfound;
  wire code_notfound__0;
  wire code_notfound_i_2_n_0;
  wire \control/di_not_supported_i589_in ;
  wire \crc_blk_sel_reg[0] ;
  wire \crc_blk_sel_reg[1] ;
  wire \crc_blk_sel_reg[2] ;
  wire \crc_blk_sel_reg[3] ;
  wire [1:0]\crc_p_strb_reg[1] ;
  wire crc_start_d1_reg;
  wire crc_start_d1_reg_0;
  wire \cur_byte_cnt_reg[10] ;
  wire \cur_byte_cnt_reg[11] ;
  wire \cur_byte_cnt_reg[12] ;
  wire \cur_byte_cnt_reg[15] ;
  wire [3:0]\cur_byte_cnt_reg[3] ;
  wire \cur_byte_cnt_reg[5] ;
  wire \cur_byte_cnt_reg[6] ;
  wire \cur_byte_cnt_reg[7] ;
  wire [0:0]\cur_lp_vc_reg[1] ;
  wire [3:0]data_type;
  wire [5:4]data_type_int;
  wire [1:0]\data_type_reg_reg[5]_0 ;
  wire data_wip_reg;
  wire data_wip_reg_i_12_n_0;
  wire dest_out;
  wire di_not_supported;
  wire di_not_supported_i;
  wire [23:0]diwc_corrected;
  wire diwc_corrected_csi_zero;
  wire diwc_corrected_lte4;
  wire diwc_corrected_lte4_i_1_n_0;
  wire diwc_corrected_lte4_i_2_n_0;
  wire diwc_corrected_zero;
  wire diwc_corrected_zero_i_2_n_0;
  wire diwc_corrected_zero_i_3_n_0;
  wire diwc_corrected_zero_i_4_n_0;
  wire diwc_valid;
  wire diwc_valid_int;
  wire \ecc_corrected_reg_n_0_[0] ;
  wire \ecc_corrected_reg_n_0_[1] ;
  wire \ecc_corrected_reg_n_0_[2] ;
  wire \ecc_corrected_reg_n_0_[3] ;
  wire \ecc_corrected_reg_n_0_[4] ;
  wire \ecc_corrected_reg_n_0_[5] ;
  wire \ecc_corrected_reg_n_0_[6] ;
  wire \ecc_corrected_reg_n_0_[7] ;
  wire ecc_done;
  wire [23:0]ecc_o;
  wire ecc_start_d1;
  wire ecc_start_d2;
  wire [1:1]ecc_status;
  wire end_mem_wr1_reg;
  wire end_mem_wr2;
  wire [7:0]exp_ecc;
  wire full;
  wire \gpr1.dout_i_reg[0] ;
  wire \gpr1.dout_i_reg[10] ;
  wire \gpr1.dout_i_reg[12] ;
  wire \gpr1.dout_i_reg[13] ;
  wire \gpr1.dout_i_reg[14] ;
  wire \gpr1.dout_i_reg[15] ;
  wire \gpr1.dout_i_reg[16] ;
  wire \gpr1.dout_i_reg[17] ;
  wire \gpr1.dout_i_reg[17]_0 ;
  wire \gpr1.dout_i_reg[1] ;
  wire \gpr1.dout_i_reg[20] ;
  wire \gpr1.dout_i_reg[21] ;
  wire \gpr1.dout_i_reg[21]_0 ;
  wire \gpr1.dout_i_reg[22] ;
  wire \gpr1.dout_i_reg[23] ;
  wire \gpr1.dout_i_reg[24] ;
  wire \gpr1.dout_i_reg[25] ;
  wire \gpr1.dout_i_reg[26] ;
  wire \gpr1.dout_i_reg[2] ;
  wire \gpr1.dout_i_reg[3] ;
  wire \gpr1.dout_i_reg[4] ;
  wire \gpr1.dout_i_reg[5] ;
  wire \gpr1.dout_i_reg[6] ;
  wire \gpr1.dout_i_reg[7] ;
  wire img_send_i_2_n_0;
  wire img_send_i_3_n_0;
  wire img_send_reg;
  wire lbuf_blk_wen_i;
  wire lbuf_blk_wen_i_reg;
  wire long_pkt_int;
  wire long_pkt_out;
  wire lp_wc0;
  wire lp_wc0_i_reg_i_2_n_0;
  wire lp_wc0_i_reg_i_3_n_0;
  wire lp_wc0_i_reg_i_4_n_0;
  wire lp_wc0_i_reg_i_5_n_0;
  wire lp_wc0_i_reg_i_6_n_0;
  wire lp_wc0_i_reg_reg;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [23:0]mask;
  wire \mask_reg_n_0_[0] ;
  wire \mask_reg_n_0_[10] ;
  wire \mask_reg_n_0_[11] ;
  wire \mask_reg_n_0_[12] ;
  wire \mask_reg_n_0_[13] ;
  wire \mask_reg_n_0_[14] ;
  wire \mask_reg_n_0_[15] ;
  wire \mask_reg_n_0_[16] ;
  wire \mask_reg_n_0_[17] ;
  wire \mask_reg_n_0_[18] ;
  wire \mask_reg_n_0_[19] ;
  wire \mask_reg_n_0_[1] ;
  wire \mask_reg_n_0_[20] ;
  wire \mask_reg_n_0_[21] ;
  wire \mask_reg_n_0_[22] ;
  wire \mask_reg_n_0_[23] ;
  wire \mask_reg_n_0_[2] ;
  wire \mask_reg_n_0_[3] ;
  wire \mask_reg_n_0_[4] ;
  wire \mask_reg_n_0_[5] ;
  wire \mask_reg_n_0_[6] ;
  wire \mask_reg_n_0_[7] ;
  wire \mask_reg_n_0_[8] ;
  wire \mask_reg_n_0_[9] ;
  wire mem_wdata2;
  wire mem_wen0;
  wire nxt_state1;
  wire nxt_state1114_out;
  wire [0:0]out;
  wire [15:0]p_0_in;
  wire p_0_in0_in;
  wire p_10_in;
  wire p_11_in;
  wire p_12_in;
  wire p_13_in;
  wire p_14_in;
  wire p_15_in;
  wire p_16_in;
  wire p_18_in;
  wire p_19_in;
  wire p_1_in;
  wire p_20_in;
  wire p_22_in;
  wire p_23_in;
  wire p_2_in;
  wire p_3_in;
  wire p_4_in;
  wire p_57_out;
  wire p_59_out;
  wire p_5_in;
  wire p_61_out;
  wire p_63_out;
  wire p_6_in;
  wire p_72_out;
  wire p_73_out;
  wire p_74_out;
  wire p_75_out;
  wire p_7_in;
  wire p_8_in;
  wire p_9_in;
  wire phecc_done;
  wire phecc_start;
  wire [1:0]phecc_status;
  wire \phecc_status[1]_i_2_n_0 ;
  wire [31:0]pkt_data;
  wire \pkt_header_reg_n_0_[0] ;
  wire \pkt_header_reg_n_0_[1] ;
  wire pkt_valid;
  wire [2:0]pre_byt_cnt2_reg;
  wire [1:0]\reg_ecc_status_i_reg[2] ;
  wire short_pkt;
  wire short_pkt_int;
  wire [0:0]src_ff_reg;
  wire src_rcv;
  wire src_send;
  (* DONT_TOUCH *) wire [7:0]syndrome_code;
  (* DONT_TOUCH *) wire [3:0]syndrome_sum;
  wire wr_en;
  wire [3:3]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_CO_UNCONNECTED ;
  wire [7:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_O_UNCONNECTED ;
  wire [7:3]\NLW_byt_cnt_adj_reg_reg[15]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_byt_cnt_adj_reg_reg[7]_i_1_CO_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync[0]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_status[1]),
        .I3(phecc_done),
        .O(p_75_out));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \ERR_FRAME_SYNC_ECCERR[1].ecc_errframesync[1]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_status[1]),
        .I3(phecc_done),
        .O(p_74_out));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \ERR_FRAME_SYNC_ECCERR[2].ecc_errframesync[2]_i_1 
       (.I0(diwc_corrected[6]),
        .I1(diwc_corrected[7]),
        .I2(phecc_status[1]),
        .I3(phecc_done),
        .O(p_73_out));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \ERR_FRAME_SYNC_ECCERR[3].ecc_errframesync[3]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_status[1]),
        .I3(phecc_done),
        .O(p_72_out));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \FE_DETECT[0].fe_detect[0]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .O(p_63_out));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \FE_DETECT[0].fe_detect[0]_i_2 
       (.I0(diwc_valid),
        .I1(diwc_corrected[0]),
        .I2(diwc_corrected[1]),
        .I3(\FSM_sequential_cur_state[1]_i_6_n_0 ),
        .I4(diwc_corrected[2]),
        .I5(diwc_corrected[3]),
        .O(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \FE_DETECT[1].fe_detect[1]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .O(p_61_out));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \FE_DETECT[2].fe_detect[2]_i_1 
       (.I0(diwc_corrected[6]),
        .I1(diwc_corrected[7]),
        .I2(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .O(p_59_out));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \FE_DETECT[3].fe_detect[3]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .O(p_57_out));
  LUT6 #(
    .INIT(64'hB8B8B8B8B8B8B888)) 
    \FSM_sequential_cur_state[0]_i_3 
       (.I0(pkt_valid),
        .I1(out),
        .I2(phecc_done),
        .I3(phecc_status[1]),
        .I4(nxt_state1114_out),
        .I5(nxt_state1),
        .O(\FSM_sequential_cur_state_reg[0] ));
  LUT6 #(
    .INIT(64'hFFFF0000000E0000)) 
    \FSM_sequential_cur_state[1]_i_2 
       (.I0(diwc_corrected[2]),
        .I1(diwc_corrected[3]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[5]),
        .I4(diwc_valid),
        .I5(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .O(nxt_state1114_out));
  LUT6 #(
    .INIT(64'h0004000000044444)) 
    \FSM_sequential_cur_state[1]_i_3 
       (.I0(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .I1(diwc_valid),
        .I2(diwc_corrected[3]),
        .I3(diwc_corrected[2]),
        .I4(\FSM_sequential_cur_state[1]_i_6_n_0 ),
        .I5(lp_wc0_i_reg_i_2_n_0),
        .O(nxt_state1));
  LUT6 #(
    .INIT(64'hFF2FCC0CFF0F080C)) 
    \FSM_sequential_cur_state[1]_i_5 
       (.I0(diwc_corrected[0]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[3]),
        .I3(diwc_corrected[5]),
        .I4(diwc_corrected[4]),
        .I5(diwc_corrected[1]),
        .O(\FSM_sequential_cur_state[1]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_cur_state[1]_i_6 
       (.I0(diwc_corrected[5]),
        .I1(diwc_corrected[4]),
        .O(\FSM_sequential_cur_state[1]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \HSC2R_CDC[8].hsc2r_bus_cdc_i_1 
       (.I0(di_not_supported_i),
        .I1(diwc_valid),
        .O(src_ff_reg));
  LUT6 #(
    .INIT(64'hAC74A444AC44A044)) 
    \HSC2R_CDC[8].hsc2r_bus_cdc_i_2 
       (.I0(diwc_corrected[3]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[5]),
        .I4(diwc_corrected[1]),
        .I5(diwc_corrected[0]),
        .O(di_not_supported_i));
  LUT3 #(
    .INIT(8'h7F)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_1 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I1(m_axis_aresetn),
        .I2(dest_out),
        .O(clear));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[0]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[0]),
        .I2(pkt_data[24]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[0] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [0]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[10]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[10]),
        .I2(pkt_data[18]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[12] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [10]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[11]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[11]),
        .I2(pkt_data[19]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[13] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [11]));
  LUT5 #(
    .INIT(32'h3A0A0A0A)) 
    \LINE_BUF_WR_64.mem_data_l32[12]_i_1 
       (.I0(diwc_corrected[12]),
        .I1(\gpr1.dout_i_reg[14] ),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I3(pkt_valid),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [12]));
  LUT5 #(
    .INIT(32'h3A0A0A0A)) 
    \LINE_BUF_WR_64.mem_data_l32[13]_i_1 
       (.I0(diwc_corrected[13]),
        .I1(\gpr1.dout_i_reg[15] ),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I3(pkt_valid),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [13]));
  LUT5 #(
    .INIT(32'h3A0A0A0A)) 
    \LINE_BUF_WR_64.mem_data_l32[14]_i_1 
       (.I0(diwc_corrected[14]),
        .I1(\gpr1.dout_i_reg[16] ),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I3(pkt_valid),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [14]));
  LUT5 #(
    .INIT(32'h3A0A0A0A)) 
    \LINE_BUF_WR_64.mem_data_l32[15]_i_1 
       (.I0(diwc_corrected[15]),
        .I1(\gpr1.dout_i_reg[17]_0 ),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I3(pkt_valid),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [15]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[16]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[16]),
        .I2(pkt_data[8]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[20] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [16]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[17]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[17]),
        .I2(pkt_data[9]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[21] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [17]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[18]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[18]),
        .I2(pkt_data[10]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[22] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [18]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[19]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[19]),
        .I2(pkt_data[11]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[23] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [19]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[1]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[1]),
        .I2(pkt_data[25]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[1] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [1]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[20]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[20]),
        .I2(pkt_data[12]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[24] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [20]));
  LUT6 #(
    .INIT(64'hF4F444F444444444)) 
    \LINE_BUF_WR_64.mem_data_l32[21]_i_1 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I1(\LINE_BUF_WR_64.mem_data_l32[21]_i_2_n_0 ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(pkt_data[13]),
        .I5(\gpr1.dout_i_reg[25] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [21]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LINE_BUF_WR_64.mem_data_l32[21]_i_2 
       (.I0(m_axis_aresetn),
        .I1(diwc_corrected[21]),
        .O(\LINE_BUF_WR_64.mem_data_l32[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[22]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[22]),
        .I2(pkt_data[14]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[26] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [22]));
  LUT2 #(
    .INIT(4'hB)) 
    \LINE_BUF_WR_64.mem_data_l32[22]_i_2 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I1(m_axis_aresetn),
        .O(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hE2222222)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_1 
       (.I0(diwc_corrected[23]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I2(pkt_valid),
        .I3(data_wip_reg),
        .I4(\gpr1.dout_i_reg[17] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [23]));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_2 
       (.I0(short_pkt),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[66] ),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ));
  LUT5 #(
    .INIT(32'h8A808080)) 
    \LINE_BUF_WR_64.mem_data_l32[28]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I1(pkt_data[4]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ),
        .I4(pkt_data[28]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [24]));
  LUT5 #(
    .INIT(32'h8A808080)) 
    \LINE_BUF_WR_64.mem_data_l32[29]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I1(pkt_data[5]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ),
        .I4(pkt_data[29]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [25]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[2]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[2]),
        .I2(pkt_data[26]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[2] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [2]));
  LUT5 #(
    .INIT(32'h8A808080)) 
    \LINE_BUF_WR_64.mem_data_l32[30]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I1(pkt_data[6]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ),
        .I4(pkt_data[30]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [26]));
  LUT5 #(
    .INIT(32'hB8880000)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_2 
       (.I0(pkt_data[7]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I2(pkt_data[31]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [27]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT5 #(
    .INIT(32'h00080000)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_3 
       (.I0(data_type[1]),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .I2(\data_type_reg_reg[5]_0 [1]),
        .I3(data_type[0]),
        .I4(data_type[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEEC)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_4 
       (.I0(\data_type_reg_reg[5]_0 [1]),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .I2(data_type[0]),
        .I3(data_type[2]),
        .I4(data_type[1]),
        .I5(data_type[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_2 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_5 
       (.I0(m_axis_aresetn),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I2(pkt_valid),
        .I3(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[3]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[3]),
        .I2(pkt_data[27]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[3] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [3]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[4]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[4]),
        .I2(pkt_data[28]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[4] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [4]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[5]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[5]),
        .I2(pkt_data[29]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[5] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [5]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[6]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[6]),
        .I2(pkt_data[30]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[6] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [6]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[7]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[7]),
        .I2(pkt_data[31]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[7] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [7]));
  LUT6 #(
    .INIT(64'hF4FF4444F4444444)) 
    \LINE_BUF_WR_64.mem_data_l32[8]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32[22]_i_2_n_0 ),
        .I1(diwc_corrected[8]),
        .I2(pkt_data[16]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_0 ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[63]_1 ),
        .I5(\gpr1.dout_i_reg[10] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [8]));
  LUT5 #(
    .INIT(32'hE2222222)) 
    \LINE_BUF_WR_64.mem_data_l32[9]_i_1 
       (.I0(diwc_corrected[9]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] ),
        .I2(pkt_valid),
        .I3(data_wip_reg),
        .I4(\gpr1.dout_i_reg[21]_0 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[63] [9]));
  LUT3 #(
    .INIT(8'hD4)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_19 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [0]),
        .I1(diwc_corrected[11]),
        .I2(diwc_corrected[10]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_19_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_20 
       (.I0(diwc_corrected[8]),
        .I1(diwc_corrected[9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_21 
       (.I0(diwc_corrected[23]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [12]),
        .I2(diwc_corrected[22]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [11]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_21_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_22 
       (.I0(diwc_corrected[21]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [10]),
        .I2(diwc_corrected[20]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_22_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_23 
       (.I0(diwc_corrected[19]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [8]),
        .I2(diwc_corrected[18]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [7]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_24 
       (.I0(diwc_corrected[17]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [6]),
        .I2(diwc_corrected[16]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [5]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_25 
       (.I0(diwc_corrected[15]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [4]),
        .I2(diwc_corrected[14]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_26 
       (.I0(diwc_corrected[13]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [2]),
        .I2(diwc_corrected[12]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 ));
  LUT3 #(
    .INIT(8'h41)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_27 
       (.I0(diwc_corrected[10]),
        .I1(diwc_corrected[11]),
        .I2(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 [0]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_27_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_28 
       (.I0(diwc_corrected[9]),
        .I1(diwc_corrected[8]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_28_n_0 ));
  LUT6 #(
    .INIT(64'h8888888088888888)) 
    \LINE_BUF_WR_64.mem_wdata_i[64]_i_2 
       (.I0(m_axis_aresetn),
        .I1(short_pkt),
        .I2(data_type[3]),
        .I3(data_type[0]),
        .I4(data_type[2]),
        .I5(\LINE_BUF_WR_64.mem_wdata_i[64]_i_3_n_0 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[64] ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[64]_i_3 
       (.I0(\data_type_reg_reg[5]_0 [0]),
        .I1(\data_type_reg_reg[5]_0 [1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[64]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2F2222222F222F22)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_1 
       (.I0(end_mem_wr2),
        .I1(dest_out),
        .I2(end_mem_wr1_reg),
        .I3(short_pkt),
        .I4(data_type[2]),
        .I5(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[65] ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_3 
       (.I0(\data_type_reg_reg[5]_0 [1]),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .I2(data_type[3]),
        .I3(data_type[1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4444444444404444)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_2 
       (.I0(di_not_supported),
        .I1(long_pkt_out),
        .I2(\LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ),
        .I3(diwc_corrected[5]),
        .I4(diwc_corrected[4]),
        .I5(diwc_corrected[1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[66] ));
  LUT6 #(
    .INIT(64'hBFAFAEAE8C8C0C04)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_3 
       (.I0(diwc_corrected[5]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[3]),
        .I3(diwc_corrected[0]),
        .I4(diwc_corrected[1]),
        .I5(diwc_corrected[4]),
        .O(di_not_supported));
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_4 
       (.I0(diwc_corrected[2]),
        .I1(diwc_corrected[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ));
  CARRY8 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({CO,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_3 ,\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_CO_UNCONNECTED [3],\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_5 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_6 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_7 }),
        .DI({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_19_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_20_n_0 }),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_O_UNCONNECTED [7:0]),
        .S({\LINE_BUF_WR_64.mem_wdata_i[31]_i_21_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_22_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_27_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_28_n_0 }));
  FDRE \byt_cnt_adj_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[0]),
        .Q(byt_cnt_adj[0]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[10] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[10]),
        .Q(byt_cnt_adj[10]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[11] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[11]),
        .Q(byt_cnt_adj[11]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[12] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[12]),
        .Q(byt_cnt_adj[12]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[13] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[13]),
        .Q(byt_cnt_adj[13]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[14] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[14]),
        .Q(byt_cnt_adj[14]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[15] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[15]),
        .Q(byt_cnt_adj[15]),
        .R(SR));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_2 
       (.I0(\mask_reg_n_0_[23] ),
        .I1(p_23_in),
        .O(\byt_cnt_adj_reg[15]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_3 
       (.I0(p_10_in),
        .I1(\mask_reg_n_0_[22] ),
        .O(\byt_cnt_adj_reg[15]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_4 
       (.I0(p_9_in),
        .I1(\mask_reg_n_0_[21] ),
        .O(\byt_cnt_adj_reg[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_5 
       (.I0(p_8_in),
        .I1(\mask_reg_n_0_[20] ),
        .O(\byt_cnt_adj_reg[15]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_6 
       (.I0(p_22_in),
        .I1(\mask_reg_n_0_[19] ),
        .O(\byt_cnt_adj_reg[15]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_7 
       (.I0(p_20_in),
        .I1(\mask_reg_n_0_[18] ),
        .O(\byt_cnt_adj_reg[15]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_8 
       (.I0(p_16_in),
        .I1(\mask_reg_n_0_[17] ),
        .O(\byt_cnt_adj_reg[15]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_9 
       (.I0(p_7_in),
        .I1(\mask_reg_n_0_[16] ),
        .O(\byt_cnt_adj_reg[15]_i_9_n_0 ));
  FDRE \byt_cnt_adj_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[1]),
        .Q(byt_cnt_adj[1]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[2]),
        .Q(byt_cnt_adj[2]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[3]),
        .Q(byt_cnt_adj[3]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[4] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[4]),
        .Q(byt_cnt_adj[4]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[5] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[5]),
        .Q(byt_cnt_adj[5]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[6] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[6]),
        .Q(byt_cnt_adj[6]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[7] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[7]),
        .Q(byt_cnt_adj[7]),
        .R(SR));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_10 
       (.I0(p_13_in),
        .I1(\mask_reg_n_0_[8] ),
        .O(\byt_cnt_adj_reg[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_2 
       (.I0(p_18_in),
        .I1(\mask_reg_n_0_[9] ),
        .O(\byt_cnt_adj_reg[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_3 
       (.I0(p_19_in),
        .I1(\mask_reg_n_0_[15] ),
        .O(\byt_cnt_adj_reg[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_4 
       (.I0(p_15_in),
        .I1(\mask_reg_n_0_[14] ),
        .O(\byt_cnt_adj_reg[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_5 
       (.I0(p_6_in),
        .I1(\mask_reg_n_0_[13] ),
        .O(\byt_cnt_adj_reg[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_6 
       (.I0(p_14_in),
        .I1(\mask_reg_n_0_[12] ),
        .O(\byt_cnt_adj_reg[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_7 
       (.I0(p_5_in),
        .I1(\mask_reg_n_0_[11] ),
        .O(\byt_cnt_adj_reg[7]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_8 
       (.I0(p_4_in),
        .I1(\mask_reg_n_0_[10] ),
        .O(\byt_cnt_adj_reg[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \byt_cnt_adj_reg[7]_i_9 
       (.I0(p_13_in),
        .I1(\mask_reg_n_0_[8] ),
        .O(\byt_cnt_adj_reg[7]_i_9_n_0 ));
  FDRE \byt_cnt_adj_reg[8] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[8]),
        .Q(byt_cnt_adj[8]),
        .R(SR));
  FDRE \byt_cnt_adj_reg[9] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[9]),
        .Q(byt_cnt_adj[9]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[0]),
        .Q(byt_cnt_adj_reg__0[0]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[10]),
        .Q(byt_cnt_adj_reg__0[10]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[11]),
        .Q(byt_cnt_adj_reg__0[11]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[12]),
        .Q(byt_cnt_adj_reg__0[12]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[13]),
        .Q(byt_cnt_adj_reg__0[13]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[14]),
        .Q(byt_cnt_adj_reg__0[14]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[15]),
        .Q(byt_cnt_adj_reg__0[15]),
        .R(SR));
  CARRY8 \byt_cnt_adj_reg_reg[15]_i_1 
       (.CI(\byt_cnt_adj_reg_reg[7]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_byt_cnt_adj_reg_reg[15]_i_1_CO_UNCONNECTED [7],\byt_cnt_adj_reg_reg[15]_i_1_n_1 ,\byt_cnt_adj_reg_reg[15]_i_1_n_2 ,\byt_cnt_adj_reg_reg[15]_i_1_n_3 ,\NLW_byt_cnt_adj_reg_reg[15]_i_1_CO_UNCONNECTED [3],\byt_cnt_adj_reg_reg[15]_i_1_n_5 ,\byt_cnt_adj_reg_reg[15]_i_1_n_6 ,\byt_cnt_adj_reg_reg[15]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(byt_cnt_adj_reg0[15:8]),
        .S({\byt_cnt_adj_reg[15]_i_2_n_0 ,\byt_cnt_adj_reg[15]_i_3_n_0 ,\byt_cnt_adj_reg[15]_i_4_n_0 ,\byt_cnt_adj_reg[15]_i_5_n_0 ,\byt_cnt_adj_reg[15]_i_6_n_0 ,\byt_cnt_adj_reg[15]_i_7_n_0 ,\byt_cnt_adj_reg[15]_i_8_n_0 ,\byt_cnt_adj_reg[15]_i_9_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[1]),
        .Q(byt_cnt_adj_reg__0[1]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[2]),
        .Q(byt_cnt_adj_reg__0[2]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[3]),
        .Q(byt_cnt_adj_reg__0[3]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[4]),
        .Q(byt_cnt_adj_reg__0[4]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[5]),
        .Q(byt_cnt_adj_reg__0[5]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[6]),
        .Q(byt_cnt_adj_reg__0[6]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[7]),
        .Q(byt_cnt_adj_reg__0[7]),
        .R(SR));
  CARRY8 \byt_cnt_adj_reg_reg[7]_i_1 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\byt_cnt_adj_reg_reg[7]_i_1_n_0 ,\byt_cnt_adj_reg_reg[7]_i_1_n_1 ,\byt_cnt_adj_reg_reg[7]_i_1_n_2 ,\byt_cnt_adj_reg_reg[7]_i_1_n_3 ,\NLW_byt_cnt_adj_reg_reg[7]_i_1_CO_UNCONNECTED [3],\byt_cnt_adj_reg_reg[7]_i_1_n_5 ,\byt_cnt_adj_reg_reg[7]_i_1_n_6 ,\byt_cnt_adj_reg_reg[7]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\byt_cnt_adj_reg[7]_i_2_n_0 ,1'b0}),
        .O(byt_cnt_adj_reg0[7:0]),
        .S({\byt_cnt_adj_reg[7]_i_3_n_0 ,\byt_cnt_adj_reg[7]_i_4_n_0 ,\byt_cnt_adj_reg[7]_i_5_n_0 ,\byt_cnt_adj_reg[7]_i_6_n_0 ,\byt_cnt_adj_reg[7]_i_7_n_0 ,\byt_cnt_adj_reg[7]_i_8_n_0 ,\byt_cnt_adj_reg[7]_i_9_n_0 ,\byt_cnt_adj_reg[7]_i_10_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[8]),
        .Q(byt_cnt_adj_reg__0[8]),
        .R(SR));
  FDRE \byt_cnt_adj_reg_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[9]),
        .Q(byt_cnt_adj_reg__0[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'h00100000FFFFFFFF)) 
    \byte_cnt_reg[15]_i_1 
       (.I0(\ecc_corrected_reg_n_0_[3] ),
        .I1(code_notfound),
        .I2(ecc_done),
        .I3(\ecc_corrected_reg_n_0_[2] ),
        .I4(\byte_cnt_reg[15]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\byte_cnt_reg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000050033330533)) 
    \byte_cnt_reg[15]_i_2 
       (.I0(\ecc_corrected_reg_n_0_[4] ),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .I2(\ecc_corrected_reg_n_0_[5] ),
        .I3(ecc_done),
        .I4(code_notfound),
        .I5(\data_type_reg_reg[5]_0 [1]),
        .O(\byte_cnt_reg[15]_i_2_n_0 ));
  FDRE \byte_cnt_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[0]),
        .Q(byte_cnt[0]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[10] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[10]),
        .Q(byte_cnt[10]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[11] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[11]),
        .Q(byte_cnt[11]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[12] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[12]),
        .Q(byte_cnt[12]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[13] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[13]),
        .Q(byte_cnt[13]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[14] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[14]),
        .Q(byte_cnt[14]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[15] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[15]),
        .Q(byte_cnt[15]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[1]),
        .Q(byte_cnt[1]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[2]),
        .Q(byte_cnt[2]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[3]),
        .Q(byte_cnt[3]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[4]),
        .Q(byte_cnt[4]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[5]),
        .Q(byte_cnt[5]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[6] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[6]),
        .Q(byte_cnt[6]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[7] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[7]),
        .Q(byte_cnt[7]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[8] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[8]),
        .Q(byte_cnt[8]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[9] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[9]),
        .Q(byte_cnt[9]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_1
       (.I0(p_20_in),
        .I1(p_14_in),
        .I2(calcd_ecc_inferred_i_7_n_0),
        .I3(calcd_ecc_inferred_i_8_n_0),
        .I4(p_19_in),
        .I5(p_22_in),
        .O(calcd_ecc[5]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h96)) 
    calcd_ecc_inferred_i_10
       (.I0(p_8_in),
        .I1(p_9_in),
        .I2(p_11_in),
        .O(calcd_ecc_inferred_i_10_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_11
       (.I0(\pkt_header_reg_n_0_[1] ),
        .I1(p_15_in),
        .I2(p_23_in),
        .I3(p_0_in0_in),
        .I4(p_3_in),
        .I5(p_6_in),
        .O(calcd_ecc_inferred_i_11_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_12
       (.I0(p_10_in),
        .I1(p_12_in),
        .I2(p_5_in),
        .I3(p_2_in),
        .I4(\pkt_header_reg_n_0_[0] ),
        .I5(p_0_in0_in),
        .O(calcd_ecc_inferred_i_12_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_13
       (.I0(p_16_in),
        .I1(p_10_in),
        .I2(p_23_in),
        .I3(calcd_ecc_inferred_i_15_n_0),
        .I4(p_12_in),
        .I5(p_15_in),
        .O(calcd_ecc_inferred_i_13_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_14
       (.I0(p_3_in),
        .I1(p_7_in),
        .I2(p_5_in),
        .I3(p_2_in),
        .I4(p_6_in),
        .I5(p_0_in0_in),
        .O(calcd_ecc_inferred_i_14_n_0));
  LUT4 #(
    .INIT(16'h6996)) 
    calcd_ecc_inferred_i_15
       (.I0(p_1_in),
        .I1(p_4_in),
        .I2(\pkt_header_reg_n_0_[1] ),
        .I3(\pkt_header_reg_n_0_[0] ),
        .O(calcd_ecc_inferred_i_15_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_2
       (.I0(p_20_in),
        .I1(p_13_in),
        .I2(calcd_ecc_inferred_i_7_n_0),
        .I3(calcd_ecc_inferred_i_9_n_0),
        .I4(p_18_in),
        .I5(p_22_in),
        .O(calcd_ecc[4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_3
       (.I0(p_19_in),
        .I1(p_13_in),
        .I2(calcd_ecc_inferred_i_10_n_0),
        .I3(calcd_ecc_inferred_i_11_n_0),
        .I4(p_18_in),
        .I5(p_22_in),
        .O(calcd_ecc[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_4
       (.I0(p_20_in),
        .I1(p_14_in),
        .I2(calcd_ecc_inferred_i_10_n_0),
        .I3(calcd_ecc_inferred_i_12_n_0),
        .I4(p_19_in),
        .I5(p_18_in),
        .O(calcd_ecc[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_5
       (.I0(calcd_ecc_inferred_i_13_n_0),
        .I1(p_14_in),
        .I2(p_8_in),
        .I3(p_9_in),
        .I4(p_11_in),
        .I5(p_13_in),
        .O(calcd_ecc[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_6
       (.I0(calcd_ecc_inferred_i_14_n_0),
        .I1(calcd_ecc_inferred_i_15_n_0),
        .I2(p_23_in),
        .I3(p_10_in),
        .I4(p_8_in),
        .I5(p_9_in),
        .O(calcd_ecc[0]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'h96)) 
    calcd_ecc_inferred_i_7
       (.I0(p_23_in),
        .I1(p_10_in),
        .I2(p_16_in),
        .O(calcd_ecc_inferred_i_7_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_8
       (.I0(p_4_in),
        .I1(p_15_in),
        .I2(p_6_in),
        .I3(p_5_in),
        .I4(p_9_in),
        .I5(p_7_in),
        .O(calcd_ecc_inferred_i_8_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_9
       (.I0(p_8_in),
        .I1(p_12_in),
        .I2(p_3_in),
        .I3(p_2_in),
        .I4(p_1_in),
        .I5(p_7_in),
        .O(calcd_ecc_inferred_i_9_n_0));
  LUT5 #(
    .INIT(32'h0000FEFF)) 
    code_notfound_i_1
       (.I0(syndrome_sum[1]),
        .I1(syndrome_sum[2]),
        .I2(syndrome_sum[3]),
        .I3(syndrome_sum[0]),
        .I4(code_notfound_i_2_n_0),
        .O(code_notfound__0));
  LUT6 #(
    .INIT(64'h0996966896686881)) 
    code_notfound_i_2
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[5]),
        .O(code_notfound_i_2_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE code_notfound_reg
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(code_notfound__0),
        .Q(code_notfound),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \crc_blk_sel[0]_i_1 
       (.I0(byte_cnt[0]),
        .I1(byte_cnt[1]),
        .O(\crc_blk_sel_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \crc_blk_sel[1]_i_1 
       (.I0(byte_cnt[1]),
        .I1(byte_cnt[0]),
        .O(\crc_blk_sel_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \crc_blk_sel[2]_i_1 
       (.I0(byte_cnt[1]),
        .I1(byte_cnt[0]),
        .O(\crc_blk_sel_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \crc_blk_sel[3]_i_1 
       (.I0(byte_cnt[0]),
        .I1(byte_cnt[1]),
        .O(\crc_blk_sel_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \crc_p_strb[0]_i_1 
       (.I0(byte_cnt[1]),
        .I1(byte_cnt[0]),
        .O(\crc_p_strb_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_p_strb[1]_i_1 
       (.I0(byte_cnt[1]),
        .I1(byte_cnt[0]),
        .O(\crc_p_strb_reg[1] [1]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[0]_i_1 
       (.I0(\cur_byte_cnt_reg[3] [0]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(byt_cnt_adj[0]),
        .O(D[0]));
  LUT4 #(
    .INIT(16'h3A0A)) 
    \cur_byte_cnt[10]_i_1 
       (.I0(byt_cnt_adj[10]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[10] ),
        .O(D[7]));
  LUT4 #(
    .INIT(16'h0A3A)) 
    \cur_byte_cnt[11]_i_1 
       (.I0(byt_cnt_adj[11]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[11] ),
        .O(D[8]));
  LUT4 #(
    .INIT(16'h3A0A)) 
    \cur_byte_cnt[12]_i_1 
       (.I0(byt_cnt_adj[12]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[12] ),
        .O(D[9]));
  LUT4 #(
    .INIT(16'h0A3A)) 
    \cur_byte_cnt[15]_i_3 
       (.I0(byt_cnt_adj[15]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[15] ),
        .O(D[10]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[1]_i_1 
       (.I0(\cur_byte_cnt_reg[3] [1]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(byt_cnt_adj[1]),
        .O(D[1]));
  LUT4 #(
    .INIT(16'h1F10)) 
    \cur_byte_cnt[2]_i_1 
       (.I0(\cur_byte_cnt_reg[3] [2]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(byt_cnt_adj[2]),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h0A3A3A0A)) 
    \cur_byte_cnt[3]_i_1 
       (.I0(byt_cnt_adj[3]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[3] [2]),
        .I4(\cur_byte_cnt_reg[3] [3]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'h3A0A)) 
    \cur_byte_cnt[5]_i_1 
       (.I0(byt_cnt_adj[5]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[5] ),
        .O(D[4]));
  LUT4 #(
    .INIT(16'h3A0A)) 
    \cur_byte_cnt[6]_i_1 
       (.I0(byt_cnt_adj[6]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[6] ),
        .O(D[5]));
  LUT4 #(
    .INIT(16'h3A0A)) 
    \cur_byte_cnt[7]_i_1 
       (.I0(byt_cnt_adj[7]),
        .I1(ecc_start_d1),
        .I2(dest_out),
        .I3(\cur_byte_cnt_reg[7] ),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \cur_lp_vc[1]_i_1 
       (.I0(diwc_valid),
        .I1(diwc_corrected[4]),
        .I2(diwc_corrected[5]),
        .O(\cur_lp_vc_reg[1] ));
  LUT4 #(
    .INIT(16'hFB08)) 
    \data_type_reg[4]_i_1 
       (.I0(\ecc_corrected_reg_n_0_[4] ),
        .I1(ecc_done),
        .I2(code_notfound),
        .I3(\data_type_reg_reg[5]_0 [0]),
        .O(data_type_int[4]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \data_type_reg[5]_i_1 
       (.I0(\data_type_reg_reg[5]_0 [1]),
        .I1(code_notfound),
        .I2(ecc_done),
        .I3(\ecc_corrected_reg_n_0_[5] ),
        .O(data_type_int[5]));
  FDRE \data_type_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[0] ),
        .Q(data_type[0]),
        .R(SR));
  FDRE \data_type_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[1] ),
        .Q(data_type[1]),
        .R(SR));
  FDRE \data_type_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[2] ),
        .Q(data_type[2]),
        .R(SR));
  FDRE \data_type_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[3] ),
        .Q(data_type[3]),
        .R(SR));
  FDRE \data_type_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_type_int[4]),
        .Q(\data_type_reg_reg[5]_0 [0]),
        .R(SR));
  FDRE \data_type_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_type_int[5]),
        .Q(\data_type_reg_reg[5]_0 [1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h2)) 
    data_wip_reg_i_12
       (.I0(phecc_done),
        .I1(phecc_status[1]),
        .O(data_wip_reg_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    data_wip_reg_i_13
       (.I0(diwc_corrected[3]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[5]),
        .O(\control/di_not_supported_i589_in ));
  LUT6 #(
    .INIT(64'h0C0C0C0C0C8C0C0C)) 
    data_wip_reg_i_7
       (.I0(lp_wc0_i_reg_i_2_n_0),
        .I1(data_wip_reg_i_12_n_0),
        .I2(diwc_valid),
        .I3(\FSM_sequential_cur_state[1]_i_6_n_0 ),
        .I4(\control/di_not_supported_i589_in ),
        .I5(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .O(crc_start_d1_reg));
  LUT6 #(
    .INIT(64'h0000000002AA0000)) 
    data_wip_reg_i_9
       (.I0(data_wip_reg_i_12_n_0),
        .I1(\FSM_sequential_cur_state[1]_i_6_n_0 ),
        .I2(lp_wc0_i_reg_i_2_n_0),
        .I3(\control/di_not_supported_i589_in ),
        .I4(diwc_valid),
        .I5(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .O(crc_start_d1_reg_0));
  LUT6 #(
    .INIT(64'h2AFFFFFF2A000000)) 
    diwc_corrected_lte4_i_1
       (.I0(diwc_corrected_zero_i_2_n_0),
        .I1(diwc_corrected_lte4_i_2_n_0),
        .I2(p_0_in[2]),
        .I3(ecc_done),
        .I4(m_axis_aresetn),
        .I5(diwc_corrected_lte4),
        .O(diwc_corrected_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'hE)) 
    diwc_corrected_lte4_i_2
       (.I0(p_0_in[1]),
        .I1(p_0_in[0]),
        .O(diwc_corrected_lte4_i_2_n_0));
  FDRE diwc_corrected_lte4_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(diwc_corrected_lte4_i_1_n_0),
        .Q(diwc_corrected_lte4),
        .R(1'b0));
  FDRE \diwc_corrected_reg[0] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[0] ),
        .Q(diwc_corrected[0]),
        .R(SR));
  FDRE \diwc_corrected_reg[10] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[2]),
        .Q(diwc_corrected[10]),
        .R(SR));
  FDRE \diwc_corrected_reg[11] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[3]),
        .Q(diwc_corrected[11]),
        .R(SR));
  FDRE \diwc_corrected_reg[12] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[4]),
        .Q(diwc_corrected[12]),
        .R(SR));
  FDRE \diwc_corrected_reg[13] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[5]),
        .Q(diwc_corrected[13]),
        .R(SR));
  FDRE \diwc_corrected_reg[14] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[6]),
        .Q(diwc_corrected[14]),
        .R(SR));
  FDRE \diwc_corrected_reg[15] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[7]),
        .Q(diwc_corrected[15]),
        .R(SR));
  FDRE \diwc_corrected_reg[16] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[8]),
        .Q(diwc_corrected[16]),
        .R(SR));
  FDRE \diwc_corrected_reg[17] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[9]),
        .Q(diwc_corrected[17]),
        .R(SR));
  FDRE \diwc_corrected_reg[18] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[10]),
        .Q(diwc_corrected[18]),
        .R(SR));
  FDRE \diwc_corrected_reg[19] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[11]),
        .Q(diwc_corrected[19]),
        .R(SR));
  FDRE \diwc_corrected_reg[1] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[1] ),
        .Q(diwc_corrected[1]),
        .R(SR));
  FDRE \diwc_corrected_reg[20] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[12]),
        .Q(diwc_corrected[20]),
        .R(SR));
  FDRE \diwc_corrected_reg[21] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[13]),
        .Q(diwc_corrected[21]),
        .R(SR));
  FDRE \diwc_corrected_reg[22] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[14]),
        .Q(diwc_corrected[22]),
        .R(SR));
  FDRE \diwc_corrected_reg[23] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[15]),
        .Q(diwc_corrected[23]),
        .R(SR));
  FDRE \diwc_corrected_reg[2] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[2] ),
        .Q(diwc_corrected[2]),
        .R(SR));
  FDRE \diwc_corrected_reg[3] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[3] ),
        .Q(diwc_corrected[3]),
        .R(SR));
  FDRE \diwc_corrected_reg[4] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[4] ),
        .Q(diwc_corrected[4]),
        .R(SR));
  FDRE \diwc_corrected_reg[5] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[5] ),
        .Q(diwc_corrected[5]),
        .R(SR));
  FDRE \diwc_corrected_reg[6] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[6] ),
        .Q(diwc_corrected[6]),
        .R(SR));
  FDRE \diwc_corrected_reg[7] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[7] ),
        .Q(diwc_corrected[7]),
        .R(SR));
  FDRE \diwc_corrected_reg[8] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[0]),
        .Q(diwc_corrected[8]),
        .R(SR));
  FDRE \diwc_corrected_reg[9] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[1]),
        .Q(diwc_corrected[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    diwc_corrected_zero_i_1
       (.I0(diwc_corrected_zero_i_2_n_0),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .I3(p_0_in[2]),
        .O(diwc_corrected_csi_zero));
  LUT5 #(
    .INIT(32'h00000002)) 
    diwc_corrected_zero_i_2
       (.I0(diwc_corrected_zero_i_3_n_0),
        .I1(diwc_corrected_zero_i_4_n_0),
        .I2(p_0_in[11]),
        .I3(p_0_in[4]),
        .I4(p_0_in[10]),
        .O(diwc_corrected_zero_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    diwc_corrected_zero_i_3
       (.I0(p_0_in[12]),
        .I1(p_0_in[13]),
        .I2(p_0_in[5]),
        .I3(p_0_in[9]),
        .I4(p_0_in[7]),
        .I5(p_0_in[6]),
        .O(diwc_corrected_zero_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    diwc_corrected_zero_i_4
       (.I0(p_0_in[15]),
        .I1(p_0_in[14]),
        .I2(p_0_in[8]),
        .I3(p_0_in[3]),
        .O(diwc_corrected_zero_i_4_n_0));
  FDRE diwc_corrected_zero_reg
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(diwc_corrected_csi_zero),
        .Q(diwc_corrected_zero),
        .R(SR));
  LUT2 #(
    .INIT(4'h2)) 
    diwc_valid_i_1
       (.I0(ecc_done),
        .I1(code_notfound),
        .O(diwc_valid_int));
  FDRE diwc_valid_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(diwc_valid_int),
        .Q(diwc_valid),
        .R(SR));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[0]_i_1 
       (.I0(\mask_reg_n_0_[0] ),
        .I1(\pkt_header_reg_n_0_[0] ),
        .O(ecc_o[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[10]_i_1 
       (.I0(p_4_in),
        .I1(\mask_reg_n_0_[10] ),
        .O(ecc_o[10]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[11]_i_1 
       (.I0(p_5_in),
        .I1(\mask_reg_n_0_[11] ),
        .O(ecc_o[11]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[12]_i_1 
       (.I0(p_14_in),
        .I1(\mask_reg_n_0_[12] ),
        .O(ecc_o[12]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[13]_i_1 
       (.I0(p_6_in),
        .I1(\mask_reg_n_0_[13] ),
        .O(ecc_o[13]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[14]_i_1 
       (.I0(p_15_in),
        .I1(\mask_reg_n_0_[14] ),
        .O(ecc_o[14]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[15]_i_1 
       (.I0(p_19_in),
        .I1(\mask_reg_n_0_[15] ),
        .O(ecc_o[15]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[16]_i_1 
       (.I0(p_7_in),
        .I1(\mask_reg_n_0_[16] ),
        .O(ecc_o[16]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[17]_i_1 
       (.I0(p_16_in),
        .I1(\mask_reg_n_0_[17] ),
        .O(ecc_o[17]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[18]_i_1 
       (.I0(p_20_in),
        .I1(\mask_reg_n_0_[18] ),
        .O(ecc_o[18]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[19]_i_1 
       (.I0(p_22_in),
        .I1(\mask_reg_n_0_[19] ),
        .O(ecc_o[19]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[1]_i_1 
       (.I0(\mask_reg_n_0_[1] ),
        .I1(\pkt_header_reg_n_0_[1] ),
        .O(ecc_o[1]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[20]_i_1 
       (.I0(p_8_in),
        .I1(\mask_reg_n_0_[20] ),
        .O(ecc_o[20]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[21]_i_1 
       (.I0(p_9_in),
        .I1(\mask_reg_n_0_[21] ),
        .O(ecc_o[21]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[22]_i_1 
       (.I0(p_10_in),
        .I1(\mask_reg_n_0_[22] ),
        .O(ecc_o[22]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[23]_i_1 
       (.I0(\mask_reg_n_0_[23] ),
        .I1(p_23_in),
        .O(ecc_o[23]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[2]_i_1 
       (.I0(\mask_reg_n_0_[2] ),
        .I1(p_0_in0_in),
        .O(ecc_o[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[3]_i_1 
       (.I0(\mask_reg_n_0_[3] ),
        .I1(p_11_in),
        .O(ecc_o[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[4]_i_1 
       (.I0(\mask_reg_n_0_[4] ),
        .I1(p_1_in),
        .O(ecc_o[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[5]_i_1 
       (.I0(\mask_reg_n_0_[5] ),
        .I1(p_2_in),
        .O(ecc_o[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[6]_i_1 
       (.I0(\mask_reg_n_0_[6] ),
        .I1(p_12_in),
        .O(ecc_o[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[7]_i_1 
       (.I0(\mask_reg_n_0_[7] ),
        .I1(p_3_in),
        .O(ecc_o[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[8]_i_1 
       (.I0(p_13_in),
        .I1(\mask_reg_n_0_[8] ),
        .O(ecc_o[8]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[9]_i_1 
       (.I0(p_18_in),
        .I1(\mask_reg_n_0_[9] ),
        .O(ecc_o[9]));
  FDRE \ecc_corrected_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[0]),
        .Q(\ecc_corrected_reg_n_0_[0] ),
        .R(SR));
  FDRE \ecc_corrected_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[10]),
        .Q(p_0_in[2]),
        .R(SR));
  FDRE \ecc_corrected_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[11]),
        .Q(p_0_in[3]),
        .R(SR));
  FDRE \ecc_corrected_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[12]),
        .Q(p_0_in[4]),
        .R(SR));
  FDRE \ecc_corrected_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[13]),
        .Q(p_0_in[5]),
        .R(SR));
  FDRE \ecc_corrected_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[14]),
        .Q(p_0_in[6]),
        .R(SR));
  FDRE \ecc_corrected_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[15]),
        .Q(p_0_in[7]),
        .R(SR));
  FDRE \ecc_corrected_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[16]),
        .Q(p_0_in[8]),
        .R(SR));
  FDRE \ecc_corrected_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[17]),
        .Q(p_0_in[9]),
        .R(SR));
  FDRE \ecc_corrected_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[18]),
        .Q(p_0_in[10]),
        .R(SR));
  FDRE \ecc_corrected_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[19]),
        .Q(p_0_in[11]),
        .R(SR));
  FDRE \ecc_corrected_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[1]),
        .Q(\ecc_corrected_reg_n_0_[1] ),
        .R(SR));
  FDRE \ecc_corrected_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[20]),
        .Q(p_0_in[12]),
        .R(SR));
  FDRE \ecc_corrected_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[21]),
        .Q(p_0_in[13]),
        .R(SR));
  FDRE \ecc_corrected_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[22]),
        .Q(p_0_in[14]),
        .R(SR));
  FDRE \ecc_corrected_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[23]),
        .Q(p_0_in[15]),
        .R(SR));
  FDRE \ecc_corrected_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[2]),
        .Q(\ecc_corrected_reg_n_0_[2] ),
        .R(SR));
  FDRE \ecc_corrected_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[3]),
        .Q(\ecc_corrected_reg_n_0_[3] ),
        .R(SR));
  FDRE \ecc_corrected_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[4]),
        .Q(\ecc_corrected_reg_n_0_[4] ),
        .R(SR));
  FDRE \ecc_corrected_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[5]),
        .Q(\ecc_corrected_reg_n_0_[5] ),
        .R(SR));
  FDRE \ecc_corrected_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[6]),
        .Q(\ecc_corrected_reg_n_0_[6] ),
        .R(SR));
  FDRE \ecc_corrected_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[7]),
        .Q(\ecc_corrected_reg_n_0_[7] ),
        .R(SR));
  FDRE \ecc_corrected_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[8]),
        .Q(p_0_in[0]),
        .R(SR));
  FDRE \ecc_corrected_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[9]),
        .Q(p_0_in[1]),
        .R(SR));
  FDRE ecc_done_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_start_d2),
        .Q(ecc_done),
        .R(SR));
  FDRE ecc_start_d2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_start_d1),
        .Q(ecc_start_d2),
        .R(SR));
  FDRE \exp_ecc_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[24]),
        .Q(exp_ecc[0]),
        .R(SR));
  FDRE \exp_ecc_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[25]),
        .Q(exp_ecc[1]),
        .R(SR));
  FDRE \exp_ecc_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[26]),
        .Q(exp_ecc[2]),
        .R(SR));
  FDRE \exp_ecc_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[27]),
        .Q(exp_ecc[3]),
        .R(SR));
  FDRE \exp_ecc_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[28]),
        .Q(exp_ecc[4]),
        .R(SR));
  FDRE \exp_ecc_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[29]),
        .Q(exp_ecc[5]),
        .R(SR));
  FDRE \exp_ecc_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[30]),
        .Q(exp_ecc[6]),
        .R(SR));
  FDRE \exp_ecc_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[31]),
        .Q(exp_ecc[7]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    generic_pkt_i_2
       (.I0(diwc_corrected[5]),
        .I1(diwc_corrected[4]),
        .I2(diwc_valid),
        .I3(diwc_corrected[3]),
        .O(wr_en));
  LUT5 #(
    .INIT(32'h0080F080)) 
    img_send_i_1
       (.I0(img_send_i_2_n_0),
        .I1(img_send_i_3_n_0),
        .I2(m_axis_aresetn),
        .I3(src_send),
        .I4(src_rcv),
        .O(img_send_reg));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    img_send_i_2
       (.I0(diwc_valid),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[1]),
        .I3(diwc_corrected[4]),
        .O(img_send_i_2_n_0));
  LUT6 #(
    .INIT(64'h00DFFF0000003F00)) 
    img_send_i_3
       (.I0(diwc_corrected[1]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[0]),
        .I3(diwc_corrected[5]),
        .I4(diwc_corrected[4]),
        .I5(diwc_corrected[3]),
        .O(img_send_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    lbuf_blk_wen_i_i_3
       (.I0(data_type[1]),
        .I1(data_type[3]),
        .I2(\LINE_BUF_WR_64.mem_wdata_i[64]_i_3_n_0 ),
        .I3(data_type[2]),
        .I4(data_type[0]),
        .I5(full),
        .O(lbuf_blk_wen_i_reg));
  LUT5 #(
    .INIT(32'h04040400)) 
    long_pkt_out_i_1
       (.I0(code_notfound),
        .I1(ecc_done),
        .I2(diwc_corrected_csi_zero),
        .I3(\ecc_corrected_reg_n_0_[4] ),
        .I4(\ecc_corrected_reg_n_0_[5] ),
        .O(long_pkt_int));
  FDRE long_pkt_out_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(long_pkt_int),
        .Q(long_pkt_out),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT5 #(
    .INIT(32'hA8FFA800)) 
    lp_wc0_i_reg_i_1
       (.I0(lp_wc0_i_reg_i_2_n_0),
        .I1(diwc_corrected[4]),
        .I2(diwc_corrected[5]),
        .I3(diwc_valid),
        .I4(lp_wc0),
        .O(lp_wc0_i_reg_reg));
  LUT4 #(
    .INIT(16'h8000)) 
    lp_wc0_i_reg_i_2
       (.I0(lp_wc0_i_reg_i_3_n_0),
        .I1(lp_wc0_i_reg_i_4_n_0),
        .I2(lp_wc0_i_reg_i_5_n_0),
        .I3(lp_wc0_i_reg_i_6_n_0),
        .O(lp_wc0_i_reg_i_2_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    lp_wc0_i_reg_i_3
       (.I0(diwc_corrected[15]),
        .I1(diwc_corrected[14]),
        .I2(diwc_corrected[13]),
        .I3(diwc_corrected[12]),
        .O(lp_wc0_i_reg_i_3_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    lp_wc0_i_reg_i_4
       (.I0(diwc_corrected[9]),
        .I1(diwc_corrected[8]),
        .I2(diwc_corrected[11]),
        .I3(diwc_corrected[10]),
        .O(lp_wc0_i_reg_i_4_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    lp_wc0_i_reg_i_5
       (.I0(diwc_corrected[19]),
        .I1(diwc_corrected[18]),
        .I2(diwc_corrected[17]),
        .I3(diwc_corrected[16]),
        .O(lp_wc0_i_reg_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    lp_wc0_i_reg_i_6
       (.I0(diwc_corrected[23]),
        .I1(diwc_corrected[22]),
        .I2(diwc_corrected[21]),
        .I3(diwc_corrected[20]),
        .O(lp_wc0_i_reg_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \mask[0]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[0]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[10]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[1]),
        .I5(syndrome_code[3]),
        .O(mask[10]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[11]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[11]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[12]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[1]),
        .I5(syndrome_code[0]),
        .O(mask[12]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[13]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[1]),
        .O(mask[13]));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \mask[14]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[1]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[14]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[15]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[0]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[15]));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \mask[16]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[16]));
  LUT6 #(
    .INIT(64'h0000004000000000)) 
    \mask[17]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[4]),
        .I3(syndrome_code[0]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[1]),
        .O(mask[17]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[18]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[18]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[19]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[3]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[19]));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    \mask[1]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[2]),
        .O(mask[1]));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \mask[20]_i_1 
       (.I0(syndrome_code[5]),
        .I1(syndrome_code[4]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[20]));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \mask[21]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[21]));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    \mask[22]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[22]));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    \mask[23]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[2]),
        .O(mask[23]));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \mask[2]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[4]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[1]),
        .I5(syndrome_code[0]),
        .O(mask[2]));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \mask[3]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[3]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[4]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[1]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[3]),
        .O(mask[4]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[5]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[4]),
        .I3(syndrome_code[5]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[5]));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \mask[6]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[3]),
        .O(mask[6]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[7]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[3]),
        .I2(syndrome_code[4]),
        .I3(syndrome_code[5]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[7]));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \mask[8]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[5]),
        .O(mask[8]));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \mask[9]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[9]));
  FDRE \mask_reg[0] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[0]),
        .Q(\mask_reg_n_0_[0] ),
        .R(SR));
  FDRE \mask_reg[10] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[10]),
        .Q(\mask_reg_n_0_[10] ),
        .R(SR));
  FDRE \mask_reg[11] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[11]),
        .Q(\mask_reg_n_0_[11] ),
        .R(SR));
  FDRE \mask_reg[12] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[12]),
        .Q(\mask_reg_n_0_[12] ),
        .R(SR));
  FDRE \mask_reg[13] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[13]),
        .Q(\mask_reg_n_0_[13] ),
        .R(SR));
  FDRE \mask_reg[14] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[14]),
        .Q(\mask_reg_n_0_[14] ),
        .R(SR));
  FDRE \mask_reg[15] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[15]),
        .Q(\mask_reg_n_0_[15] ),
        .R(SR));
  FDRE \mask_reg[16] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[16]),
        .Q(\mask_reg_n_0_[16] ),
        .R(SR));
  FDRE \mask_reg[17] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[17]),
        .Q(\mask_reg_n_0_[17] ),
        .R(SR));
  FDRE \mask_reg[18] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[18]),
        .Q(\mask_reg_n_0_[18] ),
        .R(SR));
  FDRE \mask_reg[19] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[19]),
        .Q(\mask_reg_n_0_[19] ),
        .R(SR));
  FDRE \mask_reg[1] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[1]),
        .Q(\mask_reg_n_0_[1] ),
        .R(SR));
  FDRE \mask_reg[20] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[20]),
        .Q(\mask_reg_n_0_[20] ),
        .R(SR));
  FDRE \mask_reg[21] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[21]),
        .Q(\mask_reg_n_0_[21] ),
        .R(SR));
  FDRE \mask_reg[22] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[22]),
        .Q(\mask_reg_n_0_[22] ),
        .R(SR));
  FDRE \mask_reg[23] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[23]),
        .Q(\mask_reg_n_0_[23] ),
        .R(SR));
  FDRE \mask_reg[2] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[2]),
        .Q(\mask_reg_n_0_[2] ),
        .R(SR));
  FDRE \mask_reg[3] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[3]),
        .Q(\mask_reg_n_0_[3] ),
        .R(SR));
  FDRE \mask_reg[4] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[4]),
        .Q(\mask_reg_n_0_[4] ),
        .R(SR));
  FDRE \mask_reg[5] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[5]),
        .Q(\mask_reg_n_0_[5] ),
        .R(SR));
  FDRE \mask_reg[6] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[6]),
        .Q(\mask_reg_n_0_[6] ),
        .R(SR));
  FDRE \mask_reg[7] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[7]),
        .Q(\mask_reg_n_0_[7] ),
        .R(SR));
  FDRE \mask_reg[8] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[8]),
        .Q(\mask_reg_n_0_[8] ),
        .R(SR));
  FDRE \mask_reg[9] 
       (.C(m_axis_aclk),
        .CE(ecc_start_d1),
        .D(mask[9]),
        .Q(\mask_reg_n_0_[9] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h00000008AAAAAAAA)) 
    \mem_wdata[67]_i_2 
       (.I0(almost_full),
        .I1(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ),
        .I2(data_type[2]),
        .I3(data_type[0]),
        .I4(full),
        .I5(lbuf_blk_wen_i),
        .O(mem_wdata2));
  LUT6 #(
    .INIT(64'h0000000002FF0000)) 
    mem_wen_i_1
       (.I0(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ),
        .I1(data_type[2]),
        .I2(data_type[0]),
        .I3(lbuf_blk_wen_i),
        .I4(\LINE_BUF_WR_64.mem_wen_i_reg ),
        .I5(full),
        .O(mem_wen0));
  FDRE phecc_done_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_done),
        .Q(phecc_done),
        .R(SR));
  FDRE phecc_start_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(phecc_start),
        .Q(ecc_start_d1),
        .R(SR));
  LUT6 #(
    .INIT(64'h00000000FFFFFFEF)) 
    \phecc_status[1]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(\phecc_status[1]_i_2_n_0 ),
        .I3(syndrome_code[0]),
        .I4(syndrome_code[1]),
        .I5(code_notfound),
        .O(ecc_status));
  LUT2 #(
    .INIT(4'h1)) 
    \phecc_status[1]_i_2 
       (.I0(syndrome_code[5]),
        .I1(syndrome_code[4]),
        .O(\phecc_status[1]_i_2_n_0 ));
  FDRE \phecc_status_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_status),
        .Q(phecc_status[0]),
        .R(SR));
  FDRE \phecc_status_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(code_notfound),
        .Q(phecc_status[1]),
        .R(SR));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_0
       (.I0(1'b0),
        .O(calcd_ecc[7]));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_1
       (.I0(1'b0),
        .O(calcd_ecc[6]));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_2
       (.I0(1'b0),
        .O(syndrome_sum[3]));
  FDRE \pkt_header_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[0]),
        .Q(\pkt_header_reg_n_0_[0] ),
        .R(SR));
  FDRE \pkt_header_reg[10] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[10]),
        .Q(p_4_in),
        .R(SR));
  FDRE \pkt_header_reg[11] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[11]),
        .Q(p_5_in),
        .R(SR));
  FDRE \pkt_header_reg[12] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[12]),
        .Q(p_14_in),
        .R(SR));
  FDRE \pkt_header_reg[13] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[13]),
        .Q(p_6_in),
        .R(SR));
  FDRE \pkt_header_reg[14] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[14]),
        .Q(p_15_in),
        .R(SR));
  FDRE \pkt_header_reg[15] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[15]),
        .Q(p_19_in),
        .R(SR));
  FDRE \pkt_header_reg[16] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[16]),
        .Q(p_7_in),
        .R(SR));
  FDRE \pkt_header_reg[17] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[17]),
        .Q(p_16_in),
        .R(SR));
  FDRE \pkt_header_reg[18] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[18]),
        .Q(p_20_in),
        .R(SR));
  FDRE \pkt_header_reg[19] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[19]),
        .Q(p_22_in),
        .R(SR));
  FDRE \pkt_header_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[1]),
        .Q(\pkt_header_reg_n_0_[1] ),
        .R(SR));
  FDRE \pkt_header_reg[20] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[20]),
        .Q(p_8_in),
        .R(SR));
  FDRE \pkt_header_reg[21] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[21]),
        .Q(p_9_in),
        .R(SR));
  FDRE \pkt_header_reg[22] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[22]),
        .Q(p_10_in),
        .R(SR));
  FDRE \pkt_header_reg[23] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[23]),
        .Q(p_23_in),
        .R(SR));
  FDRE \pkt_header_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[2]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE \pkt_header_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[3]),
        .Q(p_11_in),
        .R(SR));
  FDRE \pkt_header_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[4]),
        .Q(p_1_in),
        .R(SR));
  FDRE \pkt_header_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[5]),
        .Q(p_2_in),
        .R(SR));
  FDRE \pkt_header_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[6]),
        .Q(p_12_in),
        .R(SR));
  FDRE \pkt_header_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[7]),
        .Q(p_3_in),
        .R(SR));
  FDRE \pkt_header_reg[8] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[8]),
        .Q(p_13_in),
        .R(SR));
  FDRE \pkt_header_reg[9] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[9]),
        .Q(p_18_in),
        .R(SR));
  LUT4 #(
    .INIT(16'h1435)) 
    pre_byt_cnt1_i_10
       (.I0(byt_cnt_adj[3]),
        .I1(\cur_byte_cnt_reg[3] [2]),
        .I2(\cur_byte_cnt_reg[3] [3]),
        .I3(byt_cnt_adj[2]),
        .O(DI[1]));
  LUT4 #(
    .INIT(16'h44D4)) 
    pre_byt_cnt1_i_11
       (.I0(byt_cnt_adj[1]),
        .I1(\cur_byte_cnt_reg[3] [1]),
        .I2(\cur_byte_cnt_reg[3] [0]),
        .I3(byt_cnt_adj[0]),
        .O(DI[0]));
  LUT4 #(
    .INIT(16'h1171)) 
    pre_byt_cnt1_i_6
       (.I0(byt_cnt_adj[11]),
        .I1(\cur_byte_cnt_reg[11] ),
        .I2(\cur_byte_cnt_reg[10] ),
        .I3(byt_cnt_adj[10]),
        .O(DI[3]));
  LUT4 #(
    .INIT(16'h44D4)) 
    pre_byt_cnt1_i_8
       (.I0(byt_cnt_adj[7]),
        .I1(\cur_byte_cnt_reg[7] ),
        .I2(\cur_byte_cnt_reg[6] ),
        .I3(byt_cnt_adj[6]),
        .O(DI[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_18
       (.I0(byte_cnt[1]),
        .I1(\cur_byte_cnt_reg[3] [1]),
        .I2(byte_cnt[0]),
        .I3(\cur_byte_cnt_reg[3] [0]),
        .O(S));
  LUT4 #(
    .INIT(16'h1171)) 
    pre_byt_cnt2_i_5
       (.I0(byte_cnt[11]),
        .I1(\cur_byte_cnt_reg[11] ),
        .I2(\cur_byte_cnt_reg[10] ),
        .I3(byte_cnt[10]),
        .O(pre_byt_cnt2_reg[2]));
  LUT4 #(
    .INIT(16'h44D4)) 
    pre_byt_cnt2_i_7
       (.I0(byte_cnt[7]),
        .I1(\cur_byte_cnt_reg[7] ),
        .I2(\cur_byte_cnt_reg[6] ),
        .I3(byte_cnt[6]),
        .O(pre_byt_cnt2_reg[1]));
  LUT4 #(
    .INIT(16'h1435)) 
    pre_byt_cnt2_i_9
       (.I0(byte_cnt[3]),
        .I1(\cur_byte_cnt_reg[3] [2]),
        .I2(\cur_byte_cnt_reg[3] [3]),
        .I3(byte_cnt[2]),
        .O(pre_byt_cnt2_reg[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_ecc_status_i[1]_i_1 
       (.I0(phecc_done),
        .I1(phecc_status[0]),
        .O(\reg_ecc_status_i_reg[2] [0]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \reg_ecc_status_i[2]_i_1 
       (.I0(phecc_done),
        .I1(phecc_status[1]),
        .O(\reg_ecc_status_i_reg[2] [1]));
  LUT5 #(
    .INIT(32'h00000020)) 
    short_pkt_i_1
       (.I0(\byte_cnt_reg[15]_i_2_n_0 ),
        .I1(\ecc_corrected_reg_n_0_[2] ),
        .I2(ecc_done),
        .I3(code_notfound),
        .I4(\ecc_corrected_reg_n_0_[3] ),
        .O(short_pkt_int));
  FDRE short_pkt_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(short_pkt_int),
        .Q(short_pkt),
        .R(SR));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_1
       (.I0(exp_ecc[7]),
        .I1(calcd_ecc[7]),
        .O(syndrome_code[7]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_2
       (.I0(exp_ecc[6]),
        .I1(calcd_ecc[6]),
        .O(syndrome_code[6]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_3
       (.I0(exp_ecc[5]),
        .I1(calcd_ecc[5]),
        .O(syndrome_code[5]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_4
       (.I0(exp_ecc[4]),
        .I1(calcd_ecc[4]),
        .O(syndrome_code[4]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_5
       (.I0(exp_ecc[3]),
        .I1(calcd_ecc[3]),
        .O(syndrome_code[3]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_6
       (.I0(exp_ecc[2]),
        .I1(calcd_ecc[2]),
        .O(syndrome_code[2]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_7
       (.I0(exp_ecc[1]),
        .I1(calcd_ecc[1]),
        .O(syndrome_code[1]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_8
       (.I0(exp_ecc[0]),
        .I1(calcd_ecc[0]),
        .O(syndrome_code[0]));
  LUT6 #(
    .INIT(64'hFEE8E880E8808000)) 
    syndrome_sum_inferred_i_1
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[4]),
        .O(syndrome_sum[2]));
  LUT6 #(
    .INIT(64'h8117177E177E7EE8)) 
    syndrome_sum_inferred_i_2
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[2]),
        .O(syndrome_sum[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    syndrome_sum_inferred_i_3
       (.I0(syndrome_code[5]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(syndrome_sum[0]));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_pkt_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_pkt_fifo
   (dout,
    empty,
    phecc_start,
    err_sot_sync,
    nxt_state0,
    reg_status,
    \LINE_BUF_WR_64.mem_data_l32_reg[27] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[0] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[1] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[2] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[3] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[4] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[5] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[6] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[7] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[8] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[10] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[11] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[16] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[17] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[18] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[19] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[20] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[22] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[13] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[9] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[12] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[14] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[15] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[21] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[23] ,
    \crc_p_value_reg[15] ,
    rst,
    dl0_rxbyteclkhs,
    m_axis_aclk,
    din,
    wr_en,
    rd_en,
    pkt_valid,
    core_men_r2c,
    \FSM_sequential_cur_state_reg[2] ,
    \data_type_reg_reg[5] ,
    pkt_rdvld_reg,
    \data_type_reg_reg[1] ,
    Q);
  output [41:0]dout;
  output empty;
  output phecc_start;
  output err_sot_sync;
  output nxt_state0;
  output [9:0]reg_status;
  output [3:0]\LINE_BUF_WR_64.mem_data_l32_reg[27] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[0] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[1] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[2] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[3] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[4] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[5] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[6] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[7] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[8] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[10] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[11] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[16] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[17] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[18] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[19] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[20] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[22] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[13] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[9] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[12] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[14] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[21] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  output [15:0]\crc_p_value_reg[15] ;
  input rst;
  input dl0_rxbyteclkhs;
  input m_axis_aclk;
  input [41:0]din;
  input wr_en;
  input rd_en;
  input pkt_valid;
  input core_men_r2c;
  input \FSM_sequential_cur_state_reg[2] ;
  input \data_type_reg_reg[5] ;
  input pkt_rdvld_reg;
  input \data_type_reg_reg[1] ;
  input [1:0]Q;

  wire \FSM_sequential_cur_state_reg[2] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[0] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[10] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[11] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[12] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[13] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[14] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[16] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[17] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[18] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[19] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[1] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[20] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[21] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[22] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  wire [3:0]\LINE_BUF_WR_64.mem_data_l32_reg[27] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[2] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[3] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[4] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[5] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[6] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[7] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[8] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[9] ;
  wire [1:0]Q;
  wire core_men_r2c;
  wire [15:0]\crc_p_value_reg[15] ;
  wire \data_type_reg_reg[1] ;
  wire \data_type_reg_reg[5] ;
  wire [41:0]din;
  wire dl0_rxbyteclkhs;
  wire [41:0]dout;
  wire empty;
  wire err_sot_sync;
  wire m_axis_aclk;
  wire nxt_state0;
  wire phecc_start;
  wire pkt_fifo_full;
  wire pkt_rdvld_reg;
  wire pkt_valid;
  wire rd_en;
  wire [9:0]reg_status;
  wire rst;
  wire wr_en;

  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \FSM_sequential_cur_state[0]_i_2 
       (.I0(dout[40]),
        .I1(pkt_valid),
        .I2(core_men_r2c),
        .I3(err_sot_sync),
        .O(nxt_state0));
  LUT6 #(
    .INIT(64'hFFFE000000000000)) 
    \HSC2R_CDC[10].hsc2r_bus_cdc_i_1 
       (.I0(dout[38]),
        .I1(dout[8]),
        .I2(dout[28]),
        .I3(dout[18]),
        .I4(pkt_valid),
        .I5(dout[40]),
        .O(reg_status[0]));
  LUT6 #(
    .INIT(64'hF000F000F000E000)) 
    \HSC2R_CDC[11].hsc2r_bus_cdc_i_1 
       (.I0(dout[19]),
        .I1(dout[29]),
        .I2(pkt_valid),
        .I3(dout[40]),
        .I4(dout[9]),
        .I5(dout[39]),
        .O(reg_status[1]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[12].hsc2r_bus_cdc_i_1 
       (.I0(dout[8]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[2]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[13].hsc2r_bus_cdc_i_1 
       (.I0(dout[9]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[3]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[14].hsc2r_bus_cdc_i_1 
       (.I0(dout[18]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[4]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[15].hsc2r_bus_cdc_i_1 
       (.I0(dout[19]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[5]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[16].hsc2r_bus_cdc_i_1 
       (.I0(dout[28]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[6]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[17].hsc2r_bus_cdc_i_1 
       (.I0(dout[29]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[7]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[18].hsc2r_bus_cdc_i_1 
       (.I0(dout[38]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[8]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[19].hsc2r_bus_cdc_i_1 
       (.I0(dout[39]),
        .I1(pkt_valid),
        .I2(dout[40]),
        .O(reg_status[9]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[0]_i_2 
       (.I0(dout[0]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[1]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[10]_i_2 
       (.I0(dout[12]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[16]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[10] ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[11]_i_2 
       (.I0(dout[13]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[17]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'h07F7)) 
    \LINE_BUF_WR_64.mem_data_l32[12]_i_2 
       (.I0(dout[14]),
        .I1(\data_type_reg_reg[5] ),
        .I2(\data_type_reg_reg[1] ),
        .I3(dout[24]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'h07F7)) 
    \LINE_BUF_WR_64.mem_data_l32[13]_i_2 
       (.I0(dout[15]),
        .I1(\data_type_reg_reg[5] ),
        .I2(\data_type_reg_reg[1] ),
        .I3(dout[25]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[13] ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT4 #(
    .INIT(16'h07F7)) 
    \LINE_BUF_WR_64.mem_data_l32[14]_i_2 
       (.I0(dout[16]),
        .I1(\data_type_reg_reg[5] ),
        .I2(\data_type_reg_reg[1] ),
        .I3(dout[26]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[14] ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT4 #(
    .INIT(16'h07F7)) 
    \LINE_BUF_WR_64.mem_data_l32[15]_i_2 
       (.I0(dout[17]),
        .I1(\data_type_reg_reg[5] ),
        .I2(\data_type_reg_reg[1] ),
        .I3(dout[27]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[16]_i_2 
       (.I0(dout[20]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[21]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[16] ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[17]_i_2 
       (.I0(dout[21]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[22]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[17] ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[18]_i_2 
       (.I0(dout[22]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[23]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[18] ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[19]_i_2 
       (.I0(dout[23]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[24]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[19] ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[1]_i_2 
       (.I0(dout[1]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[2]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[1] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[20]_i_2 
       (.I0(dout[24]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[27]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[20] ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'hFBF8)) 
    \LINE_BUF_WR_64.mem_data_l32[21]_i_3 
       (.I0(dout[25]),
        .I1(\data_type_reg_reg[5] ),
        .I2(\data_type_reg_reg[1] ),
        .I3(dout[30]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[21] ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[22]_i_3 
       (.I0(dout[26]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[31]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[22] ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'hBBB888B8)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_3 
       (.I0(dout[17]),
        .I1(\data_type_reg_reg[1] ),
        .I2(dout[32]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[27]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] ));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \LINE_BUF_WR_64.mem_data_l32[24]_i_1 
       (.I0(dout[30]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[34]),
        .I3(pkt_rdvld_reg),
        .I4(\data_type_reg_reg[1] ),
        .I5(dout[0]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[27] [0]));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \LINE_BUF_WR_64.mem_data_l32[25]_i_1 
       (.I0(dout[31]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[35]),
        .I3(pkt_rdvld_reg),
        .I4(\data_type_reg_reg[1] ),
        .I5(dout[1]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[27] [1]));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \LINE_BUF_WR_64.mem_data_l32[26]_i_1 
       (.I0(dout[32]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[36]),
        .I3(pkt_rdvld_reg),
        .I4(\data_type_reg_reg[1] ),
        .I5(dout[2]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[27] [2]));
  LUT6 #(
    .INIT(64'hFF00B8000000B800)) 
    \LINE_BUF_WR_64.mem_data_l32[27]_i_1 
       (.I0(dout[33]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[37]),
        .I3(pkt_rdvld_reg),
        .I4(\data_type_reg_reg[1] ),
        .I5(dout[3]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[27] [3]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[2]_i_2 
       (.I0(dout[2]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[3]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[3]_i_2 
       (.I0(dout[3]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[4]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[4]_i_2 
       (.I0(dout[4]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[7]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[5]_i_2 
       (.I0(dout[5]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[10]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[6]_i_2 
       (.I0(dout[6]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[11]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[7]_i_2 
       (.I0(dout[7]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[12]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[8]_i_2 
       (.I0(dout[10]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[14]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[8] ));
  LUT5 #(
    .INIT(32'hBBB888B8)) 
    \LINE_BUF_WR_64.mem_data_l32[9]_i_2 
       (.I0(dout[21]),
        .I1(\data_type_reg_reg[1] ),
        .I2(dout[15]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[11]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[9] ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[0]_i_1 
       (.I0(dout[30]),
        .I1(dout[20]),
        .I2(Q[0]),
        .I3(dout[10]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [0]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[10]_i_1 
       (.I0(dout[22]),
        .I1(Q[1]),
        .I2(dout[32]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [10]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[11]_i_1 
       (.I0(dout[23]),
        .I1(Q[1]),
        .I2(dout[33]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [11]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[12]_i_1 
       (.I0(dout[24]),
        .I1(Q[1]),
        .I2(dout[34]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [12]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[13]_i_1 
       (.I0(dout[25]),
        .I1(Q[1]),
        .I2(dout[35]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [13]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[14]_i_1 
       (.I0(dout[26]),
        .I1(Q[1]),
        .I2(dout[36]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [14]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[15]_i_1 
       (.I0(dout[27]),
        .I1(Q[1]),
        .I2(dout[37]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [15]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[1]_i_1 
       (.I0(dout[31]),
        .I1(dout[11]),
        .I2(Q[1]),
        .I3(dout[21]),
        .I4(Q[0]),
        .O(\crc_p_value_reg[15] [1]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[2]_i_1 
       (.I0(dout[32]),
        .I1(dout[22]),
        .I2(Q[0]),
        .I3(dout[12]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [2]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[3]_i_1 
       (.I0(dout[33]),
        .I1(dout[23]),
        .I2(Q[0]),
        .I3(dout[13]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [3]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[4]_i_1 
       (.I0(dout[34]),
        .I1(dout[24]),
        .I2(Q[0]),
        .I3(dout[14]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [4]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[5]_i_1 
       (.I0(dout[35]),
        .I1(dout[25]),
        .I2(Q[0]),
        .I3(dout[15]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [5]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[6]_i_1 
       (.I0(dout[36]),
        .I1(dout[26]),
        .I2(Q[0]),
        .I3(dout[16]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [6]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[7]_i_1 
       (.I0(dout[37]),
        .I1(dout[27]),
        .I2(Q[0]),
        .I3(dout[17]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [7]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'h22F3)) 
    \crc_p_value[8]_i_1 
       (.I0(dout[20]),
        .I1(Q[1]),
        .I2(dout[30]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [8]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[9]_i_1 
       (.I0(dout[31]),
        .I1(dout[21]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [9]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h00008000)) 
    phecc_start_d1_i_1
       (.I0(dout[40]),
        .I1(pkt_valid),
        .I2(core_men_r2c),
        .I3(\FSM_sequential_cur_state_reg[2] ),
        .I4(err_sot_sync),
        .O(phecc_start));
  LUT4 #(
    .INIT(16'hFFFE)) 
    phecc_start_d1_i_3
       (.I0(dout[18]),
        .I1(dout[28]),
        .I2(dout[8]),
        .I3(dout[38]),
        .O(err_sot_sync));
  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo1,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo1 pkt_fifo
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(pkt_fifo_full),
        .rd_clk(m_axis_aclk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(dl0_rxbyteclkhs),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo
   (dout,
    empty,
    rst,
    rd_en,
    \pkt_fifo_cnt_reg[0] ,
    E,
    dl3_rxbyteclkhs,
    din,
    ppi_fifo_wen,
    empty_fwft_i_reg,
    empty_fwft_i_reg_0,
    mst_rd_en_d1_reg,
    empty_fwft_i_reg_1,
    o_pkt_prcng,
    dest_arst,
    \arststages_ff_reg[1] );
  output [11:0]dout;
  output empty;
  output rst;
  output rd_en;
  output \pkt_fifo_cnt_reg[0] ;
  output [0:0]E;
  input dl3_rxbyteclkhs;
  input [11:0]din;
  input ppi_fifo_wen;
  input empty_fwft_i_reg;
  input empty_fwft_i_reg_0;
  input mst_rd_en_d1_reg;
  input empty_fwft_i_reg_1;
  input o_pkt_prcng;
  input dest_arst;
  input \arststages_ff_reg[1] ;

  wire [0:0]E;
  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire [11:0]din;
  wire dl3_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire empty_fwft_i_reg_0;
  wire empty_fwft_i_reg_1;
  wire mst_rd_en_d1_reg;
  wire o_pkt_prcng;
  wire \pkt_fifo_cnt_reg[0] ;
  wire ppi_fifo3_full;
  wire ppi_fifo_wen;
  wire rd_en;
  wire rst;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl3_rxbyteclkhs),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(ppi_fifo3_full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1__1 
       (.I0(empty),
        .I1(mst_rd_en_d1_reg),
        .O(rd_en));
  LUT2 #(
    .INIT(4'h7)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1__2 
       (.I0(dest_arst),
        .I1(\arststages_ff_reg[1] ),
        .O(rst));
  LUT2 #(
    .INIT(4'hB)) 
    \pkt_fifo_cnt[1]_i_1 
       (.I0(\pkt_fifo_cnt_reg[0] ),
        .I1(o_pkt_prcng),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'h007F00FF)) 
    \pkt_fifo_cnt[1]_i_4 
       (.I0(empty),
        .I1(empty_fwft_i_reg),
        .I2(empty_fwft_i_reg_0),
        .I3(mst_rd_en_d1_reg),
        .I4(empty_fwft_i_reg_1),
        .O(\pkt_fifo_cnt_reg[0] ));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo__xdcDup__1
   (dout,
    empty,
    mst_rd_en_d1_reg,
    dl0_rxbyteclkhs,
    rst,
    din,
    ppi_fifo_wen,
    mst_rd_en_d1_reg_0,
    empty_fwft_i_reg,
    \goreg_dm.dout_i_reg[10] ,
    \goreg_dm.dout_i_reg[10]_0 ,
    empty_fwft_i_reg_0);
  output [11:0]dout;
  output empty;
  output mst_rd_en_d1_reg;
  input dl0_rxbyteclkhs;
  input rst;
  input [11:0]din;
  input ppi_fifo_wen;
  input mst_rd_en_d1_reg_0;
  input empty_fwft_i_reg;
  input [0:0]\goreg_dm.dout_i_reg[10] ;
  input [0:0]\goreg_dm.dout_i_reg[10]_0 ;
  input empty_fwft_i_reg_0;

  wire [11:0]din;
  wire dl0_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire empty_fwft_i_reg_0;
  wire [0:0]\goreg_dm.dout_i_reg[10] ;
  wire [0:0]\goreg_dm.dout_i_reg[10]_0 ;
  wire mst_rd_en_d1_reg;
  wire mst_rd_en_d1_reg_0;
  wire ppi_fifo0_full;
  wire ppi_fifo_l0_ren;
  wire ppi_fifo_wen;
  wire rst;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__1 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl0_rxbyteclkhs),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(ppi_fifo0_full),
        .rd_en(ppi_fifo_l0_ren),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  LUT2 #(
    .INIT(4'h1)) 
    \CSI_OPT3_OFF.ppi_fifo_i_2 
       (.I0(empty),
        .I1(mst_rd_en_d1_reg_0),
        .O(ppi_fifo_l0_ren));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    mst_rd_en_d1_i_3
       (.I0(empty),
        .I1(empty_fwft_i_reg),
        .I2(dout[10]),
        .I3(\goreg_dm.dout_i_reg[10] ),
        .I4(\goreg_dm.dout_i_reg[10]_0 ),
        .I5(empty_fwft_i_reg_0),
        .O(mst_rd_en_d1_reg));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo__xdcDup__2
   (dout,
    empty,
    rd_en,
    mst_rd_en_d1_reg,
    dl1_rxbyteclkhs,
    rst,
    din,
    ppi_fifo_wen,
    mst_rd_en_d1_reg_0,
    empty_fwft_i_reg,
    Q,
    \goreg_dm.dout_i_reg[10] );
  output [11:0]dout;
  output empty;
  output rd_en;
  output mst_rd_en_d1_reg;
  input dl1_rxbyteclkhs;
  input rst;
  input [11:0]din;
  input ppi_fifo_wen;
  input mst_rd_en_d1_reg_0;
  input empty_fwft_i_reg;
  input [1:0]Q;
  input [0:0]\goreg_dm.dout_i_reg[10] ;

  wire [1:0]Q;
  wire [11:0]din;
  wire dl1_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire [0:0]\goreg_dm.dout_i_reg[10] ;
  wire mst_rd_en_d1_reg;
  wire mst_rd_en_d1_reg_0;
  wire ppi_fifo1_full;
  wire ppi_fifo_wen;
  wire rd_en;
  wire rst;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__2 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl1_rxbyteclkhs),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(ppi_fifo1_full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  LUT2 #(
    .INIT(4'h1)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1 
       (.I0(empty),
        .I1(mst_rd_en_d1_reg_0),
        .O(rd_en));
  LUT6 #(
    .INIT(64'h000002FF00000000)) 
    mst_rd_en_d1_i_4
       (.I0(dout[10]),
        .I1(empty),
        .I2(empty_fwft_i_reg),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(\goreg_dm.dout_i_reg[10] ),
        .O(mst_rd_en_d1_reg));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_fifo__xdcDup__3
   (dout,
    empty,
    D,
    dl2_rxbyteclkhs,
    rst,
    din,
    ppi_fifo_wen,
    mst_rd_en_d1_reg,
    Q,
    \goreg_dm.dout_i_reg[9] );
  output [11:0]dout;
  output empty;
  output [9:0]D;
  input dl2_rxbyteclkhs;
  input rst;
  input [11:0]din;
  input ppi_fifo_wen;
  input mst_rd_en_d1_reg;
  input [0:0]Q;
  input [9:0]\goreg_dm.dout_i_reg[9] ;

  wire [9:0]D;
  wire [0:0]Q;
  wire [11:0]din;
  wire dl2_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire [9:0]\goreg_dm.dout_i_reg[9] ;
  wire mst_rd_en_d1_reg;
  wire ppi_fifo2_full;
  wire ppi_fifo_l2_ren;
  wire ppi_fifo_wen;
  wire rst;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_6_fifo0,fifo_generator_v13_2_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_0,Vivado 2017.3" *) 
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_fifo0__xdcDup__3 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl2_rxbyteclkhs),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(ppi_fifo2_full),
        .rd_en(ppi_fifo_l2_ren),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  LUT2 #(
    .INIT(4'h1)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1__0 
       (.I0(empty),
        .I1(mst_rd_en_d1_reg),
        .O(ppi_fifo_l2_ren));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[0]_i_1 
       (.I0(dout[0]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[1]_i_1 
       (.I0(dout[1]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[2]_i_1 
       (.I0(dout[2]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[3]_i_1 
       (.I0(dout[3]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[4]_i_1 
       (.I0(dout[4]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[5]_i_1 
       (.I0(dout[5]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[6]_i_1 
       (.I0(dout[6]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[7]_i_1 
       (.I0(dout[7]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[8]_i_1 
       (.I0(dout[8]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [8]),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \buf2[9]_i_2 
       (.I0(dout[9]),
        .I1(Q),
        .I2(\goreg_dm.dout_i_reg[9] [9]),
        .O(D[9]));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_inf" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_inf
   (ppi_fifo_wdata,
    ppi_fifo_wen,
    dl0_rxactivehs,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl0_rxbyteclkhs,
    dl0_rxvalidhs,
    dl0_rxdatahs,
    dl0_errsotsynchs,
    dl0_errsoths,
    dl0_rxsynchs);
  output [11:0]ppi_fifo_wdata;
  output ppi_fifo_wen;
  input dl0_rxactivehs;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl0_rxbyteclkhs;
  input dl0_rxvalidhs;
  input [7:0]dl0_rxdatahs;
  input dl0_errsotsynchs;
  input dl0_errsoths;
  input dl0_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire dl0_errsoths;
  wire dl0_errsotsynchs;
  wire dl0_rxactivehs;
  wire dl0_rxbyteclkhs;
  wire [7:0]dl0_rxdatahs;
  wire dl0_rxsynchs;
  wire dl0_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire errsotsynchs_i1;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1_n_0;
  wire pkt_wr_in_progress_d1_i_2_n_0;
  wire [11:0]ppi_fifo_wdata;
  wire \ppi_fifo_wdata[11]_i_2_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1_n_0;

  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h08080C08)) 
    pkt_fst_data_d1_i_1
       (.I0(valid_hunt),
        .I1(dl0_rxvalidhs),
        .I2(rxvalidhs_d1),
        .I3(dl0_rxactivehs),
        .I4(rxactivehs_d1),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAFBAAAAA)) 
    pkt_wr_in_progress_d1_i_1
       (.I0(pkt_wr_in_progress_d1_i_2_n_0),
        .I1(dl0_errsoths),
        .I2(dl0_errsotsynchs),
        .I3(dl0_rxsynchs),
        .I4(dl0_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000082000000)) 
    pkt_wr_in_progress_d1_i_2
       (.I0(pkt_wr_in_progress_d1),
        .I1(dl0_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dest_arst),
        .I4(\arststages_ff_reg[1] ),
        .I5(ppi_fifo_wdata[8]),
        .O(pkt_wr_in_progress_d1_i_2_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h40)) 
    \ppi_fifo_wdata[11]_i_1 
       (.I0(rxactivehs_d1),
        .I1(dl0_rxactivehs),
        .I2(dl0_errsotsynchs),
        .O(errsotsynchs_i1));
  LUT2 #(
    .INIT(4'h2)) 
    \ppi_fifo_wdata[11]_i_2 
       (.I0(rxactivehs_d1),
        .I1(dl0_rxactivehs),
        .O(\ppi_fifo_wdata[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[8]_i_1 
       (.I0(ppi_fifo_wdata[8]),
        .I1(dl0_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl0_errsotsynchs),
        .I4(ppi_fifo_wen),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[9]_i_1 
       (.I0(ppi_fifo_wdata[9]),
        .I1(dl0_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl0_errsoths),
        .I4(ppi_fifo_wen),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(ppi_fifo_wdata[0]),
        .R(1'b0));
  FDSE \ppi_fifo_wdata_reg[10] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data_d1),
        .Q(ppi_fifo_wdata[10]),
        .S(errsotsynchs_i1));
  FDSE \ppi_fifo_wdata_reg[11] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_2_n_0 ),
        .Q(ppi_fifo_wdata[11]),
        .S(errsotsynchs_i1));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(ppi_fifo_wdata[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(ppi_fifo_wdata[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(ppi_fifo_wdata[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(ppi_fifo_wdata[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(ppi_fifo_wdata[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(ppi_fifo_wdata[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(ppi_fifo_wdata[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(ppi_fifo_wdata[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(ppi_fifo_wdata[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h20202020FF202020)) 
    ppi_wen_done_i_1
       (.I0(dl0_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(pkt_start1),
        .I3(rxvalidhs_d1),
        .I4(pkt_wr_in_progress_d1),
        .I5(ppi_fifo_wdata[8]),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2
       (.I0(dl0_rxsynchs),
        .I1(dl0_errsotsynchs),
        .I2(dl0_errsoths),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl0_rxvalidhs),
        .I3(dl0_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1_n_0));
  FDRE valid_hunt_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_inf" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_inf_0
   (ppi_fifo_wdata,
    ppi_fifo_wen,
    dl1_rxactivehs,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl1_rxbyteclkhs,
    dl1_rxvalidhs,
    dl1_rxdatahs,
    dl1_errsotsynchs,
    dl1_errsoths,
    dl1_rxsynchs);
  output [11:0]ppi_fifo_wdata;
  output ppi_fifo_wen;
  input dl1_rxactivehs;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl1_rxbyteclkhs;
  input dl1_rxvalidhs;
  input [7:0]dl1_rxdatahs;
  input dl1_errsotsynchs;
  input dl1_errsoths;
  input dl1_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire dl1_errsoths;
  wire dl1_errsotsynchs;
  wire dl1_rxactivehs;
  wire dl1_rxbyteclkhs;
  wire [7:0]dl1_rxdatahs;
  wire dl1_rxsynchs;
  wire dl1_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire errsotsynchs_i1;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1__0_n_0;
  wire pkt_wr_in_progress_d1_i_2__0_n_0;
  wire [11:0]ppi_fifo_wdata;
  wire \ppi_fifo_wdata[11]_i_2__0_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1__0_n_0;

  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h08080C08)) 
    pkt_fst_data_d1_i_1__0
       (.I0(valid_hunt),
        .I1(dl1_rxvalidhs),
        .I2(rxvalidhs_d1),
        .I3(dl1_rxactivehs),
        .I4(rxactivehs_d1),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAFBAAAAA)) 
    pkt_wr_in_progress_d1_i_1__0
       (.I0(pkt_wr_in_progress_d1_i_2__0_n_0),
        .I1(dl1_errsoths),
        .I2(dl1_errsotsynchs),
        .I3(dl1_rxsynchs),
        .I4(dl1_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000082000000)) 
    pkt_wr_in_progress_d1_i_2__0
       (.I0(pkt_wr_in_progress_d1),
        .I1(dl1_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dest_arst),
        .I4(\arststages_ff_reg[1] ),
        .I5(ppi_fifo_wdata[8]),
        .O(pkt_wr_in_progress_d1_i_2__0_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1__0_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h40)) 
    \ppi_fifo_wdata[11]_i_1__0 
       (.I0(rxactivehs_d1),
        .I1(dl1_rxactivehs),
        .I2(dl1_errsotsynchs),
        .O(errsotsynchs_i1));
  LUT2 #(
    .INIT(4'h2)) 
    \ppi_fifo_wdata[11]_i_2__0 
       (.I0(rxactivehs_d1),
        .I1(dl1_rxactivehs),
        .O(\ppi_fifo_wdata[11]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[8]_i_1__0 
       (.I0(ppi_fifo_wdata[8]),
        .I1(dl1_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl1_errsotsynchs),
        .I4(ppi_fifo_wen),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[9]_i_1__0 
       (.I0(ppi_fifo_wdata[9]),
        .I1(dl1_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl1_errsoths),
        .I4(ppi_fifo_wen),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(ppi_fifo_wdata[0]),
        .R(1'b0));
  FDSE \ppi_fifo_wdata_reg[10] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data_d1),
        .Q(ppi_fifo_wdata[10]),
        .S(errsotsynchs_i1));
  FDSE \ppi_fifo_wdata_reg[11] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_2__0_n_0 ),
        .Q(ppi_fifo_wdata[11]),
        .S(errsotsynchs_i1));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(ppi_fifo_wdata[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(ppi_fifo_wdata[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(ppi_fifo_wdata[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(ppi_fifo_wdata[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(ppi_fifo_wdata[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(ppi_fifo_wdata[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(ppi_fifo_wdata[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(ppi_fifo_wdata[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(ppi_fifo_wdata[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h20202020FF202020)) 
    ppi_wen_done_i_1__0
       (.I0(dl1_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(pkt_start1),
        .I3(rxvalidhs_d1),
        .I4(pkt_wr_in_progress_d1),
        .I5(ppi_fifo_wdata[8]),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2__0
       (.I0(dl1_rxsynchs),
        .I1(dl1_errsotsynchs),
        .I2(dl1_errsoths),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1__0
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl1_rxvalidhs),
        .I3(dl1_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1__0_n_0));
  FDRE valid_hunt_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1__0_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_inf" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_inf_1
   (ppi_fifo_wdata,
    ppi_fifo_wen,
    dl2_rxactivehs,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl2_rxbyteclkhs,
    dl2_rxvalidhs,
    dl2_rxdatahs,
    dl2_errsotsynchs,
    dl2_errsoths,
    dl2_rxsynchs);
  output [11:0]ppi_fifo_wdata;
  output ppi_fifo_wen;
  input dl2_rxactivehs;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl2_rxbyteclkhs;
  input dl2_rxvalidhs;
  input [7:0]dl2_rxdatahs;
  input dl2_errsotsynchs;
  input dl2_errsoths;
  input dl2_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire dl2_errsoths;
  wire dl2_errsotsynchs;
  wire dl2_rxactivehs;
  wire dl2_rxbyteclkhs;
  wire [7:0]dl2_rxdatahs;
  wire dl2_rxsynchs;
  wire dl2_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire errsotsynchs_i1;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1__1_n_0;
  wire pkt_wr_in_progress_d1_i_2__1_n_0;
  wire [11:0]ppi_fifo_wdata;
  wire \ppi_fifo_wdata[11]_i_2__1_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1__1_n_0;

  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h08080C08)) 
    pkt_fst_data_d1_i_1__1
       (.I0(valid_hunt),
        .I1(dl2_rxvalidhs),
        .I2(rxvalidhs_d1),
        .I3(dl2_rxactivehs),
        .I4(rxactivehs_d1),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAFBAAAAA)) 
    pkt_wr_in_progress_d1_i_1__1
       (.I0(pkt_wr_in_progress_d1_i_2__1_n_0),
        .I1(dl2_errsoths),
        .I2(dl2_errsotsynchs),
        .I3(dl2_rxsynchs),
        .I4(dl2_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h0000000082000000)) 
    pkt_wr_in_progress_d1_i_2__1
       (.I0(pkt_wr_in_progress_d1),
        .I1(dl2_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dest_arst),
        .I4(\arststages_ff_reg[1] ),
        .I5(ppi_fifo_wdata[8]),
        .O(pkt_wr_in_progress_d1_i_2__1_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1__1_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h40)) 
    \ppi_fifo_wdata[11]_i_1__1 
       (.I0(rxactivehs_d1),
        .I1(dl2_rxactivehs),
        .I2(dl2_errsotsynchs),
        .O(errsotsynchs_i1));
  LUT2 #(
    .INIT(4'h2)) 
    \ppi_fifo_wdata[11]_i_2__1 
       (.I0(rxactivehs_d1),
        .I1(dl2_rxactivehs),
        .O(\ppi_fifo_wdata[11]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[8]_i_1__1 
       (.I0(ppi_fifo_wdata[8]),
        .I1(dl2_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl2_errsotsynchs),
        .I4(ppi_fifo_wen),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[9]_i_1__1 
       (.I0(ppi_fifo_wdata[9]),
        .I1(dl2_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl2_errsoths),
        .I4(ppi_fifo_wen),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(ppi_fifo_wdata[0]),
        .R(1'b0));
  FDSE \ppi_fifo_wdata_reg[10] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data_d1),
        .Q(ppi_fifo_wdata[10]),
        .S(errsotsynchs_i1));
  FDSE \ppi_fifo_wdata_reg[11] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_2__1_n_0 ),
        .Q(ppi_fifo_wdata[11]),
        .S(errsotsynchs_i1));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(ppi_fifo_wdata[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(ppi_fifo_wdata[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(ppi_fifo_wdata[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(ppi_fifo_wdata[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(ppi_fifo_wdata[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(ppi_fifo_wdata[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(ppi_fifo_wdata[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(ppi_fifo_wdata[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(ppi_fifo_wdata[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h20202020FF202020)) 
    ppi_wen_done_i_1__1
       (.I0(dl2_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(pkt_start1),
        .I3(rxvalidhs_d1),
        .I4(pkt_wr_in_progress_d1),
        .I5(ppi_fifo_wdata[8]),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2__1
       (.I0(dl2_rxsynchs),
        .I1(dl2_errsotsynchs),
        .I2(dl2_errsoths),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(dl2_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1__1
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl2_rxvalidhs),
        .I3(dl2_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1__1_n_0));
  FDRE valid_hunt_reg
       (.C(dl2_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1__1_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_ppi_inf" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_ppi_inf_2
   (ppi_fifo_wdata,
    ppi_fifo_wen,
    dl3_rxactivehs,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl3_rxbyteclkhs,
    dl3_rxvalidhs,
    dl3_rxdatahs,
    dl3_errsotsynchs,
    dl3_errsoths,
    dl3_rxsynchs);
  output [11:0]ppi_fifo_wdata;
  output ppi_fifo_wen;
  input dl3_rxactivehs;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl3_rxbyteclkhs;
  input dl3_rxvalidhs;
  input [7:0]dl3_rxdatahs;
  input dl3_errsotsynchs;
  input dl3_errsoths;
  input dl3_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire dl3_errsoths;
  wire dl3_errsotsynchs;
  wire dl3_rxactivehs;
  wire dl3_rxbyteclkhs;
  wire [7:0]dl3_rxdatahs;
  wire dl3_rxsynchs;
  wire dl3_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire errsotsynchs_i1;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1__2_n_0;
  wire pkt_wr_in_progress_d1_i_2__2_n_0;
  wire [11:0]ppi_fifo_wdata;
  wire \ppi_fifo_wdata[11]_i_2__2_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1__2_n_0;

  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h08080C08)) 
    pkt_fst_data_d1_i_1__2
       (.I0(valid_hunt),
        .I1(dl3_rxvalidhs),
        .I2(rxvalidhs_d1),
        .I3(dl3_rxactivehs),
        .I4(rxactivehs_d1),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAFBAAAAA)) 
    pkt_wr_in_progress_d1_i_1__2
       (.I0(pkt_wr_in_progress_d1_i_2__2_n_0),
        .I1(dl3_errsoths),
        .I2(dl3_errsotsynchs),
        .I3(dl3_rxsynchs),
        .I4(dl3_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h0000000082000000)) 
    pkt_wr_in_progress_d1_i_2__2
       (.I0(pkt_wr_in_progress_d1),
        .I1(dl3_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dest_arst),
        .I4(\arststages_ff_reg[1] ),
        .I5(ppi_fifo_wdata[8]),
        .O(pkt_wr_in_progress_d1_i_2__2_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1__2_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h40)) 
    \ppi_fifo_wdata[11]_i_1__2 
       (.I0(rxactivehs_d1),
        .I1(dl3_rxactivehs),
        .I2(dl3_errsotsynchs),
        .O(errsotsynchs_i1));
  LUT2 #(
    .INIT(4'h2)) 
    \ppi_fifo_wdata[11]_i_2__2 
       (.I0(rxactivehs_d1),
        .I1(dl3_rxactivehs),
        .O(\ppi_fifo_wdata[11]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[8]_i_1__2 
       (.I0(ppi_fifo_wdata[8]),
        .I1(dl3_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl3_errsotsynchs),
        .I4(ppi_fifo_wen),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h0C00AEA2)) 
    \ppi_fifo_wdata[9]_i_1__2 
       (.I0(ppi_fifo_wdata[9]),
        .I1(dl3_rxactivehs),
        .I2(rxactivehs_d1),
        .I3(dl3_errsoths),
        .I4(ppi_fifo_wen),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(ppi_fifo_wdata[0]),
        .R(1'b0));
  FDSE \ppi_fifo_wdata_reg[10] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data_d1),
        .Q(ppi_fifo_wdata[10]),
        .S(errsotsynchs_i1));
  FDSE \ppi_fifo_wdata_reg[11] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_2__2_n_0 ),
        .Q(ppi_fifo_wdata[11]),
        .S(errsotsynchs_i1));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(ppi_fifo_wdata[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(ppi_fifo_wdata[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(ppi_fifo_wdata[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(ppi_fifo_wdata[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(ppi_fifo_wdata[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(ppi_fifo_wdata[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(ppi_fifo_wdata[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(ppi_fifo_wdata[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(ppi_fifo_wdata[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h20202020FF202020)) 
    ppi_wen_done_i_1__2
       (.I0(dl3_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(pkt_start1),
        .I3(rxvalidhs_d1),
        .I4(pkt_wr_in_progress_d1),
        .I5(ppi_fifo_wdata[8]),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2__2
       (.I0(dl3_rxsynchs),
        .I1(dl3_errsotsynchs),
        .I2(dl3_errsoths),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(dl3_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1__2
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl3_rxvalidhs),
        .I3(dl3_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1__2_n_0));
  FDRE valid_hunt_reg
       (.C(dl3_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1__2_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_reg_inf" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_reg_inf
   (Q,
    dest_out,
    \syncstages_ff_reg[0] ,
    \syncstages_ff_reg[0]_0 ,
    src_ff_reg,
    src_rcv,
    src_send,
    rstn_i,
    SS,
    out,
    cl_enable,
    pktnppi_fifo_rst_ack_i_reg_0,
    s_axi_bvalid,
    s_axi_rvalid,
    \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ,
    \isr_i_reg[19] ,
    wr2_isr,
    interrupt,
    \s_axi_rdata_reg[31]_0 ,
    s_axi_awready,
    s_axi_wready,
    s_axi_arready,
    \LP_CNT_C2R[0].lp_count_reg[0][0]_0 ,
    \FSM_sequential_cur_state_reg[0] ,
    s_axi_rdata,
    m_axis_aclk,
    src_in,
    s_axi_aclk,
    full,
    dl0_rxbyteclkhs,
    dl0_stopstate,
    dl1_stopstate,
    dl2_stopstate,
    dl3_stopstate,
    diwc_corrected,
    data_shutdown,
    wr_en,
    lp_count_en,
    SR,
    s_axi_aresetn,
    img_send_reg_0,
    m_axis_aresetn,
    \core_config_reg[1]_0 ,
    \isr_i_reg[31] ,
    s_axi_wdata,
    p_0_in9_in,
    p_0_in10_in,
    \ier_reg[9]_0 ,
    isr_0,
    p_0_in19_in,
    \syncstages_ff_reg[1] ,
    p_0_in14_in,
    p_0_in13_in,
    p_0_in12_in,
    p_0_in11_in,
    dest_pulse,
    p_0_in,
    s_axi_bready,
    s_axi_awvalid,
    s_axi_arvalid,
    s_axi_awaddr,
    s_axi_wvalid,
    s_axi_araddr,
    s_axi_rready,
    D,
    lx_info_all,
    \arststages_ff_reg[1] );
  output [0:0]Q;
  output dest_out;
  output [1:0]\syncstages_ff_reg[0] ;
  output [1:0]\syncstages_ff_reg[0]_0 ;
  output src_ff_reg;
  output src_rcv;
  output src_send;
  output rstn_i;
  output [0:0]SS;
  output [3:0]out;
  output cl_enable;
  output pktnppi_fifo_rst_ack_i_reg_0;
  output s_axi_bvalid;
  output s_axi_rvalid;
  output \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ;
  output [0:0]\isr_i_reg[19] ;
  output wr2_isr;
  output interrupt;
  output [2:0]\s_axi_rdata_reg[31]_0 ;
  output s_axi_awready;
  output s_axi_wready;
  output s_axi_arready;
  output [0:0]\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ;
  output [0:0]\FSM_sequential_cur_state_reg[0] ;
  output [31:0]s_axi_rdata;
  input m_axis_aclk;
  input [21:0]src_in;
  input s_axi_aclk;
  input full;
  input dl0_rxbyteclkhs;
  input dl0_stopstate;
  input dl1_stopstate;
  input dl2_stopstate;
  input dl3_stopstate;
  input [23:0]diwc_corrected;
  input data_shutdown;
  input wr_en;
  input [3:0]lp_count_en;
  input [0:0]SR;
  input s_axi_aresetn;
  input img_send_reg_0;
  input m_axis_aresetn;
  input [15:0]\core_config_reg[1]_0 ;
  input [12:0]\isr_i_reg[31] ;
  input [23:0]s_axi_wdata;
  input p_0_in9_in;
  input p_0_in10_in;
  input \ier_reg[9]_0 ;
  input isr_0;
  input p_0_in19_in;
  input [1:0]\syncstages_ff_reg[1] ;
  input p_0_in14_in;
  input p_0_in13_in;
  input p_0_in12_in;
  input p_0_in11_in;
  input dest_pulse;
  input p_0_in;
  input s_axi_bready;
  input s_axi_awvalid;
  input s_axi_arvalid;
  input [4:0]s_axi_awaddr;
  input s_axi_wvalid;
  input [4:0]s_axi_araddr;
  input s_axi_rready;
  input [1:0]D;
  input [15:0]lx_info_all;
  input \arststages_ff_reg[1] ;

  wire [1:0]D;
  wire \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ;
  wire [0:0]\FSM_sequential_cur_state_reg[0] ;
  wire [0:0]\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_7 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[0].lp_count_reg[0]_7 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_7 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[1].lp_count_reg[1]_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_7 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[2].lp_count_reg[2]_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_7 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[3].lp_count_reg[3]_8 ;
  wire [5:2]\LX_INFO_GEN[0].lx_info_reg[0]_1 ;
  wire [5:2]\LX_INFO_GEN[1].lx_info_reg[1]_2 ;
  wire [5:2]\LX_INFO_GEN[2].lx_info_reg[2]_3 ;
  wire [5:2]\LX_INFO_GEN[3].lx_info_reg[3]_4 ;
  wire [0:0]Q;
  wire \SD_INV_1.shutdown_i[3]_i_1_n_0 ;
  wire [0:0]SR;
  wire [0:0]SS;
  wire \active_lanes[1]_i_1_n_0 ;
  wire [1:0]active_lanes_r2p;
  wire \arststages_ff_reg[1] ;
  (* DONT_TOUCH *) wire cl_enable_i;
  wire [1:0]cl_info;
  wire \core_config[1]_i_1_n_0 ;
  wire \core_config[1]_i_2_n_0 ;
  wire [15:0]\core_config_reg[1]_0 ;
  wire \core_config_reg_n_0_[0] ;
  wire core_en_d1;
  wire core_men;
  wire data_dis_done;
  wire data_dis_done_i_1_n_0;
  wire data_shutdown;
  wire data_shutdown_c2r;
  wire dest_out;
  wire dest_pulse;
  wire disable_in_progress;
  wire disable_in_progress_d1;
  wire disable_in_progress_d1_i_2_n_0;
  wire [23:0]diwc_corrected;
  wire dl0_rxbyteclkhs;
  wire dl0_stopstate;
  wire dl1_stopstate;
  wire dl2_stopstate;
  wire dl3_stopstate;
  wire full;
  wire gen_spkt_fifo_n_10;
  wire gen_spkt_fifo_n_11;
  wire gen_spkt_fifo_n_12;
  wire gen_spkt_fifo_n_13;
  wire gen_spkt_fifo_n_14;
  wire gen_spkt_fifo_n_15;
  wire gen_spkt_fifo_n_16;
  wire gen_spkt_fifo_n_17;
  wire gen_spkt_fifo_n_18;
  wire gen_spkt_fifo_n_19;
  wire gen_spkt_fifo_n_20;
  wire gen_spkt_fifo_n_21;
  wire gen_spkt_fifo_n_22;
  wire gen_spkt_fifo_n_23;
  wire gen_spkt_fifo_n_24;
  wire gen_spkt_fifo_n_25;
  wire gen_spkt_fifo_n_26;
  wire gen_spkt_fifo_n_3;
  wire gen_spkt_fifo_n_4;
  wire gen_spkt_fifo_n_5;
  wire gen_spkt_fifo_n_6;
  wire gen_spkt_fifo_n_7;
  wire gen_spkt_fifo_n_8;
  wire gen_spkt_fifo_n_9;
  wire \gie[0]_i_1_n_0 ;
  wire \gie_reg_n_0_[0] ;
  wire [17:17]ier;
  wire \ier_reg[9]_0 ;
  wire \ier_reg_n_0_[0] ;
  wire \ier_reg_n_0_[10] ;
  wire \ier_reg_n_0_[11] ;
  wire \ier_reg_n_0_[12] ;
  wire \ier_reg_n_0_[13] ;
  wire \ier_reg_n_0_[14] ;
  wire \ier_reg_n_0_[15] ;
  wire \ier_reg_n_0_[16] ;
  wire \ier_reg_n_0_[17] ;
  wire \ier_reg_n_0_[18] ;
  wire \ier_reg_n_0_[19] ;
  wire \ier_reg_n_0_[1] ;
  wire \ier_reg_n_0_[20] ;
  wire \ier_reg_n_0_[21] ;
  wire \ier_reg_n_0_[2] ;
  wire \ier_reg_n_0_[3] ;
  wire \ier_reg_n_0_[4] ;
  wire \ier_reg_n_0_[5] ;
  wire \ier_reg_n_0_[6] ;
  wire \ier_reg_n_0_[7] ;
  wire \ier_reg_n_0_[8] ;
  wire [31:0]img_info1_vc0;
  wire \img_info1_vc0[15]_i_1_n_0 ;
  wire \img_info1_vc0[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc1;
  wire \img_info1_vc1[15]_i_1_n_0 ;
  wire \img_info1_vc1[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc2;
  wire \img_info1_vc2[15]_i_1_n_0 ;
  wire \img_info1_vc2[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc3;
  wire \img_info1_vc3[15]_i_1_n_0 ;
  wire \img_info1_vc3[31]_i_1_n_0 ;
  wire \img_info2_vc0_reg_n_0_[0] ;
  wire \img_info2_vc0_reg_n_0_[1] ;
  wire \img_info2_vc0_reg_n_0_[2] ;
  wire \img_info2_vc0_reg_n_0_[3] ;
  wire \img_info2_vc0_reg_n_0_[4] ;
  wire \img_info2_vc0_reg_n_0_[5] ;
  wire \img_info2_vc1_reg_n_0_[0] ;
  wire \img_info2_vc1_reg_n_0_[1] ;
  wire \img_info2_vc1_reg_n_0_[2] ;
  wire \img_info2_vc1_reg_n_0_[3] ;
  wire \img_info2_vc1_reg_n_0_[4] ;
  wire \img_info2_vc1_reg_n_0_[5] ;
  wire \img_info2_vc2_reg_n_0_[0] ;
  wire \img_info2_vc2_reg_n_0_[1] ;
  wire \img_info2_vc2_reg_n_0_[2] ;
  wire \img_info2_vc2_reg_n_0_[3] ;
  wire \img_info2_vc2_reg_n_0_[4] ;
  wire \img_info2_vc2_reg_n_0_[5] ;
  wire \img_info2_vc3_reg_n_0_[0] ;
  wire \img_info2_vc3_reg_n_0_[1] ;
  wire \img_info2_vc3_reg_n_0_[2] ;
  wire \img_info2_vc3_reg_n_0_[3] ;
  wire \img_info2_vc3_reg_n_0_[4] ;
  wire \img_info2_vc3_reg_n_0_[5] ;
  wire img_send_reg_0;
  wire img_vld;
  wire img_vld0;
  wire img_vld_i;
  wire [23:0]img_vld_out_i;
  wire \img_vld_out_reg_n_0_[0] ;
  wire \img_vld_out_reg_n_0_[10] ;
  wire \img_vld_out_reg_n_0_[11] ;
  wire \img_vld_out_reg_n_0_[12] ;
  wire \img_vld_out_reg_n_0_[13] ;
  wire \img_vld_out_reg_n_0_[14] ;
  wire \img_vld_out_reg_n_0_[15] ;
  wire \img_vld_out_reg_n_0_[16] ;
  wire \img_vld_out_reg_n_0_[17] ;
  wire \img_vld_out_reg_n_0_[18] ;
  wire \img_vld_out_reg_n_0_[19] ;
  wire \img_vld_out_reg_n_0_[1] ;
  wire \img_vld_out_reg_n_0_[20] ;
  wire \img_vld_out_reg_n_0_[21] ;
  wire \img_vld_out_reg_n_0_[22] ;
  wire \img_vld_out_reg_n_0_[23] ;
  wire \img_vld_out_reg_n_0_[2] ;
  wire \img_vld_out_reg_n_0_[3] ;
  wire \img_vld_out_reg_n_0_[4] ;
  wire \img_vld_out_reg_n_0_[5] ;
  wire \img_vld_out_reg_n_0_[8] ;
  wire \img_vld_out_reg_n_0_[9] ;
  wire interrupt;
  wire interrupt_INST_0_i_12_n_0;
  wire interrupt_INST_0_i_13_n_0;
  wire interrupt_INST_0_i_1_n_0;
  wire interrupt_INST_0_i_21_n_0;
  wire interrupt_INST_0_i_4_n_0;
  wire interrupt_INST_0_i_5_n_0;
  wire interrupt_INST_0_i_6_n_0;
  wire isr_0;
  wire [0:0]\isr_i_reg[19] ;
  wire [12:0]\isr_i_reg[31] ;
  wire l0_ppiclk_ss1;
  wire l1_ppiclk_ss1;
  wire l2_ppiclk_ss1;
  wire l3_ppiclk_ss1;
  wire [15:0]lp_count_all;
  wire [3:0]lp_count_en;
  wire lp_count_en_c2r_0;
  wire lp_count_en_c2r_1;
  wire lp_count_en_c2r_2;
  wire lp_count_en_c2r_3;
  wire lp_count_pulse_0;
  wire lp_count_pulse_1;
  wire lp_count_pulse_2;
  wire lp_count_pulse_3;
  wire lx_info;
  wire [15:0]lx_info_all;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire p_0_in;
  wire p_0_in10_in;
  wire p_0_in11_in;
  wire p_0_in12_in;
  wire p_0_in13_in;
  wire p_0_in14_in;
  wire p_0_in19_in;
  wire p_0_in9_in;
  wire [4:0]p_0_in_0;
  wire [15:0]p_0_in__0;
  wire [15:0]p_0_in__1;
  wire [15:0]p_0_in__2;
  wire [15:0]p_0_in__3;
  wire [1:0]p_11_in;
  wire p_19_in;
  wire p_20_in;
  wire pkt_dis_done;
  wire pktnppi_fifo_rst0;
  wire pktnppi_fifo_rst_ack;
  wire pktnppi_fifo_rst_ack_i;
  wire pktnppi_fifo_rst_ack_i_reg_0;
  wire ppi_dis_done_i_2_n_0;
  wire \prot_config[1]_i_1_n_0 ;
  wire rd_req;
  wire rd_req_i_1_n_0;
  wire reset_released;
  wire rstn_i;
  wire s_axi_aclk;
  wire [4:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [4:0]s_axi_awaddr;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_bvalid;
  wire s_axi_bvalid_i_2_n_0;
  wire [31:0]s_axi_rdata;
  wire \s_axi_rdata[0]_i_2_n_0 ;
  wire \s_axi_rdata[0]_i_4_n_0 ;
  wire \s_axi_rdata[0]_i_5_n_0 ;
  wire \s_axi_rdata[0]_i_6_n_0 ;
  wire \s_axi_rdata[0]_i_7_n_0 ;
  wire \s_axi_rdata[0]_i_9_n_0 ;
  wire \s_axi_rdata[10]_i_3_n_0 ;
  wire \s_axi_rdata[10]_i_4_n_0 ;
  wire \s_axi_rdata[11]_i_3_n_0 ;
  wire \s_axi_rdata[11]_i_4_n_0 ;
  wire \s_axi_rdata[12]_i_3_n_0 ;
  wire \s_axi_rdata[12]_i_4_n_0 ;
  wire \s_axi_rdata[13]_i_3_n_0 ;
  wire \s_axi_rdata[13]_i_4_n_0 ;
  wire \s_axi_rdata[13]_i_5_n_0 ;
  wire \s_axi_rdata[13]_i_6_n_0 ;
  wire \s_axi_rdata[14]_i_3_n_0 ;
  wire \s_axi_rdata[14]_i_4_n_0 ;
  wire \s_axi_rdata[15]_i_3_n_0 ;
  wire \s_axi_rdata[15]_i_4_n_0 ;
  wire \s_axi_rdata[16]_i_2_n_0 ;
  wire \s_axi_rdata[16]_i_4_n_0 ;
  wire \s_axi_rdata[17]_i_2_n_0 ;
  wire \s_axi_rdata[17]_i_4_n_0 ;
  wire \s_axi_rdata[18]_i_2_n_0 ;
  wire \s_axi_rdata[18]_i_4_n_0 ;
  wire \s_axi_rdata[1]_i_2_n_0 ;
  wire \s_axi_rdata[1]_i_4_n_0 ;
  wire \s_axi_rdata[1]_i_5_n_0 ;
  wire \s_axi_rdata[1]_i_6_n_0 ;
  wire \s_axi_rdata[1]_i_7_n_0 ;
  wire \s_axi_rdata[1]_i_9_n_0 ;
  wire \s_axi_rdata[20]_i_2_n_0 ;
  wire \s_axi_rdata[20]_i_4_n_0 ;
  wire \s_axi_rdata[21]_i_2_n_0 ;
  wire \s_axi_rdata[22]_i_2_n_0 ;
  wire \s_axi_rdata[22]_i_4_n_0 ;
  wire \s_axi_rdata[23]_i_10_n_0 ;
  wire \s_axi_rdata[23]_i_11_n_0 ;
  wire \s_axi_rdata[23]_i_12_n_0 ;
  wire \s_axi_rdata[23]_i_13_n_0 ;
  wire \s_axi_rdata[23]_i_14_n_0 ;
  wire \s_axi_rdata[23]_i_15_n_0 ;
  wire \s_axi_rdata[23]_i_16_n_0 ;
  wire \s_axi_rdata[23]_i_17_n_0 ;
  wire \s_axi_rdata[23]_i_18_n_0 ;
  wire \s_axi_rdata[23]_i_19_n_0 ;
  wire \s_axi_rdata[23]_i_20_n_0 ;
  wire \s_axi_rdata[23]_i_21_n_0 ;
  wire \s_axi_rdata[23]_i_22_n_0 ;
  wire \s_axi_rdata[23]_i_23_n_0 ;
  wire \s_axi_rdata[23]_i_24_n_0 ;
  wire \s_axi_rdata[23]_i_25_n_0 ;
  wire \s_axi_rdata[23]_i_26_n_0 ;
  wire \s_axi_rdata[23]_i_27_n_0 ;
  wire \s_axi_rdata[23]_i_2_n_0 ;
  wire \s_axi_rdata[23]_i_5_n_0 ;
  wire \s_axi_rdata[23]_i_6_n_0 ;
  wire \s_axi_rdata[23]_i_7_n_0 ;
  wire \s_axi_rdata[23]_i_8_n_0 ;
  wire \s_axi_rdata[23]_i_9_n_0 ;
  wire \s_axi_rdata[24]_i_1_n_0 ;
  wire \s_axi_rdata[24]_i_2_n_0 ;
  wire \s_axi_rdata[25]_i_1_n_0 ;
  wire \s_axi_rdata[25]_i_2_n_0 ;
  wire \s_axi_rdata[26]_i_1_n_0 ;
  wire \s_axi_rdata[26]_i_2_n_0 ;
  wire \s_axi_rdata[27]_i_1_n_0 ;
  wire \s_axi_rdata[27]_i_2_n_0 ;
  wire \s_axi_rdata[28]_i_1_n_0 ;
  wire \s_axi_rdata[28]_i_2_n_0 ;
  wire \s_axi_rdata[29]_i_1_n_0 ;
  wire \s_axi_rdata[29]_i_2_n_0 ;
  wire \s_axi_rdata[2]_i_2_n_0 ;
  wire \s_axi_rdata[2]_i_4_n_0 ;
  wire \s_axi_rdata[2]_i_5_n_0 ;
  wire \s_axi_rdata[2]_i_6_n_0 ;
  wire \s_axi_rdata[2]_i_8_n_0 ;
  wire \s_axi_rdata[30]_i_1_n_0 ;
  wire \s_axi_rdata[30]_i_2_n_0 ;
  wire \s_axi_rdata[30]_i_3_n_0 ;
  wire \s_axi_rdata[30]_i_4_n_0 ;
  wire \s_axi_rdata[30]_i_5_n_0 ;
  wire \s_axi_rdata[30]_i_6_n_0 ;
  wire \s_axi_rdata[31]_i_10_n_0 ;
  wire \s_axi_rdata[31]_i_11_n_0 ;
  wire \s_axi_rdata[31]_i_12_n_0 ;
  wire \s_axi_rdata[31]_i_13_n_0 ;
  wire \s_axi_rdata[31]_i_14_n_0 ;
  wire \s_axi_rdata[31]_i_15_n_0 ;
  wire \s_axi_rdata[31]_i_16_n_0 ;
  wire \s_axi_rdata[31]_i_17_n_0 ;
  wire \s_axi_rdata[31]_i_18_n_0 ;
  wire \s_axi_rdata[31]_i_19_n_0 ;
  wire \s_axi_rdata[31]_i_1_n_0 ;
  wire \s_axi_rdata[31]_i_20_n_0 ;
  wire \s_axi_rdata[31]_i_21_n_0 ;
  wire \s_axi_rdata[31]_i_22_n_0 ;
  wire \s_axi_rdata[31]_i_23_n_0 ;
  wire \s_axi_rdata[31]_i_24_n_0 ;
  wire \s_axi_rdata[31]_i_25_n_0 ;
  wire \s_axi_rdata[31]_i_26_n_0 ;
  wire \s_axi_rdata[31]_i_27_n_0 ;
  wire \s_axi_rdata[31]_i_28_n_0 ;
  wire \s_axi_rdata[31]_i_29_n_0 ;
  wire \s_axi_rdata[31]_i_2_n_0 ;
  wire \s_axi_rdata[31]_i_30_n_0 ;
  wire \s_axi_rdata[31]_i_31_n_0 ;
  wire \s_axi_rdata[31]_i_32_n_0 ;
  wire \s_axi_rdata[31]_i_33_n_0 ;
  wire \s_axi_rdata[31]_i_34_n_0 ;
  wire \s_axi_rdata[31]_i_3_n_0 ;
  wire \s_axi_rdata[31]_i_4_n_0 ;
  wire \s_axi_rdata[31]_i_5_n_0 ;
  wire \s_axi_rdata[31]_i_6_n_0 ;
  wire \s_axi_rdata[31]_i_7_n_0 ;
  wire \s_axi_rdata[31]_i_9_n_0 ;
  wire \s_axi_rdata[3]_i_2_n_0 ;
  wire \s_axi_rdata[3]_i_4_n_0 ;
  wire \s_axi_rdata[3]_i_5_n_0 ;
  wire \s_axi_rdata[3]_i_6_n_0 ;
  wire \s_axi_rdata[3]_i_9_n_0 ;
  wire \s_axi_rdata[4]_i_3_n_0 ;
  wire \s_axi_rdata[4]_i_4_n_0 ;
  wire \s_axi_rdata[4]_i_5_n_0 ;
  wire \s_axi_rdata[4]_i_7_n_0 ;
  wire \s_axi_rdata[5]_i_3_n_0 ;
  wire \s_axi_rdata[5]_i_4_n_0 ;
  wire \s_axi_rdata[5]_i_5_n_0 ;
  wire \s_axi_rdata[5]_i_7_n_0 ;
  wire \s_axi_rdata[5]_i_8_n_0 ;
  wire \s_axi_rdata[5]_i_9_n_0 ;
  wire \s_axi_rdata[6]_i_3_n_0 ;
  wire \s_axi_rdata[6]_i_4_n_0 ;
  wire \s_axi_rdata[7]_i_3_n_0 ;
  wire \s_axi_rdata[7]_i_4_n_0 ;
  wire \s_axi_rdata[8]_i_3_n_0 ;
  wire \s_axi_rdata[8]_i_4_n_0 ;
  wire \s_axi_rdata[9]_i_3_n_0 ;
  wire \s_axi_rdata[9]_i_4_n_0 ;
  wire \s_axi_rdata_reg[23]_i_3_n_0 ;
  wire \s_axi_rdata_reg[23]_i_3_n_1 ;
  wire \s_axi_rdata_reg[23]_i_3_n_2 ;
  wire \s_axi_rdata_reg[23]_i_3_n_3 ;
  wire \s_axi_rdata_reg[23]_i_3_n_5 ;
  wire \s_axi_rdata_reg[23]_i_3_n_6 ;
  wire \s_axi_rdata_reg[23]_i_3_n_7 ;
  wire [2:0]\s_axi_rdata_reg[31]_0 ;
  wire \s_axi_rdata_reg[31]_i_8_n_1 ;
  wire \s_axi_rdata_reg[31]_i_8_n_2 ;
  wire \s_axi_rdata_reg[31]_i_8_n_3 ;
  wire \s_axi_rdata_reg[31]_i_8_n_5 ;
  wire \s_axi_rdata_reg[31]_i_8_n_6 ;
  wire \s_axi_rdata_reg[31]_i_8_n_7 ;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire s_axi_rvalid_i_1_n_0;
  wire [23:0]s_axi_wdata;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire [4:0]sel0;
  (* DONT_TOUCH *) wire [3:0]shutdown_i;
  wire soft_rst_d1;
  wire spkt_fifo_dis_done;
  wire spkt_fifo_dis_done_i_1_n_0;
  wire spkt_fifo_dis_done_reg_n_0;
  wire spkt_fifo_rst_ack;
  wire spkt_fifo_rst_r2c;
  wire src_ff_reg;
  wire [21:0]src_in;
  wire src_rcv;
  wire src_send;
  wire [1:0]\syncstages_ff_reg[0] ;
  wire [1:0]\syncstages_ff_reg[0]_0 ;
  wire [1:0]\syncstages_ff_reg[1] ;
  wire [1:0]vc_num;
  wire wr2_isr;
  wire \wr_addr[2]_i_1_n_0 ;
  wire \wr_addr[3]_i_1_n_0 ;
  wire \wr_addr[4]_i_1_n_0 ;
  wire \wr_addr[5]_i_1_n_0 ;
  wire \wr_addr[6]_i_1_n_0 ;
  wire \wr_addr[6]_i_2_n_0 ;
  wire wr_en;
  wire wr_req;
  wire wr_req016_out;
  wire xpm_array_single_02_n_0;
  wire xpm_array_single_02_n_1;
  wire [7:3]\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_DI_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_O_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_DI_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_O_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_DI_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_O_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_CO_UNCONNECTED ;
  wire [7:3]\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_CO_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_DI_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_O_UNCONNECTED ;
  wire [7:7]\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_s_axi_rdata_reg[23]_i_3_CO_UNCONNECTED ;
  wire [7:3]\NLW_s_axi_rdata_reg[31]_i_8_CO_UNCONNECTED ;
  wire [21:0]NLW_xpm_array_single_01_dest_out_UNCONNECTED;
  wire NLW_xpm_single_01_dest_out_UNCONNECTED;
  wire NLW_xpm_single_05_dest_out_UNCONNECTED;

  assign cl_enable = cl_enable_i;
  assign out[3:0] = shutdown_i;
  LUT1 #(
    .INIT(2'h1)) 
    \FSM_sequential_cur_state[2]_i_1 
       (.I0(rstn_i),
        .O(\FSM_sequential_cur_state_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[0].lp_data[0]_i_3 
       (.I0(dest_out),
        .I1(m_axis_aresetn),
        .O(\ERR_FRAME_SYNC[3].fe_hunt_reg[3] ));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[0].lp_count[0][0]_i_1 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .O(p_0_in__2[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[0].lp_count[0][15]_i_1 
       (.I0(lp_count_en_c2r_0),
        .I1(reset_released),
        .O(lp_count_pulse_0));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[0]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[10]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[11]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[12]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[13]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[14]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[15]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[0].lp_count_reg[0][15]_i_2 
       (.CI(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_CO_UNCONNECTED [7:6],\LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_3 ,\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_CO_UNCONNECTED [3],\LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_n_7 }),
        .DI({\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_DI_UNCONNECTED [7],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_O_UNCONNECTED [7],p_0_in__2[15:9]}),
        .S({\NLW_LP_CNT_C2R[0].lp_count_reg[0][15]_i_2_S_UNCONNECTED [7],\LP_CNT_C2R[0].lp_count_reg[0]_7 [15:9]}));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[1]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[2]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[3]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[4]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[5]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[6]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[7]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[8]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1 
       (.CI(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .CI_TOP(1'b0),
        .CO({\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_1 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_3 ,\NLW_LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_0_in__2[8:1]),
        .S(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8:1]));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(p_0_in__2[9]),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_7 [9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__2 \LP_CNT_C2R[0].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_0),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[0]),
        .src_rst(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[1].lp_count[1][0]_i_1 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .O(p_0_in__1[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[1].lp_count[1][15]_i_1 
       (.I0(lp_count_en_c2r_1),
        .I1(reset_released),
        .O(lp_count_pulse_1));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[0]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[10]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[11]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[12]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[13]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[14]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[15]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[1].lp_count_reg[1][15]_i_2 
       (.CI(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_CO_UNCONNECTED [7:6],\LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_3 ,\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_CO_UNCONNECTED [3],\LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_n_7 }),
        .DI({\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_DI_UNCONNECTED [7],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_O_UNCONNECTED [7],p_0_in__1[15:9]}),
        .S({\NLW_LP_CNT_C2R[1].lp_count_reg[1][15]_i_2_S_UNCONNECTED [7],\LP_CNT_C2R[1].lp_count_reg[1]_6 [15:9]}));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[1]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[2]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[3]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[4]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[5]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[6]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[7]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[8]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1 
       (.CI(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .CI_TOP(1'b0),
        .CO({\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_1 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_3 ,\NLW_LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_0_in__1[8:1]),
        .S(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8:1]));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(p_0_in__1[9]),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_6 [9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__3 \LP_CNT_C2R[1].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_1),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[1]),
        .src_rst(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[2].lp_count[2][0]_i_1 
       (.I0(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .O(p_0_in__0[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[2].lp_count[2][15]_i_1 
       (.I0(lp_count_en_c2r_2),
        .I1(reset_released),
        .O(lp_count_pulse_2));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[0]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[10]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[11]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[12]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[13]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[14]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[15]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[2].lp_count_reg[2][15]_i_2 
       (.CI(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_CO_UNCONNECTED [7:6],\LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_3 ,\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_CO_UNCONNECTED [3],\LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_n_7 }),
        .DI({\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_DI_UNCONNECTED [7],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_O_UNCONNECTED [7],p_0_in__0[15:9]}),
        .S({\NLW_LP_CNT_C2R[2].lp_count_reg[2][15]_i_2_S_UNCONNECTED [7],\LP_CNT_C2R[2].lp_count_reg[2]_5 [15:9]}));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[1]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[2]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[3]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[4]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[5]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[6]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[7]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[8]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1 
       (.CI(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .CI_TOP(1'b0),
        .CO({\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_1 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_3 ,\NLW_LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_0_in__0[8:1]),
        .S(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8:1]));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(p_0_in__0[9]),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_5 [9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_pulse__xdcDup__4 \LP_CNT_C2R[2].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_2),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[2]),
        .src_rst(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[3].lp_count[3][0]_i_1 
       (.I0(\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]),
        .O(p_0_in__3[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[3].lp_count[3][15]_i_1 
       (.I0(lp_count_en_c2r_3),
        .I1(reset_released),
        .O(lp_count_pulse_3));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[0]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[10]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[11]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[12]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[13]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[14]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[15]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[3].lp_count_reg[3][15]_i_2 
       (.CI(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_CO_UNCONNECTED [7:6],\LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_3 ,\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_CO_UNCONNECTED [3],\LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_n_7 }),
        .DI({\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_DI_UNCONNECTED [7],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_O_UNCONNECTED [7],p_0_in__3[15:9]}),
        .S({\NLW_LP_CNT_C2R[3].lp_count_reg[3][15]_i_2_S_UNCONNECTED [7],\LP_CNT_C2R[3].lp_count_reg[3]_8 [15:9]}));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[1]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[2]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[3]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[4]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[5]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[6]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[7]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[8]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  CARRY8 \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1 
       (.CI(\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]),
        .CI_TOP(1'b0),
        .CO({\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_1 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_3 ,\NLW_LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_0_in__3[8:1]),
        .S(\LP_CNT_C2R[3].lp_count_reg[3]_8 [8:1]));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(p_0_in__3[9]),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_8 [9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_pulse \LP_CNT_C2R[3].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_3),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[3]),
        .src_rst(SR));
  LUT5 #(
    .INIT(32'hBBBBFBBB)) 
    \LX_INFO_GEN[0].lx_info[0][5]_i_1 
       (.I0(Q),
        .I1(s_axi_aresetn),
        .I2(\core_config[1]_i_2_n_0 ),
        .I3(p_0_in_0[0]),
        .I4(p_0_in_0[3]),
        .O(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[0]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[1]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[2]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[3]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [5]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[4]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[5]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[6]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[7]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [5]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[2].lx_info_reg[2][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[8]),
        .Q(\LX_INFO_GEN[2].lx_info_reg[2]_3 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[2].lx_info_reg[2][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[9]),
        .Q(\LX_INFO_GEN[2].lx_info_reg[2]_3 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[2].lx_info_reg[2][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[10]),
        .Q(\LX_INFO_GEN[2].lx_info_reg[2]_3 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[2].lx_info_reg[2][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[11]),
        .Q(\LX_INFO_GEN[2].lx_info_reg[2]_3 [5]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[3].lx_info_reg[3][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[12]),
        .Q(\LX_INFO_GEN[3].lx_info_reg[3]_4 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[3].lx_info_reg[3][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[13]),
        .Q(\LX_INFO_GEN[3].lx_info_reg[3]_4 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[3].lx_info_reg[3][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[14]),
        .Q(\LX_INFO_GEN[3].lx_info_reg[3]_4 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[3].lx_info_reg[3][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[15]),
        .Q(\LX_INFO_GEN[3].lx_info_reg[3]_4 [5]),
        .R(lx_info));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.cl_enable_i_reg 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(cl_enable_i),
        .S(SS));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \SD_INV_1.shutdown_i[3]_i_1 
       (.I0(\core_config_reg_n_0_[0] ),
        .I1(pkt_dis_done),
        .O(\SD_INV_1.shutdown_i[3]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[0]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[1]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[2]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[3]),
        .S(SS));
  LUT6 #(
    .INIT(64'h80008080C0C0CCCC)) 
    \active_lanes[1]_i_1 
       (.I0(l2_ppiclk_ss1),
        .I1(l0_ppiclk_ss1),
        .I2(l1_ppiclk_ss1),
        .I3(l3_ppiclk_ss1),
        .I4(\syncstages_ff_reg[0]_0 [0]),
        .I5(\syncstages_ff_reg[0]_0 [1]),
        .O(\active_lanes[1]_i_1_n_0 ));
  FDPE \active_lanes_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(\active_lanes[1]_i_1_n_0 ),
        .D(active_lanes_r2p[0]),
        .PRE(\arststages_ff_reg[1] ),
        .Q(\syncstages_ff_reg[0]_0 [0]));
  FDPE \active_lanes_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(\active_lanes[1]_i_1_n_0 ),
        .D(active_lanes_r2p[1]),
        .PRE(\arststages_ff_reg[1] ),
        .Q(\syncstages_ff_reg[0]_0 [1]));
  FDRE \cl_info_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(cl_info[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \cl_info_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(cl_info[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  LUT3 #(
    .INIT(8'h10)) 
    \core_config[1]_i_1 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(\core_config[1]_i_2_n_0 ),
        .O(\core_config[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \core_config[1]_i_2 
       (.I0(s_axi_bvalid),
        .I1(s_axi_wvalid),
        .I2(wr_req),
        .I3(p_0_in_0[4]),
        .I4(p_0_in_0[2]),
        .I5(p_0_in_0[1]),
        .O(\core_config[1]_i_2_n_0 ));
  FDSE \core_config_reg[0] 
       (.C(s_axi_aclk),
        .CE(\core_config[1]_i_1_n_0 ),
        .D(s_axi_wdata[0]),
        .Q(\core_config_reg_n_0_[0] ),
        .S(SS));
  FDRE \core_config_reg[1] 
       (.C(s_axi_aclk),
        .CE(\core_config[1]_i_1_n_0 ),
        .D(s_axi_wdata[1]),
        .Q(Q),
        .R(SS));
  FDRE core_en_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\core_config_reg_n_0_[0] ),
        .Q(core_en_d1),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'hE)) 
    data_dis_done_i_1
       (.I0(data_shutdown_c2r),
        .I1(data_dis_done),
        .O(data_dis_done_i_1_n_0));
  FDRE data_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(data_dis_done_i_1_n_0),
        .Q(data_dis_done),
        .R(spkt_fifo_dis_done));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT5 #(
    .INIT(32'hFFFF22F2)) 
    disable_in_progress_d1_i_1
       (.I0(core_en_d1),
        .I1(\core_config_reg_n_0_[0] ),
        .I2(Q),
        .I3(soft_rst_d1),
        .I4(disable_in_progress_d1_i_2_n_0),
        .O(disable_in_progress));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT4 #(
    .INIT(16'h2AAA)) 
    disable_in_progress_d1_i_2
       (.I0(disable_in_progress_d1),
        .I1(data_dis_done),
        .I2(pkt_dis_done),
        .I3(spkt_fifo_dis_done_reg_n_0),
        .O(disable_in_progress_d1_i_2_n_0));
  FDRE disable_in_progress_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(disable_in_progress),
        .Q(disable_in_progress_d1),
        .R(SS));
  bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_gen_spkt_fifo gen_spkt_fifo
       (.D({gen_spkt_fifo_n_3,gen_spkt_fifo_n_4,gen_spkt_fifo_n_5,gen_spkt_fifo_n_6,gen_spkt_fifo_n_7,gen_spkt_fifo_n_8,gen_spkt_fifo_n_9,gen_spkt_fifo_n_10,gen_spkt_fifo_n_11,gen_spkt_fifo_n_12,gen_spkt_fifo_n_13,gen_spkt_fifo_n_14,gen_spkt_fifo_n_15,gen_spkt_fifo_n_16,gen_spkt_fifo_n_17,gen_spkt_fifo_n_18,gen_spkt_fifo_n_19,gen_spkt_fifo_n_20,gen_spkt_fifo_n_21,gen_spkt_fifo_n_22,gen_spkt_fifo_n_23,gen_spkt_fifo_n_24,gen_spkt_fifo_n_25,gen_spkt_fifo_n_26}),
        .E(p_19_in),
        .\LX_INFO_GEN[0].lx_info_reg[0][5] (\s_axi_rdata[5]_i_3_n_0 ),
        .O(lp_count_all[7:0]),
        .Q(Q),
        .\core_config_reg[1] ({\core_config_reg[1]_0 [15:14],\core_config_reg[1]_0 [6:5],\core_config_reg[1]_0 [2]}),
        .\core_config_reg[1]_0 (\s_axi_rdata[23]_i_2_n_0 ),
        .\core_config_reg[1]_1 (\s_axi_rdata[6]_i_4_n_0 ),
        .\core_config_reg[1]_2 (\s_axi_rdata[7]_i_4_n_0 ),
        .\core_config_reg[1]_3 (\s_axi_rdata[8]_i_4_n_0 ),
        .\core_config_reg[1]_4 (\s_axi_rdata[9]_i_4_n_0 ),
        .\core_config_reg[1]_5 (\s_axi_rdata[12]_i_4_n_0 ),
        .\core_config_reg[1]_6 (\s_axi_rdata[13]_i_4_n_0 ),
        .disable_in_progress(disable_in_progress),
        .diwc_corrected(diwc_corrected),
        .\gie_reg[0] (\gie_reg_n_0_[0] ),
        .\ier_reg[11] (interrupt_INST_0_i_4_n_0),
        .\ier_reg[14] (interrupt_INST_0_i_1_n_0),
        .\ier_reg[20] ({\ier_reg_n_0_[20] ,\ier_reg_n_0_[19] ,\ier_reg_n_0_[18] ,\ier_reg_n_0_[6] ,\ier_reg_n_0_[5] ,\ier_reg_n_0_[2] }),
        .\ier_reg[21] (\s_axi_rdata[21]_i_2_n_0 ),
        .\ier_reg[4] (interrupt_INST_0_i_12_n_0),
        .\img_info1_vc0_reg[19] (img_info1_vc0[19]),
        .\img_info1_vc1_reg[12] (\s_axi_rdata[12]_i_3_n_0 ),
        .\img_info1_vc1_reg[13] (\s_axi_rdata[13]_i_3_n_0 ),
        .\img_info1_vc1_reg[19] (img_info1_vc1[19]),
        .\img_info1_vc1_reg[23] (\s_axi_rdata[23]_i_5_n_0 ),
        .\img_info1_vc1_reg[6] (\s_axi_rdata[6]_i_3_n_0 ),
        .\img_info1_vc1_reg[7] (\s_axi_rdata[7]_i_3_n_0 ),
        .\img_info1_vc1_reg[8] (\s_axi_rdata[8]_i_3_n_0 ),
        .\img_info1_vc1_reg[9] (\s_axi_rdata[9]_i_3_n_0 ),
        .\img_info1_vc2_reg[23] (img_info1_vc2[23:0]),
        .\img_info1_vc3_reg[0] (\s_axi_rdata[0]_i_9_n_0 ),
        .\img_info1_vc3_reg[1] (\s_axi_rdata[1]_i_9_n_0 ),
        .\img_info1_vc3_reg[23] (img_info1_vc3[23:2]),
        .\img_info2_vc0_reg[1] (\s_axi_rdata[1]_i_2_n_0 ),
        .\img_info2_vc2_reg[5] ({\img_info2_vc2_reg_n_0_[5] ,\img_info2_vc2_reg_n_0_[4] ,\img_info2_vc2_reg_n_0_[3] ,\img_info2_vc2_reg_n_0_[2] ,\img_info2_vc2_reg_n_0_[1] ,\img_info2_vc2_reg_n_0_[0] }),
        .\img_info2_vc3_reg[5] ({\img_info2_vc3_reg_n_0_[5] ,\img_info2_vc3_reg_n_0_[4] ,\img_info2_vc3_reg_n_0_[3] ,\img_info2_vc3_reg_n_0_[2] }),
        .interrupt(interrupt),
        .\isr_i_reg[19] (\isr_i_reg[19] ),
        .\isr_i_reg[19]_0 (\isr_i_reg[31] [9]),
        .m_axis_aclk(m_axis_aclk),
        .\rd_addr_reg[2] (\s_axi_rdata[4]_i_3_n_0 ),
        .\rd_addr_reg[2]_0 (\s_axi_rdata[4]_i_4_n_0 ),
        .\rd_addr_reg[2]_1 (\s_axi_rdata[4]_i_5_n_0 ),
        .\rd_addr_reg[2]_2 (\s_axi_rdata[5]_i_4_n_0 ),
        .\rd_addr_reg[2]_3 (\s_axi_rdata[5]_i_5_n_0 ),
        .\rd_addr_reg[2]_4 (\s_axi_rdata[13]_i_5_n_0 ),
        .\rd_addr_reg[2]_5 (\s_axi_rdata[13]_i_6_n_0 ),
        .\rd_addr_reg[2]_6 (\s_axi_rdata[31]_i_9_n_0 ),
        .\rd_addr_reg[3] (\s_axi_rdata[17]_i_2_n_0 ),
        .\rd_addr_reg[3]_0 (\s_axi_rdata[16]_i_2_n_0 ),
        .\rd_addr_reg[3]_1 (\s_axi_rdata[15]_i_3_n_0 ),
        .\rd_addr_reg[3]_10 (\s_axi_rdata[22]_i_2_n_0 ),
        .\rd_addr_reg[3]_2 (\s_axi_rdata[14]_i_3_n_0 ),
        .\rd_addr_reg[3]_3 (\s_axi_rdata[10]_i_3_n_0 ),
        .\rd_addr_reg[3]_4 (\s_axi_rdata[11]_i_3_n_0 ),
        .\rd_addr_reg[3]_5 (\s_axi_rdata[0]_i_2_n_0 ),
        .\rd_addr_reg[3]_6 (\s_axi_rdata[2]_i_2_n_0 ),
        .\rd_addr_reg[3]_7 (\s_axi_rdata[3]_i_2_n_0 ),
        .\rd_addr_reg[3]_8 (\s_axi_rdata[18]_i_2_n_0 ),
        .\rd_addr_reg[3]_9 (\s_axi_rdata[20]_i_2_n_0 ),
        .\rd_addr_reg[5] (\s_axi_rdata[0]_i_7_n_0 ),
        .\rd_addr_reg[6] (sel0),
        .rd_req(rd_req),
        .reset_released(reset_released),
        .rstn_i(rstn_i),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_wdata(s_axi_wdata[19]),
        .src_ff_reg(src_ff_reg),
        .\syncstages_ff_reg[1] (\syncstages_ff_reg[1] ),
        .wr2_isr(wr2_isr),
        .wr_en(wr_en),
        .wr_req(wr_req));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    \gie[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[3]),
        .I3(\core_config[1]_i_2_n_0 ),
        .I4(\gie_reg_n_0_[0] ),
        .O(\gie[0]_i_1_n_0 ));
  FDRE \gie_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\gie[0]_i_1_n_0 ),
        .Q(\gie_reg_n_0_[0] ),
        .R(SS));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \ier[31]_i_1 
       (.I0(p_0_in_0[0]),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_20_in),
        .I4(p_0_in_0[4]),
        .I5(p_0_in_0[2]),
        .O(ier));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \ier[31]_i_2 
       (.I0(s_axi_bvalid),
        .I1(s_axi_wvalid),
        .I2(wr_req),
        .O(p_20_in));
  FDRE \ier_reg[0] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[0]),
        .Q(\ier_reg_n_0_[0] ),
        .R(SS));
  FDRE \ier_reg[10] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[10]),
        .Q(\ier_reg_n_0_[10] ),
        .R(SS));
  FDRE \ier_reg[11] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[11]),
        .Q(\ier_reg_n_0_[11] ),
        .R(SS));
  FDRE \ier_reg[12] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[12]),
        .Q(\ier_reg_n_0_[12] ),
        .R(SS));
  FDRE \ier_reg[13] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[13]),
        .Q(\ier_reg_n_0_[13] ),
        .R(SS));
  FDRE \ier_reg[14] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[14]),
        .Q(\ier_reg_n_0_[14] ),
        .R(SS));
  FDRE \ier_reg[15] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[15]),
        .Q(\ier_reg_n_0_[15] ),
        .R(SS));
  FDRE \ier_reg[16] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[16]),
        .Q(\ier_reg_n_0_[16] ),
        .R(SS));
  FDRE \ier_reg[17] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[17]),
        .Q(\ier_reg_n_0_[17] ),
        .R(SS));
  FDRE \ier_reg[18] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[18]),
        .Q(\ier_reg_n_0_[18] ),
        .R(SS));
  FDRE \ier_reg[19] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[19]),
        .Q(\ier_reg_n_0_[19] ),
        .R(SS));
  FDRE \ier_reg[1] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[1]),
        .Q(\ier_reg_n_0_[1] ),
        .R(SS));
  FDRE \ier_reg[20] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[20]),
        .Q(\ier_reg_n_0_[20] ),
        .R(SS));
  FDRE \ier_reg[21] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[21]),
        .Q(\ier_reg_n_0_[21] ),
        .R(SS));
  FDRE \ier_reg[22] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[22]),
        .Q(\s_axi_rdata_reg[31]_0 [1]),
        .R(SS));
  FDRE \ier_reg[2] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[2]),
        .Q(\ier_reg_n_0_[2] ),
        .R(SS));
  FDRE \ier_reg[31] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[23]),
        .Q(\s_axi_rdata_reg[31]_0 [2]),
        .R(SS));
  FDRE \ier_reg[3] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[3]),
        .Q(\ier_reg_n_0_[3] ),
        .R(SS));
  FDRE \ier_reg[4] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[4]),
        .Q(\ier_reg_n_0_[4] ),
        .R(SS));
  FDRE \ier_reg[5] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[5]),
        .Q(\ier_reg_n_0_[5] ),
        .R(SS));
  FDRE \ier_reg[6] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[6]),
        .Q(\ier_reg_n_0_[6] ),
        .R(SS));
  FDRE \ier_reg[7] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[7]),
        .Q(\ier_reg_n_0_[7] ),
        .R(SS));
  FDRE \ier_reg[8] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[8]),
        .Q(\ier_reg_n_0_[8] ),
        .R(SS));
  FDRE \ier_reg[9] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[9]),
        .Q(\s_axi_rdata_reg[31]_0 [0]),
        .R(SS));
  LUT3 #(
    .INIT(8'h02)) 
    \img_info1_vc0[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc0[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h1F)) 
    \img_info1_vc0[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc0[31]_i_1_n_0 ));
  FDRE \img_info1_vc0_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc0[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc0[10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc0[11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc0[12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc0[13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc0[14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc0[15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .Q(img_info1_vc0[16]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .Q(img_info1_vc0[17]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [2]),
        .Q(img_info1_vc0[18]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [3]),
        .Q(img_info1_vc0[19]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc0[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [4]),
        .Q(img_info1_vc0[20]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [5]),
        .Q(img_info1_vc0[21]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [6]),
        .Q(img_info1_vc0[22]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [7]),
        .Q(img_info1_vc0[23]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8]),
        .Q(img_info1_vc0[24]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [9]),
        .Q(img_info1_vc0[25]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [10]),
        .Q(img_info1_vc0[26]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [11]),
        .Q(img_info1_vc0[27]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [12]),
        .Q(img_info1_vc0[28]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [13]),
        .Q(img_info1_vc0[29]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc0[2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [14]),
        .Q(img_info1_vc0[30]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_7 [15]),
        .Q(img_info1_vc0[31]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc0[3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc0[4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc0[5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc0[6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc0[7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc0[8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc0_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc0[9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \img_info1_vc1[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc1[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \img_info1_vc1[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc1[31]_i_1_n_0 ));
  FDRE \img_info1_vc1_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc1[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc1[10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc1[11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc1[12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc1[13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc1[14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc1[15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .Q(img_info1_vc1[16]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .Q(img_info1_vc1[17]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [2]),
        .Q(img_info1_vc1[18]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [3]),
        .Q(img_info1_vc1[19]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc1[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [4]),
        .Q(img_info1_vc1[20]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [5]),
        .Q(img_info1_vc1[21]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [6]),
        .Q(img_info1_vc1[22]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [7]),
        .Q(img_info1_vc1[23]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8]),
        .Q(img_info1_vc1[24]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [9]),
        .Q(img_info1_vc1[25]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [10]),
        .Q(img_info1_vc1[26]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [11]),
        .Q(img_info1_vc1[27]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [12]),
        .Q(img_info1_vc1[28]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [13]),
        .Q(img_info1_vc1[29]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc1[2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [14]),
        .Q(img_info1_vc1[30]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_6 [15]),
        .Q(img_info1_vc1[31]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc1[3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc1[4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc1[5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc1[6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc1[7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc1[8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc1_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc1[9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \img_info1_vc2[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[0]),
        .I2(vc_num[1]),
        .O(\img_info1_vc2[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \img_info1_vc2[31]_i_1 
       (.I0(vc_num[0]),
        .I1(vc_num[1]),
        .I2(img_vld),
        .O(\img_info1_vc2[31]_i_1_n_0 ));
  FDRE \img_info1_vc2_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc2[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc2[10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc2[11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc2[12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc2[13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc2[14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc2[15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .Q(img_info1_vc2[16]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .Q(img_info1_vc2[17]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [2]),
        .Q(img_info1_vc2[18]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [3]),
        .Q(img_info1_vc2[19]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc2[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [4]),
        .Q(img_info1_vc2[20]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [5]),
        .Q(img_info1_vc2[21]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [6]),
        .Q(img_info1_vc2[22]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [7]),
        .Q(img_info1_vc2[23]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8]),
        .Q(img_info1_vc2[24]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [9]),
        .Q(img_info1_vc2[25]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [10]),
        .Q(img_info1_vc2[26]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [11]),
        .Q(img_info1_vc2[27]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [12]),
        .Q(img_info1_vc2[28]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [13]),
        .Q(img_info1_vc2[29]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc2[2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [14]),
        .Q(img_info1_vc2[30]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_5 [15]),
        .Q(img_info1_vc2[31]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc2[3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc2[4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc2[5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc2[6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc2[7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc2[8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc2_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc2[9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \img_info1_vc3[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc3[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h8F)) 
    \img_info1_vc3[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc3[31]_i_1_n_0 ));
  FDRE \img_info1_vc3_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc3[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc3[10]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc3[11]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc3[12]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc3[13]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc3[14]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc3[15]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]),
        .Q(img_info1_vc3[16]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [1]),
        .Q(img_info1_vc3[17]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [2]),
        .Q(img_info1_vc3[18]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [3]),
        .Q(img_info1_vc3[19]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc3[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [4]),
        .Q(img_info1_vc3[20]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [5]),
        .Q(img_info1_vc3[21]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [6]),
        .Q(img_info1_vc3[22]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [7]),
        .Q(img_info1_vc3[23]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [8]),
        .Q(img_info1_vc3[24]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [9]),
        .Q(img_info1_vc3[25]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [10]),
        .Q(img_info1_vc3[26]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [11]),
        .Q(img_info1_vc3[27]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [12]),
        .Q(img_info1_vc3[28]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [13]),
        .Q(img_info1_vc3[29]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc3[2]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [14]),
        .Q(img_info1_vc3[30]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_8 [15]),
        .Q(img_info1_vc3[31]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc3[3]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc3[4]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc3[5]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc3[6]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc3[7]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc3[8]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info1_vc3_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc3[9]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc0_reg_n_0_[0] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc0_reg_n_0_[1] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc0_reg_n_0_[2] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc0_reg_n_0_[3] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc0_reg_n_0_[4] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc0_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc0_reg_n_0_[5] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc1_reg_n_0_[0] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc1_reg_n_0_[1] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc1_reg_n_0_[2] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc1_reg_n_0_[3] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc1_reg_n_0_[4] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc1_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc1_reg_n_0_[5] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc2_reg_n_0_[0] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc2_reg_n_0_[1] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc2_reg_n_0_[2] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc2_reg_n_0_[3] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc2_reg_n_0_[4] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc2_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc2_reg_n_0_[5] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc3_reg_n_0_[0] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc3_reg_n_0_[1] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc3_reg_n_0_[2] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc3_reg_n_0_[3] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc3_reg_n_0_[4] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_info2_vc3_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc3_reg_n_0_[5] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "24" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_handshake__parameterized1 img_info_cdc
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(img_vld_out_i),
        .dest_req(img_vld_i),
        .src_clk(m_axis_aclk),
        .src_in(diwc_corrected),
        .src_rcv(src_rcv),
        .src_send(src_send));
  FDRE img_send_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(img_send_reg_0),
        .Q(src_send),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h40)) 
    img_vld_i_1
       (.I0(Q),
        .I1(s_axi_aresetn),
        .I2(img_vld_i),
        .O(img_vld0));
  FDRE \img_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[0]),
        .Q(\img_vld_out_reg_n_0_[0] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[10] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[10]),
        .Q(\img_vld_out_reg_n_0_[10] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[11] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[11]),
        .Q(\img_vld_out_reg_n_0_[11] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[12] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[12]),
        .Q(\img_vld_out_reg_n_0_[12] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[13] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[13]),
        .Q(\img_vld_out_reg_n_0_[13] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[14] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[14]),
        .Q(\img_vld_out_reg_n_0_[14] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[15] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[15]),
        .Q(\img_vld_out_reg_n_0_[15] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[16] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[16]),
        .Q(\img_vld_out_reg_n_0_[16] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[17] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[17]),
        .Q(\img_vld_out_reg_n_0_[17] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[18] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[18]),
        .Q(\img_vld_out_reg_n_0_[18] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[19] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[19]),
        .Q(\img_vld_out_reg_n_0_[19] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[1]),
        .Q(\img_vld_out_reg_n_0_[1] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[20] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[20]),
        .Q(\img_vld_out_reg_n_0_[20] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[21] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[21]),
        .Q(\img_vld_out_reg_n_0_[21] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[22] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[22]),
        .Q(\img_vld_out_reg_n_0_[22] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[23] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[23]),
        .Q(\img_vld_out_reg_n_0_[23] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[2] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[2]),
        .Q(\img_vld_out_reg_n_0_[2] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[3] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[3]),
        .Q(\img_vld_out_reg_n_0_[3] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[4] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[4]),
        .Q(\img_vld_out_reg_n_0_[4] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[5] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[5]),
        .Q(\img_vld_out_reg_n_0_[5] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[6] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[6]),
        .Q(vc_num[0]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[7] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[7]),
        .Q(vc_num[1]),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[8] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[8]),
        .Q(\img_vld_out_reg_n_0_[8] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE \img_vld_out_reg[9] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[9]),
        .Q(\img_vld_out_reg_n_0_[9] ),
        .R(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  FDRE img_vld_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(img_vld0),
        .Q(img_vld),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFEEEFEEEFEEE)) 
    interrupt_INST_0_i_1
       (.I0(interrupt_INST_0_i_5_n_0),
        .I1(interrupt_INST_0_i_6_n_0),
        .I2(\core_config_reg[1]_0 [10]),
        .I3(\ier_reg_n_0_[14] ),
        .I4(\core_config_reg[1]_0 [13]),
        .I5(\ier_reg_n_0_[17] ),
        .O(interrupt_INST_0_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    interrupt_INST_0_i_12
       (.I0(\core_config_reg[1]_0 [4]),
        .I1(\ier_reg_n_0_[4] ),
        .I2(\core_config_reg[1]_0 [1]),
        .I3(\ier_reg_n_0_[1] ),
        .I4(interrupt_INST_0_i_21_n_0),
        .O(interrupt_INST_0_i_12_n_0));
  LUT6 #(
    .INIT(64'hFFFF222022202220)) 
    interrupt_INST_0_i_13
       (.I0(\ier_reg_n_0_[7] ),
        .I1(Q),
        .I2(p_0_in13_in),
        .I3(\isr_i_reg[31] [3]),
        .I4(\ier_reg_n_0_[8] ),
        .I5(\core_config_reg[1]_0 [7]),
        .O(interrupt_INST_0_i_13_n_0));
  LUT6 #(
    .INIT(64'hFFFF222022202220)) 
    interrupt_INST_0_i_21
       (.I0(\ier_reg_n_0_[0] ),
        .I1(Q),
        .I2(isr_0),
        .I3(\isr_i_reg[31] [0]),
        .I4(\ier_reg_n_0_[3] ),
        .I5(\core_config_reg[1]_0 [3]),
        .O(interrupt_INST_0_i_21_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    interrupt_INST_0_i_4
       (.I0(interrupt_INST_0_i_13_n_0),
        .I1(\ier_reg_n_0_[11] ),
        .I2(\core_config_reg[1]_0 [9]),
        .I3(\ier_reg_n_0_[10] ),
        .I4(\core_config_reg[1]_0 [8]),
        .I5(\ier_reg[9]_0 ),
        .O(interrupt_INST_0_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFF222022202220)) 
    interrupt_INST_0_i_5
       (.I0(\ier_reg_n_0_[12] ),
        .I1(Q),
        .I2(p_0_in10_in),
        .I3(\isr_i_reg[31] [6]),
        .I4(\ier_reg_n_0_[15] ),
        .I5(\core_config_reg[1]_0 [11]),
        .O(interrupt_INST_0_i_5_n_0));
  LUT6 #(
    .INIT(64'hFFFF222022202220)) 
    interrupt_INST_0_i_6
       (.I0(\ier_reg_n_0_[13] ),
        .I1(Q),
        .I2(p_0_in9_in),
        .I3(\isr_i_reg[31] [7]),
        .I4(\ier_reg_n_0_[16] ),
        .I5(\core_config_reg[1]_0 [12]),
        .O(interrupt_INST_0_i_6_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    \isr_i[31]_i_1 
       (.I0(Q),
        .I1(s_axi_aresetn),
        .O(\LP_CNT_C2R[0].lp_count_reg[0][0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \isr_i[31]_i_3 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(\core_config[1]_i_2_n_0 ),
        .O(wr2_isr));
  FDRE pktnppi_fifo_rst_ack_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst_ack_i_reg_0),
        .Q(pktnppi_fifo_rst_ack_i),
        .R(SS));
  FDRE pktnppi_fifo_rst_ack_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst_ack_i),
        .Q(pktnppi_fifo_rst_ack),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT2 #(
    .INIT(4'hB)) 
    pktnppi_fifo_rst_i_1
       (.I0(Q),
        .I1(\core_config_reg_n_0_[0] ),
        .O(pktnppi_fifo_rst0));
  FDRE pktnppi_fifo_rst_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst0),
        .Q(pktnppi_fifo_rst_ack_i_reg_0),
        .R(SS));
  LUT3 #(
    .INIT(8'h2F)) 
    ppi_dis_done_i_1
       (.I0(\core_config_reg_n_0_[0] ),
        .I1(Q),
        .I2(s_axi_aresetn),
        .O(spkt_fifo_dis_done));
  LUT2 #(
    .INIT(4'hE)) 
    ppi_dis_done_i_2
       (.I0(pktnppi_fifo_rst_ack),
        .I1(pkt_dis_done),
        .O(ppi_dis_done_i_2_n_0));
  FDRE ppi_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ppi_dis_done_i_2_n_0),
        .Q(pkt_dis_done),
        .R(spkt_fifo_dis_done));
  LUT3 #(
    .INIT(8'h40)) 
    \prot_config[1]_i_1 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(\core_config[1]_i_2_n_0 ),
        .O(\prot_config[1]_i_1_n_0 ));
  FDSE \prot_config_reg[0] 
       (.C(s_axi_aclk),
        .CE(\prot_config[1]_i_1_n_0 ),
        .D(s_axi_wdata[0]),
        .Q(\syncstages_ff_reg[0] [0]),
        .S(SS));
  FDSE \prot_config_reg[1] 
       (.C(s_axi_aclk),
        .CE(\prot_config[1]_i_1_n_0 ),
        .D(s_axi_wdata[1]),
        .Q(\syncstages_ff_reg[0] [1]),
        .S(SS));
  FDRE \rd_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[0]),
        .Q(sel0[0]),
        .R(SS));
  FDRE \rd_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[1]),
        .Q(sel0[1]),
        .R(SS));
  FDRE \rd_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[2]),
        .Q(sel0[2]),
        .R(SS));
  FDRE \rd_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[3]),
        .Q(sel0[3]),
        .R(SS));
  FDRE \rd_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[4]),
        .Q(sel0[4]),
        .R(SS));
  LUT6 #(
    .INIT(64'h7700770077F07700)) 
    rd_req_i_1
       (.I0(s_axi_rvalid),
        .I1(s_axi_rready),
        .I2(s_axi_arvalid),
        .I3(rd_req),
        .I4(reset_released),
        .I5(wr_req),
        .O(rd_req_i_1_n_0));
  FDRE rd_req_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rd_req_i_1_n_0),
        .Q(rd_req),
        .R(SS));
  FDRE reset_released_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_aresetn),
        .Q(reset_released),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'h04)) 
    s_axi_arready_INST_0
       (.I0(rd_req),
        .I1(reset_released),
        .I2(wr_req),
        .O(s_axi_arready));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    s_axi_awready_INST_0
       (.I0(wr_req),
        .I1(reset_released),
        .I2(s_axi_arvalid),
        .I3(rd_req),
        .O(s_axi_awready));
  LUT1 #(
    .INIT(2'h1)) 
    s_axi_bvalid_i_1
       (.I0(s_axi_aresetn),
        .O(SS));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'h08F8)) 
    s_axi_bvalid_i_2
       (.I0(wr_req),
        .I1(s_axi_wvalid),
        .I2(s_axi_bvalid),
        .I3(s_axi_bready),
        .O(s_axi_bvalid_i_2_n_0));
  FDRE s_axi_bvalid_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_bvalid_i_2_n_0),
        .Q(s_axi_bvalid),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFFFC840)) 
    \s_axi_rdata[0]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[3]),
        .I2(\s_axi_rdata[0]_i_4_n_0 ),
        .I3(\s_axi_rdata[0]_i_5_n_0 ),
        .I4(\s_axi_rdata[0]_i_6_n_0 ),
        .O(\s_axi_rdata[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCFAFCFA0C0AFC0A0)) 
    \s_axi_rdata[0]_i_4 
       (.I0(\core_config_reg[1]_0 [0]),
        .I1(\img_info2_vc0_reg_n_0_[0] ),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(\gie_reg_n_0_[0] ),
        .I5(img_info1_vc0[0]),
        .O(\s_axi_rdata[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[0]_i_5 
       (.I0(\ier_reg_n_0_[0] ),
        .I1(img_info1_vc1[0]),
        .I2(\img_info2_vc1_reg_n_0_[0] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000B00000008)) 
    \s_axi_rdata[0]_i_6 
       (.I0(p_11_in[0]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .I5(\core_config_reg_n_0_[0] ),
        .O(\s_axi_rdata[0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \s_axi_rdata[0]_i_7 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .O(\s_axi_rdata[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[0]_i_9 
       (.I0(img_info1_vc3[0]),
        .I1(cl_info[0]),
        .I2(\img_info2_vc3_reg_n_0_[0] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[10]_i_3 
       (.I0(\s_axi_rdata[10]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[10] ),
        .I5(\core_config_reg[1]_0 [8]),
        .O(\s_axi_rdata[10]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[10]_i_4 
       (.I0(img_info1_vc1[10]),
        .I1(img_info1_vc0[10]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[11]_i_3 
       (.I0(\s_axi_rdata[11]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[11] ),
        .I5(\core_config_reg[1]_0 [9]),
        .O(\s_axi_rdata[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[11]_i_4 
       (.I0(img_info1_vc1[11]),
        .I1(img_info1_vc0[11]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[11]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[12]_i_3 
       (.I0(img_info1_vc1[12]),
        .I1(img_info1_vc0[12]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[12]_i_4 
       (.I0(Q),
        .I1(p_0_in10_in),
        .I2(\isr_i_reg[31] [6]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[12] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[12]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[13]_i_3 
       (.I0(img_info1_vc1[13]),
        .I1(img_info1_vc0[13]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[13]_i_4 
       (.I0(Q),
        .I1(p_0_in9_in),
        .I2(\isr_i_reg[31] [7]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[13] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[13]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \s_axi_rdata[13]_i_5 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[13]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \s_axi_rdata[13]_i_6 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[13]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[14]_i_3 
       (.I0(\s_axi_rdata[14]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[14] ),
        .I5(\core_config_reg[1]_0 [10]),
        .O(\s_axi_rdata[14]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[14]_i_4 
       (.I0(img_info1_vc1[14]),
        .I1(img_info1_vc0[14]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[15]_i_3 
       (.I0(\s_axi_rdata[15]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[15] ),
        .I5(\core_config_reg[1]_0 [11]),
        .O(\s_axi_rdata[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[15]_i_4 
       (.I0(img_info1_vc1[15]),
        .I1(img_info1_vc0[15]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[16]_i_2 
       (.I0(\s_axi_rdata[16]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[16] ),
        .I5(\core_config_reg[1]_0 [12]),
        .O(\s_axi_rdata[16]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[16]_i_4 
       (.I0(img_info1_vc1[16]),
        .I1(img_info1_vc0[16]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[16]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[17]_i_2 
       (.I0(\s_axi_rdata[17]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[17] ),
        .I5(\core_config_reg[1]_0 [13]),
        .O(\s_axi_rdata[17]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[17]_i_4 
       (.I0(img_info1_vc1[17]),
        .I1(img_info1_vc0[17]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[17]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[18]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[18]),
        .I4(img_info1_vc1[18]),
        .I5(\s_axi_rdata[18]_i_4_n_0 ),
        .O(\s_axi_rdata[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[18]_i_4 
       (.I0(Q),
        .I1(\syncstages_ff_reg[1] [0]),
        .I2(\isr_i_reg[31] [8]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[18] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[18]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFAA80)) 
    \s_axi_rdata[1]_i_2 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(\s_axi_rdata[1]_i_4_n_0 ),
        .I2(\img_info2_vc0_reg_n_0_[1] ),
        .I3(\s_axi_rdata[1]_i_5_n_0 ),
        .I4(\s_axi_rdata[1]_i_6_n_0 ),
        .I5(\s_axi_rdata[1]_i_7_n_0 ),
        .O(\s_axi_rdata[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \s_axi_rdata[1]_i_4 
       (.I0(sel0[4]),
        .I1(sel0[0]),
        .O(\s_axi_rdata[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00005454FF000000)) 
    \s_axi_rdata[1]_i_5 
       (.I0(Q),
        .I1(p_0_in19_in),
        .I2(\isr_i_reg[31] [1]),
        .I3(img_info1_vc0[1]),
        .I4(sel0[4]),
        .I5(sel0[0]),
        .O(\s_axi_rdata[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[1]_i_6 
       (.I0(\s_axi_rdata[5]_i_9_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[1] ),
        .I4(img_info1_vc1[1]),
        .I5(\ier_reg_n_0_[1] ),
        .O(\s_axi_rdata[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000B00000008)) 
    \s_axi_rdata[1]_i_7 
       (.I0(p_11_in[1]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .I5(Q),
        .O(\s_axi_rdata[1]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[1]_i_9 
       (.I0(img_info1_vc3[1]),
        .I1(cl_info[1]),
        .I2(\img_info2_vc3_reg_n_0_[1] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[1]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[20]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[20]),
        .I4(img_info1_vc1[20]),
        .I5(\s_axi_rdata[20]_i_4_n_0 ),
        .O(\s_axi_rdata[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[20]_i_4 
       (.I0(Q),
        .I1(\syncstages_ff_reg[1] [1]),
        .I2(\isr_i_reg[31] [10]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[20] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F000AA00CC0000)) 
    \s_axi_rdata[21]_i_2 
       (.I0(\ier_reg_n_0_[21] ),
        .I1(img_info1_vc0[21]),
        .I2(img_info1_vc1[21]),
        .I3(sel0[0]),
        .I4(sel0[4]),
        .I5(sel0[1]),
        .O(\s_axi_rdata[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[22]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[22]),
        .I4(img_info1_vc1[22]),
        .I5(\s_axi_rdata[22]_i_4_n_0 ),
        .O(\s_axi_rdata[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[22]_i_4 
       (.I0(Q),
        .I1(dest_pulse),
        .I2(\isr_i_reg[31] [11]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\s_axi_rdata_reg[31]_0 [1]),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[22]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[23]_i_10 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [2]),
        .I4(\s_axi_rdata[23]_i_26_n_0 ),
        .O(\s_axi_rdata[23]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hE81717E8)) 
    \s_axi_rdata[23]_i_11 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [2]),
        .I4(\s_axi_rdata[23]_i_26_n_0 ),
        .O(\s_axi_rdata[23]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[23]_i_12 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [1]),
        .O(\s_axi_rdata[23]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[23]_i_13 
       (.I0(\s_axi_rdata[23]_i_6_n_0 ),
        .I1(\s_axi_rdata[23]_i_27_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [7]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [6]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [6]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [6]),
        .O(\s_axi_rdata[23]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[23]_i_14 
       (.I0(\s_axi_rdata[23]_i_7_n_0 ),
        .I1(\s_axi_rdata[23]_i_22_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [6]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [5]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [5]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [5]),
        .O(\s_axi_rdata[23]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[23]_i_15 
       (.I0(\s_axi_rdata[23]_i_8_n_0 ),
        .I1(\s_axi_rdata[23]_i_23_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [5]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [4]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [4]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [4]),
        .O(\s_axi_rdata[23]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[23]_i_16 
       (.I0(\s_axi_rdata[23]_i_9_n_0 ),
        .I1(\s_axi_rdata[23]_i_24_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [4]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [3]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [3]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [3]),
        .O(\s_axi_rdata[23]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[23]_i_17 
       (.I0(\s_axi_rdata[23]_i_10_n_0 ),
        .I1(\s_axi_rdata[23]_i_25_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [3]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [2]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [2]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [2]),
        .O(\s_axi_rdata[23]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h6999999699969666)) 
    \s_axi_rdata[23]_i_18 
       (.I0(\s_axi_rdata[23]_i_26_n_0 ),
        .I1(\LP_CNT_C2R[3].lp_count_reg[3]_8 [2]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [1]),
        .I3(\LP_CNT_C2R[2].lp_count_reg[2]_5 [1]),
        .I4(\LP_CNT_C2R[1].lp_count_reg[1]_6 [1]),
        .I5(\LP_CNT_C2R[3].lp_count_reg[3]_8 [1]),
        .O(\s_axi_rdata[23]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h566A)) 
    \s_axi_rdata[23]_i_19 
       (.I0(\s_axi_rdata[23]_i_12_n_0 ),
        .I1(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .I2(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .O(\s_axi_rdata[23]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \s_axi_rdata[23]_i_2 
       (.I0(Q),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .I5(sel0[2]),
        .O(\s_axi_rdata[23]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[23]_i_20 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [0]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [0]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [0]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]),
        .O(\s_axi_rdata[23]_i_20_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \s_axi_rdata[23]_i_21 
       (.I0(sel0[4]),
        .I1(sel0[0]),
        .O(\s_axi_rdata[23]_i_21_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_22 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [6]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [6]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [6]),
        .O(\s_axi_rdata[23]_i_22_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_23 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [5]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [5]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [5]),
        .O(\s_axi_rdata[23]_i_23_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_24 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [4]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [4]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [4]),
        .O(\s_axi_rdata[23]_i_24_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_25 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [3]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [3]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [3]),
        .O(\s_axi_rdata[23]_i_25_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_26 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [2]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [2]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [2]),
        .O(\s_axi_rdata[23]_i_26_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[23]_i_27 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [7]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [7]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [7]),
        .O(\s_axi_rdata[23]_i_27_n_0 ));
  LUT6 #(
    .INIT(64'h0A000C0000000000)) 
    \s_axi_rdata[23]_i_5 
       (.I0(img_info1_vc1[23]),
        .I1(img_info1_vc0[23]),
        .I2(sel0[2]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .I5(\s_axi_rdata[23]_i_21_n_0 ),
        .O(\s_axi_rdata[23]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[23]_i_6 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [5]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [5]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [5]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [6]),
        .I4(\s_axi_rdata[23]_i_22_n_0 ),
        .O(\s_axi_rdata[23]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[23]_i_7 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [4]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [4]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [4]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [5]),
        .I4(\s_axi_rdata[23]_i_23_n_0 ),
        .O(\s_axi_rdata[23]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[23]_i_8 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [3]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [3]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [3]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [4]),
        .I4(\s_axi_rdata[23]_i_24_n_0 ),
        .O(\s_axi_rdata[23]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[23]_i_9 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [2]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [2]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [2]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [3]),
        .I4(\s_axi_rdata[23]_i_25_n_0 ),
        .O(\s_axi_rdata[23]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[24]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[24]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[24]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[24]_i_2_n_0 ),
        .O(\s_axi_rdata[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[24]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[8]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[24]),
        .I4(img_info1_vc3[24]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[25]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[25]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[25]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[25]_i_2_n_0 ),
        .O(\s_axi_rdata[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[25]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[9]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[25]),
        .I4(img_info1_vc3[25]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[26]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[26]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[26]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[26]_i_2_n_0 ),
        .O(\s_axi_rdata[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[26]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[10]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[26]),
        .I4(img_info1_vc3[26]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[27]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[27]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[27]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[27]_i_2_n_0 ),
        .O(\s_axi_rdata[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[27]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[11]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[27]),
        .I4(img_info1_vc3[27]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[28]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[28]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[28]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[28]_i_2_n_0 ),
        .O(\s_axi_rdata[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[28]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[12]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[28]),
        .I4(img_info1_vc3[28]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[29]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[29]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[29]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[29]_i_2_n_0 ),
        .O(\s_axi_rdata[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[29]_i_2 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[13]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[29]),
        .I4(img_info1_vc3[29]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F7B3C480)) 
    \s_axi_rdata[2]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[3]),
        .I2(\s_axi_rdata[2]_i_4_n_0 ),
        .I3(\s_axi_rdata[2]_i_5_n_0 ),
        .I4(\s_axi_rdata[2]_i_6_n_0 ),
        .I5(sel0[2]),
        .O(\s_axi_rdata[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[2]_i_4 
       (.I0(\ier_reg_n_0_[2] ),
        .I1(img_info1_vc1[2]),
        .I2(\img_info2_vc1_reg_n_0_[2] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[2]_i_5 
       (.I0(img_info1_vc0[2]),
        .I1(\core_config_reg[1]_0 [2]),
        .I2(\img_info2_vc0_reg_n_0_[2] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00E00020)) 
    \s_axi_rdata[2]_i_6 
       (.I0(\LX_INFO_GEN[0].lx_info_reg[0]_1 [2]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(\LX_INFO_GEN[1].lx_info_reg[1]_2 [2]),
        .I5(\s_axi_rdata[2]_i_8_n_0 ),
        .O(\s_axi_rdata[2]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'hA000C000)) 
    \s_axi_rdata[2]_i_8 
       (.I0(\LX_INFO_GEN[3].lx_info_reg[3]_4 [2]),
        .I1(\LX_INFO_GEN[2].lx_info_reg[2]_3 [2]),
        .I2(sel0[1]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[2]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[30]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc0[30]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc1[30]),
        .I4(sel0[2]),
        .I5(\s_axi_rdata[30]_i_4_n_0 ),
        .O(\s_axi_rdata[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \s_axi_rdata[30]_i_2 
       (.I0(sel0[2]),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[30]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \s_axi_rdata[30]_i_3 
       (.I0(sel0[2]),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[30]_i_4 
       (.I0(\s_axi_rdata[31]_i_9_n_0 ),
        .I1(lp_count_all[14]),
        .I2(\s_axi_rdata[30]_i_5_n_0 ),
        .I3(img_info1_vc2[30]),
        .I4(img_info1_vc3[30]),
        .I5(\s_axi_rdata[30]_i_6_n_0 ),
        .O(\s_axi_rdata[30]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \s_axi_rdata[30]_i_5 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .O(\s_axi_rdata[30]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \s_axi_rdata[30]_i_6 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .O(\s_axi_rdata[30]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \s_axi_rdata[31]_i_1 
       (.I0(rd_req),
        .I1(s_axi_aresetn),
        .O(\s_axi_rdata[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[31]_i_10 
       (.I0(Q),
        .I1(p_0_in),
        .I2(\isr_i_reg[31] [12]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\s_axi_rdata_reg[31]_0 [2]),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[31]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_11 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [12]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [12]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [12]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [13]),
        .I4(\s_axi_rdata[31]_i_26_n_0 ),
        .O(\s_axi_rdata[31]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_12 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [11]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [11]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [11]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [12]),
        .I4(\s_axi_rdata[31]_i_27_n_0 ),
        .O(\s_axi_rdata[31]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_13 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [10]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [10]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [10]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [11]),
        .I4(\s_axi_rdata[31]_i_28_n_0 ),
        .O(\s_axi_rdata[31]_i_13_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_14 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [9]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [9]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [9]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [10]),
        .I4(\s_axi_rdata[31]_i_29_n_0 ),
        .O(\s_axi_rdata[31]_i_14_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_15 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [9]),
        .I4(\s_axi_rdata[31]_i_30_n_0 ),
        .O(\s_axi_rdata[31]_i_15_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_16 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [7]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [7]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [7]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [8]),
        .I4(\s_axi_rdata[31]_i_31_n_0 ),
        .O(\s_axi_rdata[31]_i_16_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_17 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [6]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [6]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [6]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [7]),
        .I4(\s_axi_rdata[23]_i_27_n_0 ),
        .O(\s_axi_rdata[31]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'hE187871E871E1E78)) 
    \s_axi_rdata[31]_i_18 
       (.I0(\LP_CNT_C2R[3].lp_count_reg[3]_8 [14]),
        .I1(\s_axi_rdata[31]_i_32_n_0 ),
        .I2(\s_axi_rdata[31]_i_33_n_0 ),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [14]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [14]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [14]),
        .O(\s_axi_rdata[31]_i_18_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_19 
       (.I0(\s_axi_rdata[31]_i_11_n_0 ),
        .I1(\s_axi_rdata[31]_i_34_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [14]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [13]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [13]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [13]),
        .O(\s_axi_rdata[31]_i_19_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \s_axi_rdata[31]_i_2 
       (.I0(s_axi_rvalid),
        .O(\s_axi_rdata[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_20 
       (.I0(\s_axi_rdata[31]_i_12_n_0 ),
        .I1(\s_axi_rdata[31]_i_26_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [13]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [12]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [12]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [12]),
        .O(\s_axi_rdata[31]_i_20_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_21 
       (.I0(\s_axi_rdata[31]_i_13_n_0 ),
        .I1(\s_axi_rdata[31]_i_27_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [12]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [11]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [11]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [11]),
        .O(\s_axi_rdata[31]_i_21_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_22 
       (.I0(\s_axi_rdata[31]_i_14_n_0 ),
        .I1(\s_axi_rdata[31]_i_28_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [11]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [10]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [10]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [10]),
        .O(\s_axi_rdata[31]_i_22_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_23 
       (.I0(\s_axi_rdata[31]_i_15_n_0 ),
        .I1(\s_axi_rdata[31]_i_29_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [10]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [9]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [9]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [9]),
        .O(\s_axi_rdata[31]_i_23_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_24 
       (.I0(\s_axi_rdata[31]_i_16_n_0 ),
        .I1(\s_axi_rdata[31]_i_30_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [9]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8]),
        .O(\s_axi_rdata[31]_i_24_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_25 
       (.I0(\s_axi_rdata[31]_i_17_n_0 ),
        .I1(\s_axi_rdata[31]_i_31_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_8 [8]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_7 [7]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_5 [7]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_6 [7]),
        .O(\s_axi_rdata[31]_i_25_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_26 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [13]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [13]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [13]),
        .O(\s_axi_rdata[31]_i_26_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_27 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [12]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [12]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [12]),
        .O(\s_axi_rdata[31]_i_27_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_28 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [11]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [11]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [11]),
        .O(\s_axi_rdata[31]_i_28_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_29 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [10]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [10]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [10]),
        .O(\s_axi_rdata[31]_i_29_n_0 ));
  LUT6 #(
    .INIT(64'hEAEAAAAAFF000000)) 
    \s_axi_rdata[31]_i_3 
       (.I0(\s_axi_rdata[31]_i_4_n_0 ),
        .I1(img_info1_vc3[31]),
        .I2(\s_axi_rdata[31]_i_5_n_0 ),
        .I3(\s_axi_rdata[31]_i_6_n_0 ),
        .I4(sel0[3]),
        .I5(sel0[2]),
        .O(\s_axi_rdata[31]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_30 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [9]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [9]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [9]),
        .O(\s_axi_rdata[31]_i_30_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_31 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [8]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [8]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [8]),
        .O(\s_axi_rdata[31]_i_31_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    \s_axi_rdata[31]_i_32 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [13]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [13]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [13]),
        .O(\s_axi_rdata[31]_i_32_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[31]_i_33 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_6 [15]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [15]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_7 [15]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_8 [15]),
        .O(\s_axi_rdata[31]_i_33_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_34 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_7 [14]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_5 [14]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_6 [14]),
        .O(\s_axi_rdata[31]_i_34_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \s_axi_rdata[31]_i_4 
       (.I0(img_info1_vc2[31]),
        .I1(\s_axi_rdata[31]_i_7_n_0 ),
        .I2(sel0[3]),
        .I3(lp_count_all[15]),
        .I4(\s_axi_rdata[31]_i_9_n_0 ),
        .O(\s_axi_rdata[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \s_axi_rdata[31]_i_5 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[31]_i_6 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[31]),
        .I4(img_info1_vc1[31]),
        .I5(\s_axi_rdata[31]_i_10_n_0 ),
        .O(\s_axi_rdata[31]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \s_axi_rdata[31]_i_7 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[31]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \s_axi_rdata[31]_i_9 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .I3(sel0[3]),
        .I4(Q),
        .O(\s_axi_rdata[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F7B3C480)) 
    \s_axi_rdata[3]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[3]),
        .I2(\s_axi_rdata[3]_i_4_n_0 ),
        .I3(\s_axi_rdata[3]_i_5_n_0 ),
        .I4(\s_axi_rdata[3]_i_6_n_0 ),
        .I5(sel0[2]),
        .O(\s_axi_rdata[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[3]_i_4 
       (.I0(\ier_reg_n_0_[3] ),
        .I1(img_info1_vc1[3]),
        .I2(\img_info2_vc1_reg_n_0_[3] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[3]_i_5 
       (.I0(img_info1_vc0[3]),
        .I1(\core_config_reg[1]_0 [3]),
        .I2(\img_info2_vc0_reg_n_0_[3] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0804000)) 
    \s_axi_rdata[3]_i_6 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .I3(\LX_INFO_GEN[2].lx_info_reg[2]_3 [3]),
        .I4(\LX_INFO_GEN[3].lx_info_reg[3]_4 [3]),
        .I5(\s_axi_rdata[3]_i_9_n_0 ),
        .O(\s_axi_rdata[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT5 #(
    .INIT(32'h54441404)) 
    \s_axi_rdata[3]_i_9 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\LX_INFO_GEN[0].lx_info_reg[0]_1 [3]),
        .I4(\LX_INFO_GEN[1].lx_info_reg[1]_2 [3]),
        .O(\s_axi_rdata[3]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0804000)) 
    \s_axi_rdata[4]_i_3 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .I3(\LX_INFO_GEN[2].lx_info_reg[2]_3 [4]),
        .I4(\LX_INFO_GEN[3].lx_info_reg[3]_4 [4]),
        .I5(\s_axi_rdata[4]_i_7_n_0 ),
        .O(\s_axi_rdata[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[4]_i_4 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[4] ),
        .I4(\core_config_reg[1]_0 [4]),
        .I5(img_info1_vc0[4]),
        .O(\s_axi_rdata[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[4]_i_5 
       (.I0(\s_axi_rdata[5]_i_9_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[4] ),
        .I4(img_info1_vc1[4]),
        .I5(\ier_reg_n_0_[4] ),
        .O(\s_axi_rdata[4]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h54441404)) 
    \s_axi_rdata[4]_i_7 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\LX_INFO_GEN[0].lx_info_reg[0]_1 [4]),
        .I4(\LX_INFO_GEN[1].lx_info_reg[1]_2 [4]),
        .O(\s_axi_rdata[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00E00020)) 
    \s_axi_rdata[5]_i_3 
       (.I0(\LX_INFO_GEN[0].lx_info_reg[0]_1 [5]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(\LX_INFO_GEN[1].lx_info_reg[1]_2 [5]),
        .I5(\s_axi_rdata[5]_i_7_n_0 ),
        .O(\s_axi_rdata[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[5]_i_4 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[5] ),
        .I4(\core_config_reg[1]_0 [5]),
        .I5(img_info1_vc0[5]),
        .O(\s_axi_rdata[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[5]_i_5 
       (.I0(\s_axi_rdata[5]_i_9_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[5] ),
        .I4(img_info1_vc1[5]),
        .I5(\ier_reg_n_0_[5] ),
        .O(\s_axi_rdata[5]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hA000C000)) 
    \s_axi_rdata[5]_i_7 
       (.I0(\LX_INFO_GEN[3].lx_info_reg[3]_4 [5]),
        .I1(\LX_INFO_GEN[2].lx_info_reg[2]_3 [5]),
        .I2(sel0[1]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[5]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \s_axi_rdata[5]_i_8 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .O(\s_axi_rdata[5]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \s_axi_rdata[5]_i_9 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .O(\s_axi_rdata[5]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[6]_i_3 
       (.I0(img_info1_vc1[6]),
        .I1(img_info1_vc0[6]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[6]_i_4 
       (.I0(Q),
        .I1(p_0_in14_in),
        .I2(\isr_i_reg[31] [2]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[6] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[7]_i_3 
       (.I0(img_info1_vc1[7]),
        .I1(img_info1_vc0[7]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[7]_i_4 
       (.I0(Q),
        .I1(p_0_in13_in),
        .I2(\isr_i_reg[31] [3]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[7] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[8]_i_3 
       (.I0(img_info1_vc1[8]),
        .I1(img_info1_vc0[8]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[8]_i_4 
       (.I0(Q),
        .I1(p_0_in12_in),
        .I2(\isr_i_reg[31] [4]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\ier_reg_n_0_[8] ),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[8]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[9]_i_3 
       (.I0(img_info1_vc1[9]),
        .I1(img_info1_vc0[9]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF540054005400)) 
    \s_axi_rdata[9]_i_4 
       (.I0(Q),
        .I1(p_0_in11_in),
        .I2(\isr_i_reg[31] [5]),
        .I3(\s_axi_rdata[13]_i_5_n_0 ),
        .I4(\s_axi_rdata_reg[31]_0 [0]),
        .I5(\s_axi_rdata[13]_i_6_n_0 ),
        .O(\s_axi_rdata[9]_i_4_n_0 ));
  FDRE \s_axi_rdata_reg[0] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_26),
        .Q(s_axi_rdata[0]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[10] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_16),
        .Q(s_axi_rdata[10]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[11] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_15),
        .Q(s_axi_rdata[11]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[12] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_14),
        .Q(s_axi_rdata[12]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[13] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_13),
        .Q(s_axi_rdata[13]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[14] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_12),
        .Q(s_axi_rdata[14]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[15] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_11),
        .Q(s_axi_rdata[15]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[16] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_10),
        .Q(s_axi_rdata[16]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[17] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_9),
        .Q(s_axi_rdata[17]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[18] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_8),
        .Q(s_axi_rdata[18]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[19] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_7),
        .Q(s_axi_rdata[19]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[1] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_25),
        .Q(s_axi_rdata[1]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[20] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_6),
        .Q(s_axi_rdata[20]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[21] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_5),
        .Q(s_axi_rdata[21]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[22] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_4),
        .Q(s_axi_rdata[22]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[23] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_3),
        .Q(s_axi_rdata[23]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  CARRY8 \s_axi_rdata_reg[23]_i_3 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\s_axi_rdata_reg[23]_i_3_n_0 ,\s_axi_rdata_reg[23]_i_3_n_1 ,\s_axi_rdata_reg[23]_i_3_n_2 ,\s_axi_rdata_reg[23]_i_3_n_3 ,\NLW_s_axi_rdata_reg[23]_i_3_CO_UNCONNECTED [3],\s_axi_rdata_reg[23]_i_3_n_5 ,\s_axi_rdata_reg[23]_i_3_n_6 ,\s_axi_rdata_reg[23]_i_3_n_7 }),
        .DI({\s_axi_rdata[23]_i_6_n_0 ,\s_axi_rdata[23]_i_7_n_0 ,\s_axi_rdata[23]_i_8_n_0 ,\s_axi_rdata[23]_i_9_n_0 ,\s_axi_rdata[23]_i_10_n_0 ,\s_axi_rdata[23]_i_11_n_0 ,\s_axi_rdata[23]_i_12_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3]_8 [0]}),
        .O(lp_count_all[7:0]),
        .S({\s_axi_rdata[23]_i_13_n_0 ,\s_axi_rdata[23]_i_14_n_0 ,\s_axi_rdata[23]_i_15_n_0 ,\s_axi_rdata[23]_i_16_n_0 ,\s_axi_rdata[23]_i_17_n_0 ,\s_axi_rdata[23]_i_18_n_0 ,\s_axi_rdata[23]_i_19_n_0 ,\s_axi_rdata[23]_i_20_n_0 }));
  FDRE \s_axi_rdata_reg[24] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[24]_i_1_n_0 ),
        .Q(s_axi_rdata[24]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[25] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[25]_i_1_n_0 ),
        .Q(s_axi_rdata[25]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[26] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[26]_i_1_n_0 ),
        .Q(s_axi_rdata[26]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[27] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[27]_i_1_n_0 ),
        .Q(s_axi_rdata[27]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[28] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[28]_i_1_n_0 ),
        .Q(s_axi_rdata[28]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[29] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[29]_i_1_n_0 ),
        .Q(s_axi_rdata[29]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[2] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_24),
        .Q(s_axi_rdata[2]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[30] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[30]_i_1_n_0 ),
        .Q(s_axi_rdata[30]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[31] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[31]_i_3_n_0 ),
        .Q(s_axi_rdata[31]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  CARRY8 \s_axi_rdata_reg[31]_i_8 
       (.CI(\s_axi_rdata_reg[23]_i_3_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_s_axi_rdata_reg[31]_i_8_CO_UNCONNECTED [7],\s_axi_rdata_reg[31]_i_8_n_1 ,\s_axi_rdata_reg[31]_i_8_n_2 ,\s_axi_rdata_reg[31]_i_8_n_3 ,\NLW_s_axi_rdata_reg[31]_i_8_CO_UNCONNECTED [3],\s_axi_rdata_reg[31]_i_8_n_5 ,\s_axi_rdata_reg[31]_i_8_n_6 ,\s_axi_rdata_reg[31]_i_8_n_7 }),
        .DI({1'b0,\s_axi_rdata[31]_i_11_n_0 ,\s_axi_rdata[31]_i_12_n_0 ,\s_axi_rdata[31]_i_13_n_0 ,\s_axi_rdata[31]_i_14_n_0 ,\s_axi_rdata[31]_i_15_n_0 ,\s_axi_rdata[31]_i_16_n_0 ,\s_axi_rdata[31]_i_17_n_0 }),
        .O(lp_count_all[15:8]),
        .S({\s_axi_rdata[31]_i_18_n_0 ,\s_axi_rdata[31]_i_19_n_0 ,\s_axi_rdata[31]_i_20_n_0 ,\s_axi_rdata[31]_i_21_n_0 ,\s_axi_rdata[31]_i_22_n_0 ,\s_axi_rdata[31]_i_23_n_0 ,\s_axi_rdata[31]_i_24_n_0 ,\s_axi_rdata[31]_i_25_n_0 }));
  FDRE \s_axi_rdata_reg[3] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_23),
        .Q(s_axi_rdata[3]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[4] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_22),
        .Q(s_axi_rdata[4]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[5] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_21),
        .Q(s_axi_rdata[5]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[6] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_20),
        .Q(s_axi_rdata[6]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[7] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_19),
        .Q(s_axi_rdata[7]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[8] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_18),
        .Q(s_axi_rdata[8]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[9] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_17),
        .Q(s_axi_rdata[9]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0888)) 
    s_axi_rvalid_i_1
       (.I0(s_axi_aresetn),
        .I1(rd_req),
        .I2(s_axi_rvalid),
        .I3(s_axi_rready),
        .O(s_axi_rvalid_i_1_n_0));
  FDRE s_axi_rvalid_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_rvalid_i_1_n_0),
        .Q(s_axi_rvalid),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_wready_INST_0
       (.I0(wr_req),
        .I1(s_axi_bvalid),
        .O(s_axi_wready));
  FDRE soft_rst_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(Q),
        .Q(soft_rst_d1),
        .R(SS));
  LUT2 #(
    .INIT(4'hE)) 
    spkt_fifo_dis_done_i_1
       (.I0(spkt_fifo_rst_ack),
        .I1(spkt_fifo_dis_done_reg_n_0),
        .O(spkt_fifo_dis_done_i_1_n_0));
  FDRE spkt_fifo_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(spkt_fifo_dis_done_i_1_n_0),
        .Q(spkt_fifo_dis_done_reg_n_0),
        .R(spkt_fifo_dis_done));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \wr_addr[2]_i_1 
       (.I0(s_axi_awvalid),
        .I1(wr_req),
        .I2(reset_released),
        .I3(s_axi_arvalid),
        .I4(rd_req),
        .I5(s_axi_awaddr[0]),
        .O(\wr_addr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \wr_addr[3]_i_1 
       (.I0(s_axi_awvalid),
        .I1(wr_req),
        .I2(reset_released),
        .I3(s_axi_arvalid),
        .I4(rd_req),
        .I5(s_axi_awaddr[1]),
        .O(\wr_addr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \wr_addr[4]_i_1 
       (.I0(s_axi_awvalid),
        .I1(wr_req),
        .I2(reset_released),
        .I3(s_axi_arvalid),
        .I4(rd_req),
        .I5(s_axi_awaddr[2]),
        .O(\wr_addr[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \wr_addr[5]_i_1 
       (.I0(s_axi_awvalid),
        .I1(wr_req),
        .I2(reset_released),
        .I3(s_axi_arvalid),
        .I4(rd_req),
        .I5(s_axi_awaddr[3]),
        .O(\wr_addr[5]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF8)) 
    \wr_addr[6]_i_1 
       (.I0(s_axi_bvalid),
        .I1(s_axi_bready),
        .I2(wr_req016_out),
        .O(\wr_addr[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \wr_addr[6]_i_2 
       (.I0(s_axi_awvalid),
        .I1(wr_req),
        .I2(reset_released),
        .I3(s_axi_arvalid),
        .I4(rd_req),
        .I5(s_axi_awaddr[4]),
        .O(\wr_addr[6]_i_2_n_0 ));
  FDRE \wr_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[2]_i_1_n_0 ),
        .Q(p_0_in_0[0]),
        .R(SS));
  FDRE \wr_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[3]_i_1_n_0 ),
        .Q(p_0_in_0[1]),
        .R(SS));
  FDRE \wr_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[4]_i_1_n_0 ),
        .Q(p_0_in_0[2]),
        .R(SS));
  FDRE \wr_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[5]_i_1_n_0 ),
        .Q(p_0_in_0[3]),
        .R(SS));
  FDRE \wr_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[6]_i_2_n_0 ),
        .Q(p_0_in_0[4]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    wr_req_i_1
       (.I0(rd_req),
        .I1(s_axi_arvalid),
        .I2(reset_released),
        .I3(wr_req),
        .I4(s_axi_awvalid),
        .O(wr_req016_out));
  FDRE wr_req_reg
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(wr_req016_out),
        .Q(wr_req),
        .R(SS));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "22" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_array_single__parameterized0 xpm_array_single_01
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_array_single_01_dest_out_UNCONNECTED[21:0]),
        .src_clk(m_axis_aclk),
        .src_in(src_in));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_array_single__parameterized1__xdcDup__1 xpm_array_single_02
       (.dest_clk(m_axis_aclk),
        .dest_out({xpm_array_single_02_n_0,xpm_array_single_02_n_1}),
        .src_clk(s_axi_aclk),
        .src_in({Q,\core_config_reg_n_0_[0] }));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_array_single__parameterized1__xdcDup__2 xpm_array_single_03
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(active_lanes_r2p),
        .src_clk(s_axi_aclk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_array_single__parameterized1 xpm_array_single_04
       (.dest_clk(s_axi_aclk),
        .dest_out(p_11_in),
        .src_clk(dl0_rxbyteclkhs),
        .src_in(\syncstages_ff_reg[0]_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    xpm_arst_03_i_1
       (.I0(dest_out),
        .I1(m_axis_aresetn),
        .O(rstn_i));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__93 xpm_single_01
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_single_01_dest_out_UNCONNECTED),
        .src_clk(m_axis_aclk),
        .src_in(full));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1__25 xpm_single_02
       (.dest_clk(m_axis_aclk),
        .dest_out(dest_out),
        .src_clk(s_axi_aclk),
        .src_in(core_men));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h2)) 
    xpm_single_02_i_1
       (.I0(\core_config_reg_n_0_[0] ),
        .I1(Q),
        .O(core_men));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized1 xpm_single_05
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_single_05_dest_out_UNCONNECTED),
        .src_clk(m_axis_aclk),
        .src_in(src_ff_reg));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__107 xpm_single_07
       (.dest_clk(s_axi_aclk),
        .dest_out(spkt_fifo_rst_ack),
        .src_clk(m_axis_aclk),
        .src_in(spkt_fifo_rst_r2c));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT1 #(
    .INIT(2'h1)) 
    xpm_single_07_i_1
       (.I0(dest_out),
        .O(spkt_fifo_rst_r2c));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__106 xpm_single_08
       (.dest_clk(s_axi_aclk),
        .dest_out(data_shutdown_c2r),
        .src_clk(m_axis_aclk),
        .src_in(data_shutdown));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__98 xpm_single_17
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l0_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl0_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__99 xpm_single_18
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l1_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl1_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__100 xpm_single_19
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l2_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl2_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__101 xpm_single_20
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l3_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl3_stopstate));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_6_stream" *) 
module bd_bf15_rx_0_mipi_csi2_rx_ctrl_v1_0_6_stream
   (m_axis_tvalid,
    rd_en,
    m_axis_tuser,
    m_axis_tlast,
    m_axis_tdata,
    m_axis_tdest,
    m_axis_tkeep,
    m_axis_tready,
    empty,
    m_axis_aresetn,
    SR,
    m_axis_aclk,
    mem_rdata);
  output m_axis_tvalid;
  output rd_en;
  output [55:0]m_axis_tuser;
  output m_axis_tlast;
  output [63:0]m_axis_tdata;
  output [1:0]m_axis_tdest;
  output [7:0]m_axis_tkeep;
  input m_axis_tready;
  input empty;
  input m_axis_aresetn;
  input [0:0]SR;
  input m_axis_aclk;
  input [67:0]mem_rdata;

  wire \LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[0].line_num_reg[0]_3 ;
  wire \LINE_NUM_VC[0].rst_lnum[0]_i_2_n_0 ;
  wire \LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ;
  wire \LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[1].line_num_reg[1]_2 ;
  wire \LINE_NUM_VC[1].rst_lnum[1]_i_2_n_0 ;
  wire \LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ;
  wire \LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[2].line_num_reg[2]_1 ;
  wire \LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ;
  wire \LINE_NUM_VC[2].rst_lnum[2]_i_3_n_0 ;
  wire \LINE_NUM_VC[2].rst_lnum[2]_i_5_n_0 ;
  wire \LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ;
  wire \LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[3].line_num_reg[3]_0 ;
  wire \LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ;
  wire \LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ;
  wire \LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ;
  wire [0:0]SR;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ;
  wire \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_2_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ;
  wire axis_beat_smpld;
  wire axis_last_beat;
  wire \bytes_sent[9]_i_2_n_0 ;
  wire \bytes_sent_reg[15]_i_2_n_3 ;
  wire \bytes_sent_reg[15]_i_2_n_5 ;
  wire \bytes_sent_reg[15]_i_2_n_6 ;
  wire \bytes_sent_reg[15]_i_2_n_7 ;
  wire \bytes_sent_reg[9]_i_1_n_0 ;
  wire \bytes_sent_reg[9]_i_1_n_1 ;
  wire \bytes_sent_reg[9]_i_1_n_2 ;
  wire \bytes_sent_reg[9]_i_1_n_3 ;
  wire \bytes_sent_reg[9]_i_1_n_5 ;
  wire \bytes_sent_reg[9]_i_1_n_6 ;
  wire \bytes_sent_reg[9]_i_1_n_7 ;
  wire [15:2]bytes_sent_reg__0;
  wire [5:0]cur_lp_dtype;
  wire [1:0]cur_lp_vc;
  wire cur_lp_vc0;
  wire cur_lp_wc_lte4;
  wire cur_lp_wc_lte4_i_1_n_0;
  wire cur_lp_wc_lte4_i_3_n_0;
  wire cur_lp_wc_lte4_i_4_n_0;
  wire cur_lp_wc_lte4_i_5_n_0;
  wire \cur_lp_wc_reg_n_0_[0] ;
  wire \cur_lp_wc_reg_n_0_[10] ;
  wire \cur_lp_wc_reg_n_0_[11] ;
  wire \cur_lp_wc_reg_n_0_[12] ;
  wire \cur_lp_wc_reg_n_0_[13] ;
  wire \cur_lp_wc_reg_n_0_[14] ;
  wire \cur_lp_wc_reg_n_0_[15] ;
  wire \cur_lp_wc_reg_n_0_[1] ;
  wire \cur_lp_wc_reg_n_0_[2] ;
  wire \cur_lp_wc_reg_n_0_[3] ;
  wire \cur_lp_wc_reg_n_0_[4] ;
  wire \cur_lp_wc_reg_n_0_[5] ;
  wire \cur_lp_wc_reg_n_0_[6] ;
  wire \cur_lp_wc_reg_n_0_[7] ;
  wire \cur_lp_wc_reg_n_0_[8] ;
  wire \cur_lp_wc_reg_n_0_[9] ;
  wire empty;
  wire frame_num_vc0;
  wire \frame_num_vc0[15]_i_1_n_0 ;
  wire \frame_num_vc0_reg_n_0_[0] ;
  wire \frame_num_vc0_reg_n_0_[10] ;
  wire \frame_num_vc0_reg_n_0_[11] ;
  wire \frame_num_vc0_reg_n_0_[12] ;
  wire \frame_num_vc0_reg_n_0_[13] ;
  wire \frame_num_vc0_reg_n_0_[14] ;
  wire \frame_num_vc0_reg_n_0_[15] ;
  wire \frame_num_vc0_reg_n_0_[1] ;
  wire \frame_num_vc0_reg_n_0_[2] ;
  wire \frame_num_vc0_reg_n_0_[3] ;
  wire \frame_num_vc0_reg_n_0_[4] ;
  wire \frame_num_vc0_reg_n_0_[5] ;
  wire \frame_num_vc0_reg_n_0_[6] ;
  wire \frame_num_vc0_reg_n_0_[7] ;
  wire \frame_num_vc0_reg_n_0_[8] ;
  wire \frame_num_vc0_reg_n_0_[9] ;
  wire frame_num_vc1;
  wire \frame_num_vc1[15]_i_1_n_0 ;
  wire \frame_num_vc1_reg_n_0_[0] ;
  wire \frame_num_vc1_reg_n_0_[10] ;
  wire \frame_num_vc1_reg_n_0_[11] ;
  wire \frame_num_vc1_reg_n_0_[12] ;
  wire \frame_num_vc1_reg_n_0_[13] ;
  wire \frame_num_vc1_reg_n_0_[14] ;
  wire \frame_num_vc1_reg_n_0_[15] ;
  wire \frame_num_vc1_reg_n_0_[1] ;
  wire \frame_num_vc1_reg_n_0_[2] ;
  wire \frame_num_vc1_reg_n_0_[3] ;
  wire \frame_num_vc1_reg_n_0_[4] ;
  wire \frame_num_vc1_reg_n_0_[5] ;
  wire \frame_num_vc1_reg_n_0_[6] ;
  wire \frame_num_vc1_reg_n_0_[7] ;
  wire \frame_num_vc1_reg_n_0_[8] ;
  wire \frame_num_vc1_reg_n_0_[9] ;
  wire frame_num_vc2;
  wire \frame_num_vc2[15]_i_1_n_0 ;
  wire \frame_num_vc2_reg_n_0_[0] ;
  wire \frame_num_vc2_reg_n_0_[10] ;
  wire \frame_num_vc2_reg_n_0_[11] ;
  wire \frame_num_vc2_reg_n_0_[12] ;
  wire \frame_num_vc2_reg_n_0_[13] ;
  wire \frame_num_vc2_reg_n_0_[14] ;
  wire \frame_num_vc2_reg_n_0_[15] ;
  wire \frame_num_vc2_reg_n_0_[1] ;
  wire \frame_num_vc2_reg_n_0_[2] ;
  wire \frame_num_vc2_reg_n_0_[3] ;
  wire \frame_num_vc2_reg_n_0_[4] ;
  wire \frame_num_vc2_reg_n_0_[5] ;
  wire \frame_num_vc2_reg_n_0_[6] ;
  wire \frame_num_vc2_reg_n_0_[7] ;
  wire \frame_num_vc2_reg_n_0_[8] ;
  wire \frame_num_vc2_reg_n_0_[9] ;
  wire frame_num_vc3;
  wire \frame_num_vc3[15]_i_1_n_0 ;
  wire \frame_num_vc3[15]_i_3_n_0 ;
  wire \frame_num_vc3_reg_n_0_[0] ;
  wire \frame_num_vc3_reg_n_0_[10] ;
  wire \frame_num_vc3_reg_n_0_[11] ;
  wire \frame_num_vc3_reg_n_0_[12] ;
  wire \frame_num_vc3_reg_n_0_[13] ;
  wire \frame_num_vc3_reg_n_0_[14] ;
  wire \frame_num_vc3_reg_n_0_[15] ;
  wire \frame_num_vc3_reg_n_0_[1] ;
  wire \frame_num_vc3_reg_n_0_[2] ;
  wire \frame_num_vc3_reg_n_0_[3] ;
  wire \frame_num_vc3_reg_n_0_[4] ;
  wire \frame_num_vc3_reg_n_0_[5] ;
  wire \frame_num_vc3_reg_n_0_[6] ;
  wire \frame_num_vc3_reg_n_0_[7] ;
  wire \frame_num_vc3_reg_n_0_[8] ;
  wire \frame_num_vc3_reg_n_0_[9] ;
  wire fs_opcode;
  wire fsync_vc0_int_reg;
  wire fsync_vc0_int_reg_i_1_n_0;
  wire fsync_vc0_rst_reg;
  wire fsync_vc0_rst_reg0;
  wire fsync_vc0_rst_reg1;
  wire fsync_vc1_int_reg;
  wire fsync_vc1_int_reg_i_1_n_0;
  wire fsync_vc1_rst_reg;
  wire fsync_vc1_rst_reg0;
  wire fsync_vc2_int_reg;
  wire fsync_vc2_int_reg_i_1_n_0;
  wire fsync_vc2_rst_reg;
  wire fsync_vc2_rst_reg0;
  wire fsync_vc3_int_reg;
  wire fsync_vc3_int_reg_i_1_n_0;
  wire fsync_vc3_rst_reg;
  wire fsync_vc3_rst_reg0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [63:0]m_axis_tdata;
  wire \m_axis_tdata[63]_i_2_n_0 ;
  wire \m_axis_tdata[63]_i_3_n_0 ;
  wire [1:0]m_axis_tdest;
  wire \m_axis_tdest[1]_i_1_n_0 ;
  wire [7:0]m_axis_tkeep;
  wire [7:0]m_axis_tkeep_i;
  wire m_axis_tlast;
  wire m_axis_tlast1;
  wire m_axis_tlast_i_10_n_0;
  wire m_axis_tlast_i_11_n_0;
  wire m_axis_tlast_i_12_n_0;
  wire m_axis_tlast_i_13_n_0;
  wire m_axis_tlast_i_14_n_0;
  wire m_axis_tlast_i_15_n_0;
  wire m_axis_tlast_i_16_n_0;
  wire m_axis_tlast_i_17_n_0;
  wire m_axis_tlast_i_18_n_0;
  wire m_axis_tlast_i_19_n_0;
  wire m_axis_tlast_i_1_n_0;
  wire m_axis_tlast_i_20_n_0;
  wire m_axis_tlast_i_21_n_0;
  wire m_axis_tlast_i_22_n_0;
  wire m_axis_tlast_i_23_n_0;
  wire m_axis_tlast_i_24_n_0;
  wire m_axis_tlast_i_25_n_0;
  wire m_axis_tlast_i_26_n_0;
  wire m_axis_tlast_i_5_n_0;
  wire m_axis_tlast_i_6_n_0;
  wire m_axis_tlast_i_7_n_0;
  wire m_axis_tlast_i_8_n_0;
  wire m_axis_tlast_i_9_n_0;
  wire m_axis_tlast_reg_i_2_n_7;
  wire m_axis_tlast_reg_i_4_n_0;
  wire m_axis_tlast_reg_i_4_n_1;
  wire m_axis_tlast_reg_i_4_n_2;
  wire m_axis_tlast_reg_i_4_n_3;
  wire m_axis_tlast_reg_i_4_n_5;
  wire m_axis_tlast_reg_i_4_n_6;
  wire m_axis_tlast_reg_i_4_n_7;
  wire m_axis_tready;
  wire [55:0]m_axis_tuser;
  wire \m_axis_tuser[0]_i_1_n_0 ;
  wire \m_axis_tuser[0]_i_2_n_0 ;
  wire \m_axis_tuser[0]_i_3_n_0 ;
  wire m_axis_tvalid;
  wire m_axis_tvalid1_in;
  wire m_axis_tvalid_i_1_n_0;
  wire m_axis_tvalid_i_3_n_0;
  wire [67:0]mem_rdata;
  wire \mem_rdata_r[67]_i_1_n_0 ;
  wire \mem_rdata_r_reg_n_0_[0] ;
  wire \mem_rdata_r_reg_n_0_[1] ;
  wire \mem_rdata_r_reg_n_0_[24] ;
  wire \mem_rdata_r_reg_n_0_[25] ;
  wire \mem_rdata_r_reg_n_0_[26] ;
  wire \mem_rdata_r_reg_n_0_[27] ;
  wire \mem_rdata_r_reg_n_0_[28] ;
  wire \mem_rdata_r_reg_n_0_[29] ;
  wire \mem_rdata_r_reg_n_0_[2] ;
  wire \mem_rdata_r_reg_n_0_[30] ;
  wire \mem_rdata_r_reg_n_0_[31] ;
  wire \mem_rdata_r_reg_n_0_[32] ;
  wire \mem_rdata_r_reg_n_0_[33] ;
  wire \mem_rdata_r_reg_n_0_[34] ;
  wire \mem_rdata_r_reg_n_0_[35] ;
  wire \mem_rdata_r_reg_n_0_[36] ;
  wire \mem_rdata_r_reg_n_0_[37] ;
  wire \mem_rdata_r_reg_n_0_[38] ;
  wire \mem_rdata_r_reg_n_0_[39] ;
  wire \mem_rdata_r_reg_n_0_[3] ;
  wire \mem_rdata_r_reg_n_0_[40] ;
  wire \mem_rdata_r_reg_n_0_[41] ;
  wire \mem_rdata_r_reg_n_0_[42] ;
  wire \mem_rdata_r_reg_n_0_[43] ;
  wire \mem_rdata_r_reg_n_0_[44] ;
  wire \mem_rdata_r_reg_n_0_[45] ;
  wire \mem_rdata_r_reg_n_0_[46] ;
  wire \mem_rdata_r_reg_n_0_[47] ;
  wire \mem_rdata_r_reg_n_0_[48] ;
  wire \mem_rdata_r_reg_n_0_[49] ;
  wire \mem_rdata_r_reg_n_0_[4] ;
  wire \mem_rdata_r_reg_n_0_[50] ;
  wire \mem_rdata_r_reg_n_0_[51] ;
  wire \mem_rdata_r_reg_n_0_[52] ;
  wire \mem_rdata_r_reg_n_0_[53] ;
  wire \mem_rdata_r_reg_n_0_[54] ;
  wire \mem_rdata_r_reg_n_0_[55] ;
  wire \mem_rdata_r_reg_n_0_[56] ;
  wire \mem_rdata_r_reg_n_0_[57] ;
  wire \mem_rdata_r_reg_n_0_[58] ;
  wire \mem_rdata_r_reg_n_0_[59] ;
  wire \mem_rdata_r_reg_n_0_[5] ;
  wire \mem_rdata_r_reg_n_0_[60] ;
  wire \mem_rdata_r_reg_n_0_[61] ;
  wire \mem_rdata_r_reg_n_0_[62] ;
  wire \mem_rdata_r_reg_n_0_[63] ;
  wire mem_rvld;
  wire [1:0]mem_vc;
  wire [15:0]mem_wc;
  wire [3:0]p_0_in;
  wire p_0_in58_out;
  wire [15:2]p_0_in__0;
  wire p_0_out;
  wire p_15_out;
  wire p_1_out;
  wire p_24_out;
  wire p_2_out;
  wire p_33_out;
  wire p_3_out;
  wire p_41_in;
  wire p_42_out;
  wire p_44_in;
  wire pend_data;
  wire pend_data_i_1_n_0;
  wire rd_en;
  wire strm_prgrs_reg;
  wire strm_prgrs_reg_i_1_n_0;
  wire swap_strb;
  wire tlast_d1;
  wire tvalid_d1;
  wire [7:3]\NLW_bytes_sent_reg[15]_i_2_CO_UNCONNECTED ;
  wire [7:6]\NLW_bytes_sent_reg[15]_i_2_DI_UNCONNECTED ;
  wire [7:6]\NLW_bytes_sent_reg[15]_i_2_O_UNCONNECTED ;
  wire [7:6]\NLW_bytes_sent_reg[15]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_bytes_sent_reg[9]_i_1_CO_UNCONNECTED ;
  wire [7:1]NLW_m_axis_tlast_reg_i_2_CO_UNCONNECTED;
  wire [7:1]NLW_m_axis_tlast_reg_i_2_DI_UNCONNECTED;
  wire [7:0]NLW_m_axis_tlast_reg_i_2_O_UNCONNECTED;
  wire [7:1]NLW_m_axis_tlast_reg_i_2_S_UNCONNECTED;
  wire [3:3]NLW_m_axis_tlast_reg_i_4_CO_UNCONNECTED;
  wire [7:0]NLW_m_axis_tlast_reg_i_4_O_UNCONNECTED;

  LUT5 #(
    .INIT(32'hFD00FFFF)) 
    \LINE_NUM_VC[0].line_num[0][15]_i_1 
       (.I0(p_41_in),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \LINE_NUM_VC[0].line_num[0][15]_i_2 
       (.I0(p_41_in),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .O(p_42_out));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][0] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [0]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][10] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [10]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][11] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [11]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][12] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [12]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][13] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [13]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][14] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [14]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][15] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [15]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][1] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [1]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][2] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [2]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][3] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [3]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][4] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [4]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][5] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [5]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][6] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [6]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][7] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [7]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][8] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [8]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][9] 
       (.C(m_axis_aclk),
        .CE(p_42_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [9]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEAEAEAFFEAEAEAEA)) 
    \LINE_NUM_VC[0].rst_lnum[0]_i_1 
       (.I0(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I1(\LINE_NUM_VC[0].rst_lnum[0]_i_2_n_0 ),
        .I2(\LINE_NUM_VC[2].rst_lnum[2]_i_3_n_0 ),
        .I3(cur_lp_vc[0]),
        .I4(cur_lp_vc[1]),
        .I5(p_44_in),
        .O(p_3_out));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_NUM_VC[0].rst_lnum[0]_i_2 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .O(\LINE_NUM_VC[0].rst_lnum[0]_i_2_n_0 ));
  FDRE \LINE_NUM_VC[0].rst_lnum_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(\LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ),
        .R(SR));
  LUT5 #(
    .INIT(32'hDF00FFFF)) 
    \LINE_NUM_VC[1].line_num[1][15]_i_1 
       (.I0(p_41_in),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \LINE_NUM_VC[1].line_num[1][15]_i_2 
       (.I0(p_41_in),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .O(p_33_out));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][0] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [0]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][10] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [10]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][11] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [11]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][12] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [12]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][13] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [13]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][14] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [14]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][15] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [15]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][1] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [1]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][2] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [2]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][3] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [3]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][4] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [4]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][5] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [5]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][6] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [6]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][7] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [7]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][8] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [8]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][9] 
       (.C(m_axis_aclk),
        .CE(p_33_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [9]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBAAABAAABAAA)) 
    \LINE_NUM_VC[1].rst_lnum[1]_i_1 
       (.I0(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\LINE_NUM_VC[2].rst_lnum[2]_i_3_n_0 ),
        .I4(p_44_in),
        .I5(\LINE_NUM_VC[1].rst_lnum[1]_i_2_n_0 ),
        .O(p_2_out));
  LUT2 #(
    .INIT(4'h2)) 
    \LINE_NUM_VC[1].rst_lnum[1]_i_2 
       (.I0(cur_lp_vc[0]),
        .I1(cur_lp_vc[1]),
        .O(\LINE_NUM_VC[1].rst_lnum[1]_i_2_n_0 ));
  FDRE \LINE_NUM_VC[1].rst_lnum_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(\LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ),
        .R(SR));
  LUT5 #(
    .INIT(32'hBF00FFFF)) 
    \LINE_NUM_VC[2].line_num[2][15]_i_1 
       (.I0(mem_vc[0]),
        .I1(mem_vc[1]),
        .I2(p_41_in),
        .I3(\LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \LINE_NUM_VC[2].line_num[2][15]_i_2 
       (.I0(mem_vc[0]),
        .I1(mem_vc[1]),
        .I2(p_41_in),
        .O(p_24_out));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][0] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [0]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][10] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [10]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][11] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [11]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][12] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [12]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][13] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [13]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][14] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [14]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][15] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [15]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][1] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [1]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][2] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [2]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][3] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [3]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][4] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [4]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][5] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [5]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][6] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [6]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][7] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [7]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][8] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [8]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][9] 
       (.C(m_axis_aclk),
        .CE(p_24_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [9]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBAAABAAABAAA)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_1 
       (.I0(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\LINE_NUM_VC[2].rst_lnum[2]_i_3_n_0 ),
        .I4(p_44_in),
        .I5(\LINE_NUM_VC[2].rst_lnum[2]_i_5_n_0 ),
        .O(p_1_out));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h4004)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_2 
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(p_0_in[2]),
        .O(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'h4404)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_3 
       (.I0(p_0_in[2]),
        .I1(p_0_in[3]),
        .I2(p_0_in[1]),
        .I3(p_0_in[0]),
        .O(\LINE_NUM_VC[2].rst_lnum[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_4 
       (.I0(fsync_vc0_rst_reg1),
        .I1(p_0_in[2]),
        .I2(p_0_in[3]),
        .I3(p_0_in[1]),
        .O(p_44_in));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_5 
       (.I0(cur_lp_vc[1]),
        .I1(cur_lp_vc[0]),
        .O(\LINE_NUM_VC[2].rst_lnum[2]_i_5_n_0 ));
  FDRE \LINE_NUM_VC[2].rst_lnum_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(\LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ),
        .R(SR));
  LUT5 #(
    .INIT(32'h7F00FFFF)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_1 
       (.I0(p_41_in),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_2 
       (.I0(p_41_in),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .O(p_15_out));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_3 
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(mem_rvld),
        .I3(p_0_in[0]),
        .I4(p_0_in[3]),
        .O(p_41_in));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][0] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [0]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][10] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [10]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][11] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [11]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][12] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [12]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][13] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [13]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][14] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [14]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][15] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [15]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][1] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [1]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][2] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [2]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][3] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [3]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][4] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [4]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][5] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [5]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][6] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [6]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][7] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [7]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][8] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [8]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][9] 
       (.C(m_axis_aclk),
        .CE(p_15_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [9]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBAAEBBAAAAAEABA)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ),
        .I1(p_0_in[2]),
        .I2(p_0_in[1]),
        .I3(p_0_in[3]),
        .I4(p_0_in[0]),
        .I5(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ),
        .O(p_0_out));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_2 
       (.I0(cur_lp_vc[0]),
        .I1(cur_lp_vc[1]),
        .I2(p_44_in),
        .O(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_3 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .O(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ));
  FDRE \LINE_NUM_VC[3].rst_lnum_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_out),
        .Q(\LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT4 #(
    .INIT(16'hAFBF)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[0]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[2] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(swap_strb),
        .I3(\cur_lp_wc_reg_n_0_[1] ),
        .O(m_axis_tkeep_i[0]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'hEBFB)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[1]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[2] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(swap_strb),
        .O(m_axis_tkeep_i[1]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'hFBEB)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[2]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[2] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(swap_strb),
        .O(m_axis_tkeep_i[2]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'hFAFB)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[3]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[2] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(swap_strb),
        .I3(\cur_lp_wc_reg_n_0_[1] ),
        .O(m_axis_tkeep_i[3]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'h4443)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[4]_i_1 
       (.I0(swap_strb),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[4]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'hC043)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[5]_i_1 
       (.I0(swap_strb),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[5]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'hC083)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[6]_i_1 
       (.I0(swap_strb),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[6]));
  LUT4 #(
    .INIT(16'h80FF)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1 
       (.I0(m_axis_tvalid),
        .I1(m_axis_tready),
        .I2(m_axis_tlast),
        .I3(m_axis_aresetn),
        .O(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT4 #(
    .INIT(16'h8883)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_2 
       (.I0(swap_strb),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[7]));
  LUT5 #(
    .INIT(32'h00000080)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3 
       (.I0(cur_lp_dtype[3]),
        .I1(cur_lp_dtype[4]),
        .I2(cur_lp_dtype[1]),
        .I3(cur_lp_dtype[0]),
        .I4(cur_lp_dtype[5]),
        .O(swap_strb));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[0]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[1]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[2]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[3]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[4]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[5]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[6]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(m_axis_tkeep_i[7]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ),
        .S(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00E0C0C0E0E0E0E0)) 
    \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1 
       (.I0(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_2_n_0 ),
        .I1(m_axis_tuser[1]),
        .I2(m_axis_aresetn),
        .I3(m_axis_tlast),
        .I4(m_axis_tready),
        .I5(m_axis_tvalid),
        .O(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000030000)) 
    \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_2 
       (.I0(strm_prgrs_reg_i_1_n_0),
        .I1(m_axis_tvalid_i_3_n_0),
        .I2(p_0_in[2]),
        .I3(p_0_in[3]),
        .I4(p_0_in[0]),
        .I5(p_0_in[1]),
        .O(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_2_n_0 ));
  FDRE \TUSER_WIDTH_GTE2.m_axis_tuser_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ),
        .Q(m_axis_tuser[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[0] ),
        .I1(\frame_num_vc0_reg_n_0_[0] ),
        .I2(\frame_num_vc3_reg_n_0_[0] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[0] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[1] ),
        .I1(\frame_num_vc0_reg_n_0_[1] ),
        .I2(\frame_num_vc3_reg_n_0_[1] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[1] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[2] ),
        .I1(\frame_num_vc0_reg_n_0_[2] ),
        .I2(\frame_num_vc3_reg_n_0_[2] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[2] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[3] ),
        .I1(\frame_num_vc0_reg_n_0_[3] ),
        .I2(\frame_num_vc3_reg_n_0_[3] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[3] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[4] ),
        .I1(\frame_num_vc0_reg_n_0_[4] ),
        .I2(\frame_num_vc3_reg_n_0_[4] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[4] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[5] ),
        .I1(\frame_num_vc0_reg_n_0_[5] ),
        .I2(\frame_num_vc3_reg_n_0_[5] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[5] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[6] ),
        .I1(\frame_num_vc0_reg_n_0_[6] ),
        .I2(\frame_num_vc3_reg_n_0_[6] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[6] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[7] ),
        .I1(\frame_num_vc0_reg_n_0_[7] ),
        .I2(\frame_num_vc3_reg_n_0_[7] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[7] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[8] ),
        .I1(\frame_num_vc0_reg_n_0_[8] ),
        .I2(\frame_num_vc3_reg_n_0_[8] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[8] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[9] ),
        .I1(\frame_num_vc0_reg_n_0_[9] ),
        .I2(\frame_num_vc3_reg_n_0_[9] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[9] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[10] ),
        .I1(\frame_num_vc0_reg_n_0_[10] ),
        .I2(\frame_num_vc3_reg_n_0_[10] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[10] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[11] ),
        .I1(\frame_num_vc0_reg_n_0_[11] ),
        .I2(\frame_num_vc3_reg_n_0_[11] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[11] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[12] ),
        .I1(\frame_num_vc0_reg_n_0_[12] ),
        .I2(\frame_num_vc3_reg_n_0_[12] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[12] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[13] ),
        .I1(\frame_num_vc0_reg_n_0_[13] ),
        .I2(\frame_num_vc3_reg_n_0_[13] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[13] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[14] ),
        .I1(\frame_num_vc0_reg_n_0_[14] ),
        .I2(\frame_num_vc3_reg_n_0_[14] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[14] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1 
       (.I0(\frame_num_vc1_reg_n_0_[15] ),
        .I1(\frame_num_vc0_reg_n_0_[15] ),
        .I2(\frame_num_vc3_reg_n_0_[15] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc2_reg_n_0_[15] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[16] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ),
        .Q(m_axis_tuser[2]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[17] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ),
        .Q(m_axis_tuser[3]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[18] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ),
        .Q(m_axis_tuser[4]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[19] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ),
        .Q(m_axis_tuser[5]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[20] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ),
        .Q(m_axis_tuser[6]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[21] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ),
        .Q(m_axis_tuser[7]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[22] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ),
        .Q(m_axis_tuser[8]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[23] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ),
        .Q(m_axis_tuser[9]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[24] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ),
        .Q(m_axis_tuser[10]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[25] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ),
        .Q(m_axis_tuser[11]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[26] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ),
        .Q(m_axis_tuser[12]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[27] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ),
        .Q(m_axis_tuser[13]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[28] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ),
        .Q(m_axis_tuser[14]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[29] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ),
        .Q(m_axis_tuser[15]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[30] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ),
        .Q(m_axis_tuser[16]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[31] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ),
        .Q(m_axis_tuser[17]),
        .R(SR));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [0]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [0]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [0]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [0]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [1]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [1]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [1]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [1]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [2]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [2]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [2]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [2]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [3]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [3]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [3]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [3]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [4]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [4]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [4]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [4]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [5]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [5]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [5]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [5]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [6]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [6]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [6]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [6]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [7]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [7]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [7]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [7]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [8]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [8]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [8]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [8]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [9]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [9]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [9]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [9]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [10]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [10]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [10]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [10]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [11]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [11]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [11]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [11]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [12]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [12]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [12]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [12]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [13]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [13]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [13]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [13]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [14]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [14]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [14]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [14]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1 
       (.I0(\LINE_NUM_VC[1].line_num_reg[1]_2 [15]),
        .I1(\LINE_NUM_VC[0].line_num_reg[0]_3 [15]),
        .I2(\LINE_NUM_VC[3].line_num_reg[3]_0 [15]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[2].line_num_reg[2]_1 [15]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[32] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ),
        .Q(m_axis_tuser[18]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[33] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ),
        .Q(m_axis_tuser[19]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[34] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ),
        .Q(m_axis_tuser[20]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[35] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ),
        .Q(m_axis_tuser[21]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[36] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ),
        .Q(m_axis_tuser[22]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[37] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ),
        .Q(m_axis_tuser[23]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[38] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ),
        .Q(m_axis_tuser[24]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[39] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ),
        .Q(m_axis_tuser[25]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[40] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ),
        .Q(m_axis_tuser[26]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[41] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ),
        .Q(m_axis_tuser[27]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[42] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ),
        .Q(m_axis_tuser[28]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[43] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ),
        .Q(m_axis_tuser[29]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[44] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ),
        .Q(m_axis_tuser[30]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[45] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ),
        .Q(m_axis_tuser[31]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[46] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ),
        .Q(m_axis_tuser[32]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[47] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ),
        .Q(m_axis_tuser[33]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[48] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[0] ),
        .Q(m_axis_tuser[34]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[49] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[1] ),
        .Q(m_axis_tuser[35]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[50] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[2] ),
        .Q(m_axis_tuser[36]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[51] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[3] ),
        .Q(m_axis_tuser[37]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[52] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[4] ),
        .Q(m_axis_tuser[38]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[53] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[5] ),
        .Q(m_axis_tuser[39]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[54] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[6] ),
        .Q(m_axis_tuser[40]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[55] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[7] ),
        .Q(m_axis_tuser[41]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[56] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[8] ),
        .Q(m_axis_tuser[42]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[57] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[9] ),
        .Q(m_axis_tuser[43]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[58] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[10] ),
        .Q(m_axis_tuser[44]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[59] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[11] ),
        .Q(m_axis_tuser[45]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[60] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[12] ),
        .Q(m_axis_tuser[46]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[61] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[13] ),
        .Q(m_axis_tuser[47]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[62] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[14] ),
        .Q(m_axis_tuser[48]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[63] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(\cur_lp_wc_reg_n_0_[15] ),
        .Q(m_axis_tuser[49]),
        .R(SR));
  LUT6 #(
    .INIT(64'hF4000000F500F500)) 
    \TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1 
       (.I0(strm_prgrs_reg),
        .I1(tvalid_d1),
        .I2(tlast_d1),
        .I3(p_0_in58_out),
        .I4(m_axis_tready),
        .I5(m_axis_tvalid),
        .O(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_2 
       (.I0(mem_rvld),
        .I1(p_0_in[2]),
        .I2(p_0_in[3]),
        .I3(p_0_in[1]),
        .O(p_0_in58_out));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[64] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[0]),
        .Q(m_axis_tuser[50]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[65] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[1]),
        .Q(m_axis_tuser[51]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[66] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[2]),
        .Q(m_axis_tuser[52]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[67] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[3]),
        .Q(m_axis_tuser[53]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[68] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[4]),
        .Q(m_axis_tuser[54]),
        .R(SR));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[69] 
       (.C(m_axis_aclk),
        .CE(\TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1_n_0 ),
        .D(cur_lp_dtype[5]),
        .Q(m_axis_tuser[55]),
        .R(SR));
  LUT2 #(
    .INIT(4'h8)) 
    \bytes_sent[15]_i_1 
       (.I0(m_axis_tvalid),
        .I1(m_axis_tready),
        .O(axis_beat_smpld));
  LUT1 #(
    .INIT(2'h1)) 
    \bytes_sent[9]_i_2 
       (.I0(bytes_sent_reg__0[3]),
        .O(\bytes_sent[9]_i_2_n_0 ));
  FDRE \bytes_sent_reg[10] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[10]),
        .Q(bytes_sent_reg__0[10]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[11] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[11]),
        .Q(bytes_sent_reg__0[11]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[12] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[12]),
        .Q(bytes_sent_reg__0[12]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[13] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[13]),
        .Q(bytes_sent_reg__0[13]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[14] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[14]),
        .Q(bytes_sent_reg__0[14]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[15] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[15]),
        .Q(bytes_sent_reg__0[15]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  CARRY8 \bytes_sent_reg[15]_i_2 
       (.CI(\bytes_sent_reg[9]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_bytes_sent_reg[15]_i_2_CO_UNCONNECTED [7:5],\bytes_sent_reg[15]_i_2_n_3 ,\NLW_bytes_sent_reg[15]_i_2_CO_UNCONNECTED [3],\bytes_sent_reg[15]_i_2_n_5 ,\bytes_sent_reg[15]_i_2_n_6 ,\bytes_sent_reg[15]_i_2_n_7 }),
        .DI({\NLW_bytes_sent_reg[15]_i_2_DI_UNCONNECTED [7:6],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_bytes_sent_reg[15]_i_2_O_UNCONNECTED [7:6],p_0_in__0[15:10]}),
        .S({\NLW_bytes_sent_reg[15]_i_2_S_UNCONNECTED [7:6],bytes_sent_reg__0[15:10]}));
  FDRE \bytes_sent_reg[2] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[2]),
        .Q(bytes_sent_reg__0[2]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[3] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[3]),
        .Q(bytes_sent_reg__0[3]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[4] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[4]),
        .Q(bytes_sent_reg__0[4]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[5] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[5]),
        .Q(bytes_sent_reg__0[5]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[6] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[6]),
        .Q(bytes_sent_reg__0[6]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[7] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[7]),
        .Q(bytes_sent_reg__0[7]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[8] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[8]),
        .Q(bytes_sent_reg__0[8]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  FDRE \bytes_sent_reg[9] 
       (.C(m_axis_aclk),
        .CE(axis_beat_smpld),
        .D(p_0_in__0[9]),
        .Q(bytes_sent_reg__0[9]),
        .R(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1_n_0 ));
  CARRY8 \bytes_sent_reg[9]_i_1 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\bytes_sent_reg[9]_i_1_n_0 ,\bytes_sent_reg[9]_i_1_n_1 ,\bytes_sent_reg[9]_i_1_n_2 ,\bytes_sent_reg[9]_i_1_n_3 ,\NLW_bytes_sent_reg[9]_i_1_CO_UNCONNECTED [3],\bytes_sent_reg[9]_i_1_n_5 ,\bytes_sent_reg[9]_i_1_n_6 ,\bytes_sent_reg[9]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,bytes_sent_reg__0[3],1'b0}),
        .O(p_0_in__0[9:2]),
        .S({bytes_sent_reg__0[9:4],\bytes_sent[9]_i_2_n_0 ,bytes_sent_reg__0[2]}));
  FDRE \cur_lp_dtype_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[0] ),
        .Q(cur_lp_dtype[0]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_dtype_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[1] ),
        .Q(cur_lp_dtype[1]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_dtype_reg[2] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[2] ),
        .Q(cur_lp_dtype[2]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_dtype_reg[3] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[3] ),
        .Q(cur_lp_dtype[3]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_dtype_reg[4] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[4] ),
        .Q(cur_lp_dtype[4]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_dtype_reg[5] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[5] ),
        .Q(cur_lp_dtype[5]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_vc[0]),
        .Q(cur_lp_vc[0]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_vc[1]),
        .Q(cur_lp_vc[1]),
        .R(cur_lp_wc_lte4_i_1_n_0));
  LUT5 #(
    .INIT(32'h0090FFFF)) 
    cur_lp_wc_lte4_i_1
       (.I0(p_0_in[2]),
        .I1(p_0_in[3]),
        .I2(p_0_in[1]),
        .I3(p_0_in[0]),
        .I4(m_axis_aresetn),
        .O(cur_lp_wc_lte4_i_1_n_0));
  LUT5 #(
    .INIT(32'h00400000)) 
    cur_lp_wc_lte4_i_2
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(mem_rvld),
        .I3(p_0_in[0]),
        .I4(p_0_in[3]),
        .O(cur_lp_vc0));
  LUT6 #(
    .INIT(64'h01FF000000000000)) 
    cur_lp_wc_lte4_i_3
       (.I0(mem_wc[0]),
        .I1(mem_wc[1]),
        .I2(mem_wc[2]),
        .I3(mem_wc[3]),
        .I4(cur_lp_wc_lte4_i_4_n_0),
        .I5(cur_lp_wc_lte4_i_5_n_0),
        .O(cur_lp_wc_lte4_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    cur_lp_wc_lte4_i_4
       (.I0(mem_wc[12]),
        .I1(mem_wc[13]),
        .I2(mem_wc[10]),
        .I3(mem_wc[11]),
        .I4(mem_wc[15]),
        .I5(mem_wc[14]),
        .O(cur_lp_wc_lte4_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    cur_lp_wc_lte4_i_5
       (.I0(mem_wc[6]),
        .I1(mem_wc[7]),
        .I2(mem_wc[4]),
        .I3(mem_wc[5]),
        .I4(mem_wc[9]),
        .I5(mem_wc[8]),
        .O(cur_lp_wc_lte4_i_5_n_0));
  FDRE cur_lp_wc_lte4_reg
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(cur_lp_wc_lte4_i_3_n_0),
        .Q(cur_lp_wc_lte4),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[0]),
        .Q(\cur_lp_wc_reg_n_0_[0] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[10] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[10]),
        .Q(\cur_lp_wc_reg_n_0_[10] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[11] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[11]),
        .Q(\cur_lp_wc_reg_n_0_[11] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[12] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[12]),
        .Q(\cur_lp_wc_reg_n_0_[12] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[13] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[13]),
        .Q(\cur_lp_wc_reg_n_0_[13] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[14] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[14]),
        .Q(\cur_lp_wc_reg_n_0_[14] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[15] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[15]),
        .Q(\cur_lp_wc_reg_n_0_[15] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[1]),
        .Q(\cur_lp_wc_reg_n_0_[1] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[2] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[2]),
        .Q(\cur_lp_wc_reg_n_0_[2] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[3] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[3]),
        .Q(\cur_lp_wc_reg_n_0_[3] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[4] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[4]),
        .Q(\cur_lp_wc_reg_n_0_[4] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[5] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[5]),
        .Q(\cur_lp_wc_reg_n_0_[5] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[6] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[6]),
        .Q(\cur_lp_wc_reg_n_0_[6] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[7] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[7]),
        .Q(\cur_lp_wc_reg_n_0_[7] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[8] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[8]),
        .Q(\cur_lp_wc_reg_n_0_[8] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  FDRE \cur_lp_wc_reg[9] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[9]),
        .Q(\cur_lp_wc_reg_n_0_[9] ),
        .R(cur_lp_wc_lte4_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFF0200FFFFFFFF)) 
    \frame_num_vc0[15]_i_1 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\frame_num_vc3[15]_i_3_n_0 ),
        .I4(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\frame_num_vc0[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0200)) 
    \frame_num_vc0[15]_i_2 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(fs_opcode),
        .O(frame_num_vc0));
  FDRE \frame_num_vc0_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[0]),
        .Q(\frame_num_vc0_reg_n_0_[0] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[10]),
        .Q(\frame_num_vc0_reg_n_0_[10] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[11]),
        .Q(\frame_num_vc0_reg_n_0_[11] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[12]),
        .Q(\frame_num_vc0_reg_n_0_[12] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[13]),
        .Q(\frame_num_vc0_reg_n_0_[13] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[14]),
        .Q(\frame_num_vc0_reg_n_0_[14] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[15]),
        .Q(\frame_num_vc0_reg_n_0_[15] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[1]),
        .Q(\frame_num_vc0_reg_n_0_[1] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[2]),
        .Q(\frame_num_vc0_reg_n_0_[2] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[3]),
        .Q(\frame_num_vc0_reg_n_0_[3] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[4]),
        .Q(\frame_num_vc0_reg_n_0_[4] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[5]),
        .Q(\frame_num_vc0_reg_n_0_[5] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[6]),
        .Q(\frame_num_vc0_reg_n_0_[6] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[7]),
        .Q(\frame_num_vc0_reg_n_0_[7] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[8]),
        .Q(\frame_num_vc0_reg_n_0_[8] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[9]),
        .Q(\frame_num_vc0_reg_n_0_[9] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FFFFFFFF)) 
    \frame_num_vc1[15]_i_1 
       (.I0(mem_rvld),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\frame_num_vc3[15]_i_3_n_0 ),
        .I4(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\frame_num_vc1[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \frame_num_vc1[15]_i_2 
       (.I0(mem_rvld),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(fs_opcode),
        .O(frame_num_vc1));
  FDRE \frame_num_vc1_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[0]),
        .Q(\frame_num_vc1_reg_n_0_[0] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[10]),
        .Q(\frame_num_vc1_reg_n_0_[10] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[11]),
        .Q(\frame_num_vc1_reg_n_0_[11] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[12]),
        .Q(\frame_num_vc1_reg_n_0_[12] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[13]),
        .Q(\frame_num_vc1_reg_n_0_[13] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[14]),
        .Q(\frame_num_vc1_reg_n_0_[14] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[15]),
        .Q(\frame_num_vc1_reg_n_0_[15] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[1]),
        .Q(\frame_num_vc1_reg_n_0_[1] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[2]),
        .Q(\frame_num_vc1_reg_n_0_[2] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[3]),
        .Q(\frame_num_vc1_reg_n_0_[3] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[4]),
        .Q(\frame_num_vc1_reg_n_0_[4] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[5]),
        .Q(\frame_num_vc1_reg_n_0_[5] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[6]),
        .Q(\frame_num_vc1_reg_n_0_[6] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[7]),
        .Q(\frame_num_vc1_reg_n_0_[7] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[8]),
        .Q(\frame_num_vc1_reg_n_0_[8] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[9]),
        .Q(\frame_num_vc1_reg_n_0_[9] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FFFFFFFF)) 
    \frame_num_vc2[15]_i_1 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\frame_num_vc3[15]_i_3_n_0 ),
        .I4(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\frame_num_vc2[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \frame_num_vc2[15]_i_2 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(fs_opcode),
        .O(frame_num_vc2));
  FDRE \frame_num_vc2_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[0]),
        .Q(\frame_num_vc2_reg_n_0_[0] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[10]),
        .Q(\frame_num_vc2_reg_n_0_[10] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[11]),
        .Q(\frame_num_vc2_reg_n_0_[11] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[12]),
        .Q(\frame_num_vc2_reg_n_0_[12] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[13]),
        .Q(\frame_num_vc2_reg_n_0_[13] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[14]),
        .Q(\frame_num_vc2_reg_n_0_[14] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[15]),
        .Q(\frame_num_vc2_reg_n_0_[15] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[1]),
        .Q(\frame_num_vc2_reg_n_0_[1] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[2]),
        .Q(\frame_num_vc2_reg_n_0_[2] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[3]),
        .Q(\frame_num_vc2_reg_n_0_[3] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[4]),
        .Q(\frame_num_vc2_reg_n_0_[4] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[5]),
        .Q(\frame_num_vc2_reg_n_0_[5] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[6]),
        .Q(\frame_num_vc2_reg_n_0_[6] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[7]),
        .Q(\frame_num_vc2_reg_n_0_[7] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[8]),
        .Q(\frame_num_vc2_reg_n_0_[8] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[9]),
        .Q(\frame_num_vc2_reg_n_0_[9] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF8000FFFFFFFF)) 
    \frame_num_vc3[15]_i_1 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\frame_num_vc3[15]_i_3_n_0 ),
        .I4(\LINE_NUM_VC[2].rst_lnum[2]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\frame_num_vc3[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \frame_num_vc3[15]_i_2 
       (.I0(mem_rvld),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(fs_opcode),
        .O(frame_num_vc3));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \frame_num_vc3[15]_i_3 
       (.I0(p_0_in[0]),
        .I1(p_0_in[3]),
        .I2(p_0_in[1]),
        .I3(p_0_in[2]),
        .O(\frame_num_vc3[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \frame_num_vc3[15]_i_4 
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(p_0_in[0]),
        .O(fs_opcode));
  FDRE \frame_num_vc3_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[0]),
        .Q(\frame_num_vc3_reg_n_0_[0] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[10]),
        .Q(\frame_num_vc3_reg_n_0_[10] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[11]),
        .Q(\frame_num_vc3_reg_n_0_[11] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[12]),
        .Q(\frame_num_vc3_reg_n_0_[12] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[13]),
        .Q(\frame_num_vc3_reg_n_0_[13] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[14]),
        .Q(\frame_num_vc3_reg_n_0_[14] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[15]),
        .Q(\frame_num_vc3_reg_n_0_[15] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[1]),
        .Q(\frame_num_vc3_reg_n_0_[1] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[2]),
        .Q(\frame_num_vc3_reg_n_0_[2] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[3]),
        .Q(\frame_num_vc3_reg_n_0_[3] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[4]),
        .Q(\frame_num_vc3_reg_n_0_[4] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[5]),
        .Q(\frame_num_vc3_reg_n_0_[5] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[6]),
        .Q(\frame_num_vc3_reg_n_0_[6] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[7]),
        .Q(\frame_num_vc3_reg_n_0_[7] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[8]),
        .Q(\frame_num_vc3_reg_n_0_[8] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[9]),
        .Q(\frame_num_vc3_reg_n_0_[9] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0008FFFF00080008)) 
    fsync_vc0_int_reg_i_1
       (.I0(fs_opcode),
        .I1(mem_rvld),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(fsync_vc0_rst_reg),
        .I5(fsync_vc0_int_reg),
        .O(fsync_vc0_int_reg_i_1_n_0));
  FDRE fsync_vc0_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc0_int_reg_i_1_n_0),
        .Q(fsync_vc0_int_reg),
        .R(cur_lp_wc_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    fsync_vc0_rst_reg_i_1
       (.I0(cur_lp_vc[1]),
        .I1(cur_lp_vc[0]),
        .I2(p_0_in58_out),
        .I3(fsync_vc0_rst_reg1),
        .O(fsync_vc0_rst_reg0));
  FDRE fsync_vc0_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc0_rst_reg0),
        .Q(fsync_vc0_rst_reg),
        .R(SR));
  LUT6 #(
    .INIT(64'h0080FFFF00800080)) 
    fsync_vc1_int_reg_i_1
       (.I0(fs_opcode),
        .I1(mem_rvld),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(fsync_vc1_rst_reg),
        .I5(fsync_vc1_int_reg),
        .O(fsync_vc1_int_reg_i_1_n_0));
  FDRE fsync_vc1_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc1_int_reg_i_1_n_0),
        .Q(fsync_vc1_int_reg),
        .R(cur_lp_wc_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    fsync_vc1_rst_reg_i_1
       (.I0(fsync_vc0_rst_reg1),
        .I1(cur_lp_vc[0]),
        .I2(cur_lp_vc[1]),
        .I3(p_0_in58_out),
        .O(fsync_vc1_rst_reg0));
  FDRE fsync_vc1_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc1_rst_reg0),
        .Q(fsync_vc1_rst_reg),
        .R(SR));
  LUT6 #(
    .INIT(64'h2000FFFF20002000)) 
    fsync_vc2_int_reg_i_1
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(fs_opcode),
        .I3(mem_rvld),
        .I4(fsync_vc2_rst_reg),
        .I5(fsync_vc2_int_reg),
        .O(fsync_vc2_int_reg_i_1_n_0));
  FDRE fsync_vc2_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc2_int_reg_i_1_n_0),
        .Q(fsync_vc2_int_reg),
        .R(cur_lp_wc_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    fsync_vc2_rst_reg_i_1
       (.I0(fsync_vc0_rst_reg1),
        .I1(cur_lp_vc[1]),
        .I2(cur_lp_vc[0]),
        .I3(p_0_in58_out),
        .O(fsync_vc2_rst_reg0));
  FDRE fsync_vc2_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc2_rst_reg0),
        .Q(fsync_vc2_rst_reg),
        .R(SR));
  LUT6 #(
    .INIT(64'h8000FFFF80008000)) 
    fsync_vc3_int_reg_i_1
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(fs_opcode),
        .I3(mem_rvld),
        .I4(fsync_vc3_rst_reg),
        .I5(fsync_vc3_int_reg),
        .O(fsync_vc3_int_reg_i_1_n_0));
  FDRE fsync_vc3_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc3_int_reg_i_1_n_0),
        .Q(fsync_vc3_int_reg),
        .R(cur_lp_wc_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    fsync_vc3_rst_reg_i_1
       (.I0(fsync_vc0_rst_reg1),
        .I1(cur_lp_vc[1]),
        .I2(cur_lp_vc[0]),
        .I3(p_0_in58_out),
        .O(fsync_vc3_rst_reg0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFBF)) 
    fsync_vc3_rst_reg_i_2
       (.I0(cur_lp_dtype[0]),
        .I1(cur_lp_dtype[1]),
        .I2(cur_lp_dtype[4]),
        .I3(cur_lp_dtype[5]),
        .I4(cur_lp_dtype[2]),
        .I5(cur_lp_dtype[3]),
        .O(fsync_vc0_rst_reg1));
  FDRE fsync_vc3_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc3_rst_reg0),
        .Q(fsync_vc3_rst_reg),
        .R(SR));
  LUT3 #(
    .INIT(8'h0D)) 
    lbuf_i_1
       (.I0(m_axis_tvalid),
        .I1(m_axis_tready),
        .I2(empty),
        .O(rd_en));
  LUT6 #(
    .INIT(64'h0000000000014001)) 
    \m_axis_tdata[63]_i_2 
       (.I0(m_axis_tvalid_i_3_n_0),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(p_0_in[2]),
        .I4(p_0_in[0]),
        .I5(\m_axis_tdata[63]_i_3_n_0 ),
        .O(\m_axis_tdata[63]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \m_axis_tdata[63]_i_3 
       (.I0(m_axis_tvalid),
        .I1(m_axis_tready),
        .O(\m_axis_tdata[63]_i_3_n_0 ));
  FDRE \m_axis_tdata_reg[0] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[0] ),
        .Q(m_axis_tdata[0]),
        .R(SR));
  FDRE \m_axis_tdata_reg[10] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[2]),
        .Q(m_axis_tdata[10]),
        .R(SR));
  FDRE \m_axis_tdata_reg[11] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[3]),
        .Q(m_axis_tdata[11]),
        .R(SR));
  FDRE \m_axis_tdata_reg[12] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[4]),
        .Q(m_axis_tdata[12]),
        .R(SR));
  FDRE \m_axis_tdata_reg[13] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[5]),
        .Q(m_axis_tdata[13]),
        .R(SR));
  FDRE \m_axis_tdata_reg[14] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[6]),
        .Q(m_axis_tdata[14]),
        .R(SR));
  FDRE \m_axis_tdata_reg[15] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[7]),
        .Q(m_axis_tdata[15]),
        .R(SR));
  FDRE \m_axis_tdata_reg[16] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[8]),
        .Q(m_axis_tdata[16]),
        .R(SR));
  FDRE \m_axis_tdata_reg[17] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[9]),
        .Q(m_axis_tdata[17]),
        .R(SR));
  FDRE \m_axis_tdata_reg[18] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[10]),
        .Q(m_axis_tdata[18]),
        .R(SR));
  FDRE \m_axis_tdata_reg[19] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[11]),
        .Q(m_axis_tdata[19]),
        .R(SR));
  FDRE \m_axis_tdata_reg[1] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[1] ),
        .Q(m_axis_tdata[1]),
        .R(SR));
  FDRE \m_axis_tdata_reg[20] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[12]),
        .Q(m_axis_tdata[20]),
        .R(SR));
  FDRE \m_axis_tdata_reg[21] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[13]),
        .Q(m_axis_tdata[21]),
        .R(SR));
  FDRE \m_axis_tdata_reg[22] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[14]),
        .Q(m_axis_tdata[22]),
        .R(SR));
  FDRE \m_axis_tdata_reg[23] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[15]),
        .Q(m_axis_tdata[23]),
        .R(SR));
  FDRE \m_axis_tdata_reg[24] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[24] ),
        .Q(m_axis_tdata[24]),
        .R(SR));
  FDRE \m_axis_tdata_reg[25] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[25] ),
        .Q(m_axis_tdata[25]),
        .R(SR));
  FDRE \m_axis_tdata_reg[26] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[26] ),
        .Q(m_axis_tdata[26]),
        .R(SR));
  FDRE \m_axis_tdata_reg[27] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[27] ),
        .Q(m_axis_tdata[27]),
        .R(SR));
  FDRE \m_axis_tdata_reg[28] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[28] ),
        .Q(m_axis_tdata[28]),
        .R(SR));
  FDRE \m_axis_tdata_reg[29] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[29] ),
        .Q(m_axis_tdata[29]),
        .R(SR));
  FDRE \m_axis_tdata_reg[2] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[2] ),
        .Q(m_axis_tdata[2]),
        .R(SR));
  FDRE \m_axis_tdata_reg[30] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[30] ),
        .Q(m_axis_tdata[30]),
        .R(SR));
  FDRE \m_axis_tdata_reg[31] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[31] ),
        .Q(m_axis_tdata[31]),
        .R(SR));
  FDRE \m_axis_tdata_reg[32] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[32] ),
        .Q(m_axis_tdata[32]),
        .R(SR));
  FDRE \m_axis_tdata_reg[33] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[33] ),
        .Q(m_axis_tdata[33]),
        .R(SR));
  FDRE \m_axis_tdata_reg[34] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[34] ),
        .Q(m_axis_tdata[34]),
        .R(SR));
  FDRE \m_axis_tdata_reg[35] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[35] ),
        .Q(m_axis_tdata[35]),
        .R(SR));
  FDRE \m_axis_tdata_reg[36] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[36] ),
        .Q(m_axis_tdata[36]),
        .R(SR));
  FDRE \m_axis_tdata_reg[37] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[37] ),
        .Q(m_axis_tdata[37]),
        .R(SR));
  FDRE \m_axis_tdata_reg[38] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[38] ),
        .Q(m_axis_tdata[38]),
        .R(SR));
  FDRE \m_axis_tdata_reg[39] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[39] ),
        .Q(m_axis_tdata[39]),
        .R(SR));
  FDRE \m_axis_tdata_reg[3] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[3] ),
        .Q(m_axis_tdata[3]),
        .R(SR));
  FDRE \m_axis_tdata_reg[40] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[40] ),
        .Q(m_axis_tdata[40]),
        .R(SR));
  FDRE \m_axis_tdata_reg[41] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[41] ),
        .Q(m_axis_tdata[41]),
        .R(SR));
  FDRE \m_axis_tdata_reg[42] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[42] ),
        .Q(m_axis_tdata[42]),
        .R(SR));
  FDRE \m_axis_tdata_reg[43] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[43] ),
        .Q(m_axis_tdata[43]),
        .R(SR));
  FDRE \m_axis_tdata_reg[44] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[44] ),
        .Q(m_axis_tdata[44]),
        .R(SR));
  FDRE \m_axis_tdata_reg[45] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[45] ),
        .Q(m_axis_tdata[45]),
        .R(SR));
  FDRE \m_axis_tdata_reg[46] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[46] ),
        .Q(m_axis_tdata[46]),
        .R(SR));
  FDRE \m_axis_tdata_reg[47] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[47] ),
        .Q(m_axis_tdata[47]),
        .R(SR));
  FDRE \m_axis_tdata_reg[48] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[48] ),
        .Q(m_axis_tdata[48]),
        .R(SR));
  FDRE \m_axis_tdata_reg[49] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[49] ),
        .Q(m_axis_tdata[49]),
        .R(SR));
  FDRE \m_axis_tdata_reg[4] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[4] ),
        .Q(m_axis_tdata[4]),
        .R(SR));
  FDRE \m_axis_tdata_reg[50] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[50] ),
        .Q(m_axis_tdata[50]),
        .R(SR));
  FDRE \m_axis_tdata_reg[51] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[51] ),
        .Q(m_axis_tdata[51]),
        .R(SR));
  FDRE \m_axis_tdata_reg[52] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[52] ),
        .Q(m_axis_tdata[52]),
        .R(SR));
  FDRE \m_axis_tdata_reg[53] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[53] ),
        .Q(m_axis_tdata[53]),
        .R(SR));
  FDRE \m_axis_tdata_reg[54] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[54] ),
        .Q(m_axis_tdata[54]),
        .R(SR));
  FDRE \m_axis_tdata_reg[55] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[55] ),
        .Q(m_axis_tdata[55]),
        .R(SR));
  FDRE \m_axis_tdata_reg[56] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[56] ),
        .Q(m_axis_tdata[56]),
        .R(SR));
  FDRE \m_axis_tdata_reg[57] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[57] ),
        .Q(m_axis_tdata[57]),
        .R(SR));
  FDRE \m_axis_tdata_reg[58] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[58] ),
        .Q(m_axis_tdata[58]),
        .R(SR));
  FDRE \m_axis_tdata_reg[59] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[59] ),
        .Q(m_axis_tdata[59]),
        .R(SR));
  FDRE \m_axis_tdata_reg[5] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[5] ),
        .Q(m_axis_tdata[5]),
        .R(SR));
  FDRE \m_axis_tdata_reg[60] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[60] ),
        .Q(m_axis_tdata[60]),
        .R(SR));
  FDRE \m_axis_tdata_reg[61] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[61] ),
        .Q(m_axis_tdata[61]),
        .R(SR));
  FDRE \m_axis_tdata_reg[62] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[62] ),
        .Q(m_axis_tdata[62]),
        .R(SR));
  FDRE \m_axis_tdata_reg[63] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[63] ),
        .Q(m_axis_tdata[63]),
        .R(SR));
  FDRE \m_axis_tdata_reg[6] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_vc[0]),
        .Q(m_axis_tdata[6]),
        .R(SR));
  FDRE \m_axis_tdata_reg[7] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_vc[1]),
        .Q(m_axis_tdata[7]),
        .R(SR));
  FDRE \m_axis_tdata_reg[8] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[0]),
        .Q(m_axis_tdata[8]),
        .R(SR));
  FDRE \m_axis_tdata_reg[9] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[1]),
        .Q(m_axis_tdata[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'h8080C0C08880CCCC)) 
    \m_axis_tdest[1]_i_1 
       (.I0(m_axis_tready),
        .I1(p_0_in58_out),
        .I2(tlast_d1),
        .I3(tvalid_d1),
        .I4(m_axis_tvalid),
        .I5(strm_prgrs_reg),
        .O(\m_axis_tdest[1]_i_1_n_0 ));
  FDRE \m_axis_tdest_reg[0] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdest[1]_i_1_n_0 ),
        .D(cur_lp_vc[0]),
        .Q(m_axis_tdest[0]),
        .R(SR));
  FDRE \m_axis_tdest_reg[1] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdest[1]_i_1_n_0 ),
        .D(cur_lp_vc[1]),
        .Q(m_axis_tdest[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[0]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[0]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[1]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[1]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[2]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[2]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[3]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[3]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[4]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[4]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[5]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[5]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[6]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[6]));
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[7]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[7]));
  LUT6 #(
    .INIT(64'h00E0F000F0C0F0C0)) 
    m_axis_tlast_i_1
       (.I0(m_axis_tlast_reg_i_2_n_7),
        .I1(m_axis_tlast1),
        .I2(m_axis_aresetn),
        .I3(m_axis_tlast),
        .I4(m_axis_tready),
        .I5(m_axis_tvalid),
        .O(m_axis_tlast_i_1_n_0));
  LUT5 #(
    .INIT(32'h07733110)) 
    m_axis_tlast_i_10
       (.I0(\cur_lp_wc_reg_n_0_[8] ),
        .I1(\cur_lp_wc_reg_n_0_[9] ),
        .I2(m_axis_tlast_i_26_n_0),
        .I3(bytes_sent_reg__0[8]),
        .I4(bytes_sent_reg__0[9]),
        .O(m_axis_tlast_i_10_n_0));
  LUT6 #(
    .INIT(64'h0777733331111000)) 
    m_axis_tlast_i_11
       (.I0(\cur_lp_wc_reg_n_0_[6] ),
        .I1(\cur_lp_wc_reg_n_0_[7] ),
        .I2(bytes_sent_reg__0[5]),
        .I3(bytes_sent_reg__0[4]),
        .I4(bytes_sent_reg__0[6]),
        .I5(bytes_sent_reg__0[7]),
        .O(m_axis_tlast_i_11_n_0));
  LUT4 #(
    .INIT(16'h0731)) 
    m_axis_tlast_i_12
       (.I0(\cur_lp_wc_reg_n_0_[4] ),
        .I1(\cur_lp_wc_reg_n_0_[5] ),
        .I2(bytes_sent_reg__0[4]),
        .I3(bytes_sent_reg__0[5]),
        .O(m_axis_tlast_i_12_n_0));
  LUT4 #(
    .INIT(16'h2F02)) 
    m_axis_tlast_i_13
       (.I0(bytes_sent_reg__0[2]),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[3] ),
        .I3(bytes_sent_reg__0[3]),
        .O(m_axis_tlast_i_13_n_0));
  LUT5 #(
    .INIT(32'h29404029)) 
    m_axis_tlast_i_14
       (.I0(\cur_lp_wc_reg_n_0_[14] ),
        .I1(m_axis_tlast_i_23_n_0),
        .I2(bytes_sent_reg__0[14]),
        .I3(bytes_sent_reg__0[15]),
        .I4(\cur_lp_wc_reg_n_0_[15] ),
        .O(m_axis_tlast_i_14_n_0));
  LUT5 #(
    .INIT(32'h29404029)) 
    m_axis_tlast_i_15
       (.I0(\cur_lp_wc_reg_n_0_[12] ),
        .I1(m_axis_tlast_i_24_n_0),
        .I2(bytes_sent_reg__0[12]),
        .I3(bytes_sent_reg__0[13]),
        .I4(\cur_lp_wc_reg_n_0_[13] ),
        .O(m_axis_tlast_i_15_n_0));
  LUT5 #(
    .INIT(32'h29404029)) 
    m_axis_tlast_i_16
       (.I0(\cur_lp_wc_reg_n_0_[10] ),
        .I1(m_axis_tlast_i_25_n_0),
        .I2(bytes_sent_reg__0[10]),
        .I3(bytes_sent_reg__0[11]),
        .I4(\cur_lp_wc_reg_n_0_[11] ),
        .O(m_axis_tlast_i_16_n_0));
  LUT5 #(
    .INIT(32'h29404029)) 
    m_axis_tlast_i_17
       (.I0(\cur_lp_wc_reg_n_0_[8] ),
        .I1(m_axis_tlast_i_26_n_0),
        .I2(bytes_sent_reg__0[8]),
        .I3(bytes_sent_reg__0[9]),
        .I4(\cur_lp_wc_reg_n_0_[9] ),
        .O(m_axis_tlast_i_17_n_0));
  LUT6 #(
    .INIT(64'h2A95400040002A95)) 
    m_axis_tlast_i_18
       (.I0(\cur_lp_wc_reg_n_0_[6] ),
        .I1(bytes_sent_reg__0[5]),
        .I2(bytes_sent_reg__0[4]),
        .I3(bytes_sent_reg__0[6]),
        .I4(bytes_sent_reg__0[7]),
        .I5(\cur_lp_wc_reg_n_0_[7] ),
        .O(m_axis_tlast_i_18_n_0));
  LUT4 #(
    .INIT(16'h2442)) 
    m_axis_tlast_i_19
       (.I0(\cur_lp_wc_reg_n_0_[4] ),
        .I1(bytes_sent_reg__0[4]),
        .I2(bytes_sent_reg__0[5]),
        .I3(\cur_lp_wc_reg_n_0_[5] ),
        .O(m_axis_tlast_i_19_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_20
       (.I0(bytes_sent_reg__0[2]),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(bytes_sent_reg__0[3]),
        .I3(\cur_lp_wc_reg_n_0_[3] ),
        .O(m_axis_tlast_i_20_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    m_axis_tlast_i_21
       (.I0(\cur_lp_wc_reg_n_0_[0] ),
        .I1(\cur_lp_wc_reg_n_0_[1] ),
        .O(m_axis_tlast_i_21_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    m_axis_tlast_i_22
       (.I0(bytes_sent_reg__0[14]),
        .I1(bytes_sent_reg__0[12]),
        .I2(bytes_sent_reg__0[10]),
        .I3(m_axis_tlast_i_25_n_0),
        .I4(bytes_sent_reg__0[11]),
        .I5(bytes_sent_reg__0[13]),
        .O(m_axis_tlast_i_22_n_0));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    m_axis_tlast_i_23
       (.I0(bytes_sent_reg__0[13]),
        .I1(bytes_sent_reg__0[11]),
        .I2(m_axis_tlast_i_25_n_0),
        .I3(bytes_sent_reg__0[10]),
        .I4(bytes_sent_reg__0[12]),
        .O(m_axis_tlast_i_23_n_0));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'h80)) 
    m_axis_tlast_i_24
       (.I0(bytes_sent_reg__0[11]),
        .I1(m_axis_tlast_i_25_n_0),
        .I2(bytes_sent_reg__0[10]),
        .O(m_axis_tlast_i_24_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    m_axis_tlast_i_25
       (.I0(bytes_sent_reg__0[9]),
        .I1(bytes_sent_reg__0[7]),
        .I2(bytes_sent_reg__0[5]),
        .I3(bytes_sent_reg__0[4]),
        .I4(bytes_sent_reg__0[6]),
        .I5(bytes_sent_reg__0[8]),
        .O(m_axis_tlast_i_25_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    m_axis_tlast_i_26
       (.I0(bytes_sent_reg__0[7]),
        .I1(bytes_sent_reg__0[5]),
        .I2(bytes_sent_reg__0[4]),
        .I3(bytes_sent_reg__0[6]),
        .O(m_axis_tlast_i_26_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAEAAA)) 
    m_axis_tlast_i_3
       (.I0(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_2_n_0 ),
        .I1(mem_rvld),
        .I2(cur_lp_wc_lte4),
        .I3(m_axis_tlast_i_6_n_0),
        .I4(p_0_in[1]),
        .I5(p_0_in[0]),
        .O(m_axis_tlast1));
  LUT2 #(
    .INIT(4'h7)) 
    m_axis_tlast_i_5
       (.I0(bytes_sent_reg__0[15]),
        .I1(m_axis_tlast_i_22_n_0),
        .O(m_axis_tlast_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT2 #(
    .INIT(4'h1)) 
    m_axis_tlast_i_6
       (.I0(p_0_in[3]),
        .I1(p_0_in[2]),
        .O(m_axis_tlast_i_6_n_0));
  LUT5 #(
    .INIT(32'h07733110)) 
    m_axis_tlast_i_7
       (.I0(\cur_lp_wc_reg_n_0_[14] ),
        .I1(\cur_lp_wc_reg_n_0_[15] ),
        .I2(m_axis_tlast_i_23_n_0),
        .I3(bytes_sent_reg__0[14]),
        .I4(bytes_sent_reg__0[15]),
        .O(m_axis_tlast_i_7_n_0));
  LUT5 #(
    .INIT(32'h07733110)) 
    m_axis_tlast_i_8
       (.I0(\cur_lp_wc_reg_n_0_[12] ),
        .I1(\cur_lp_wc_reg_n_0_[13] ),
        .I2(m_axis_tlast_i_24_n_0),
        .I3(bytes_sent_reg__0[12]),
        .I4(bytes_sent_reg__0[13]),
        .O(m_axis_tlast_i_8_n_0));
  LUT5 #(
    .INIT(32'h07733110)) 
    m_axis_tlast_i_9
       (.I0(\cur_lp_wc_reg_n_0_[10] ),
        .I1(\cur_lp_wc_reg_n_0_[11] ),
        .I2(m_axis_tlast_i_25_n_0),
        .I3(bytes_sent_reg__0[10]),
        .I4(bytes_sent_reg__0[11]),
        .O(m_axis_tlast_i_9_n_0));
  FDRE m_axis_tlast_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tlast_i_1_n_0),
        .Q(m_axis_tlast),
        .R(1'b0));
  CARRY8 m_axis_tlast_reg_i_2
       (.CI(m_axis_tlast_reg_i_4_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_m_axis_tlast_reg_i_2_CO_UNCONNECTED[7:1],m_axis_tlast_reg_i_2_n_7}),
        .DI({NLW_m_axis_tlast_reg_i_2_DI_UNCONNECTED[7:1],1'b1}),
        .O(NLW_m_axis_tlast_reg_i_2_O_UNCONNECTED[7:0]),
        .S({NLW_m_axis_tlast_reg_i_2_S_UNCONNECTED[7:1],m_axis_tlast_i_5_n_0}));
  CARRY8 m_axis_tlast_reg_i_4
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({m_axis_tlast_reg_i_4_n_0,m_axis_tlast_reg_i_4_n_1,m_axis_tlast_reg_i_4_n_2,m_axis_tlast_reg_i_4_n_3,NLW_m_axis_tlast_reg_i_4_CO_UNCONNECTED[3],m_axis_tlast_reg_i_4_n_5,m_axis_tlast_reg_i_4_n_6,m_axis_tlast_reg_i_4_n_7}),
        .DI({m_axis_tlast_i_7_n_0,m_axis_tlast_i_8_n_0,m_axis_tlast_i_9_n_0,m_axis_tlast_i_10_n_0,m_axis_tlast_i_11_n_0,m_axis_tlast_i_12_n_0,m_axis_tlast_i_13_n_0,1'b0}),
        .O(NLW_m_axis_tlast_reg_i_4_O_UNCONNECTED[7:0]),
        .S({m_axis_tlast_i_14_n_0,m_axis_tlast_i_15_n_0,m_axis_tlast_i_16_n_0,m_axis_tlast_i_17_n_0,m_axis_tlast_i_18_n_0,m_axis_tlast_i_19_n_0,m_axis_tlast_i_20_n_0,m_axis_tlast_i_21_n_0}));
  LUT6 #(
    .INIT(64'h0000E200E200E200)) 
    \m_axis_tuser[0]_i_1 
       (.I0(m_axis_tuser[0]),
        .I1(\m_axis_tuser[0]_i_2_n_0 ),
        .I2(\m_axis_tuser[0]_i_3_n_0 ),
        .I3(m_axis_aresetn),
        .I4(m_axis_tvalid),
        .I5(m_axis_tready),
        .O(\m_axis_tuser[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA22020A0A0202)) 
    \m_axis_tuser[0]_i_2 
       (.I0(p_0_in58_out),
        .I1(strm_prgrs_reg),
        .I2(m_axis_tvalid),
        .I3(tvalid_d1),
        .I4(tlast_d1),
        .I5(m_axis_tready),
        .O(\m_axis_tuser[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    \m_axis_tuser[0]_i_3 
       (.I0(fsync_vc1_int_reg),
        .I1(fsync_vc0_int_reg),
        .I2(fsync_vc3_int_reg),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(fsync_vc2_int_reg),
        .O(\m_axis_tuser[0]_i_3_n_0 ));
  FDRE \m_axis_tuser_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\m_axis_tuser[0]_i_1_n_0 ),
        .Q(m_axis_tuser[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000CCCCC08080808)) 
    m_axis_tvalid_i_1
       (.I0(m_axis_tvalid1_in),
        .I1(m_axis_aresetn),
        .I2(m_axis_tvalid_i_3_n_0),
        .I3(m_axis_tlast),
        .I4(m_axis_tready),
        .I5(m_axis_tvalid),
        .O(m_axis_tvalid_i_1_n_0));
  LUT6 #(
    .INIT(64'h0200000000000033)) 
    m_axis_tvalid_i_2
       (.I0(strm_prgrs_reg_i_1_n_0),
        .I1(m_axis_tvalid_i_3_n_0),
        .I2(p_0_in[0]),
        .I3(p_0_in[2]),
        .I4(p_0_in[3]),
        .I5(p_0_in[1]),
        .O(m_axis_tvalid1_in));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'h1)) 
    m_axis_tvalid_i_3
       (.I0(pend_data),
        .I1(mem_rvld),
        .O(m_axis_tvalid_i_3_n_0));
  FDRE m_axis_tvalid_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tvalid_i_1_n_0),
        .Q(m_axis_tvalid),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \mem_rdata_r[67]_i_1 
       (.I0(m_axis_tready),
        .I1(m_axis_tvalid),
        .O(\mem_rdata_r[67]_i_1_n_0 ));
  FDRE \mem_rdata_r_reg[0] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[0]),
        .Q(\mem_rdata_r_reg_n_0_[0] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[10] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[10]),
        .Q(mem_wc[2]),
        .R(SR));
  FDRE \mem_rdata_r_reg[11] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[11]),
        .Q(mem_wc[3]),
        .R(SR));
  FDRE \mem_rdata_r_reg[12] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[12]),
        .Q(mem_wc[4]),
        .R(SR));
  FDRE \mem_rdata_r_reg[13] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[13]),
        .Q(mem_wc[5]),
        .R(SR));
  FDRE \mem_rdata_r_reg[14] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[14]),
        .Q(mem_wc[6]),
        .R(SR));
  FDRE \mem_rdata_r_reg[15] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[15]),
        .Q(mem_wc[7]),
        .R(SR));
  FDRE \mem_rdata_r_reg[16] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[16]),
        .Q(mem_wc[8]),
        .R(SR));
  FDRE \mem_rdata_r_reg[17] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[17]),
        .Q(mem_wc[9]),
        .R(SR));
  FDRE \mem_rdata_r_reg[18] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[18]),
        .Q(mem_wc[10]),
        .R(SR));
  FDRE \mem_rdata_r_reg[19] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[19]),
        .Q(mem_wc[11]),
        .R(SR));
  FDRE \mem_rdata_r_reg[1] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[1]),
        .Q(\mem_rdata_r_reg_n_0_[1] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[20] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[20]),
        .Q(mem_wc[12]),
        .R(SR));
  FDRE \mem_rdata_r_reg[21] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[21]),
        .Q(mem_wc[13]),
        .R(SR));
  FDRE \mem_rdata_r_reg[22] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[22]),
        .Q(mem_wc[14]),
        .R(SR));
  FDRE \mem_rdata_r_reg[23] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[23]),
        .Q(mem_wc[15]),
        .R(SR));
  FDRE \mem_rdata_r_reg[24] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[24]),
        .Q(\mem_rdata_r_reg_n_0_[24] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[25] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[25]),
        .Q(\mem_rdata_r_reg_n_0_[25] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[26] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[26]),
        .Q(\mem_rdata_r_reg_n_0_[26] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[27] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[27]),
        .Q(\mem_rdata_r_reg_n_0_[27] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[28] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[28]),
        .Q(\mem_rdata_r_reg_n_0_[28] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[29] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[29]),
        .Q(\mem_rdata_r_reg_n_0_[29] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[2] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[2]),
        .Q(\mem_rdata_r_reg_n_0_[2] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[30] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[30]),
        .Q(\mem_rdata_r_reg_n_0_[30] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[31] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[31]),
        .Q(\mem_rdata_r_reg_n_0_[31] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[32] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[32]),
        .Q(\mem_rdata_r_reg_n_0_[32] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[33] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[33]),
        .Q(\mem_rdata_r_reg_n_0_[33] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[34] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[34]),
        .Q(\mem_rdata_r_reg_n_0_[34] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[35] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[35]),
        .Q(\mem_rdata_r_reg_n_0_[35] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[36] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[36]),
        .Q(\mem_rdata_r_reg_n_0_[36] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[37] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[37]),
        .Q(\mem_rdata_r_reg_n_0_[37] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[38] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[38]),
        .Q(\mem_rdata_r_reg_n_0_[38] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[39] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[39]),
        .Q(\mem_rdata_r_reg_n_0_[39] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[3] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[3]),
        .Q(\mem_rdata_r_reg_n_0_[3] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[40] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[40]),
        .Q(\mem_rdata_r_reg_n_0_[40] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[41] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[41]),
        .Q(\mem_rdata_r_reg_n_0_[41] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[42] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[42]),
        .Q(\mem_rdata_r_reg_n_0_[42] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[43] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[43]),
        .Q(\mem_rdata_r_reg_n_0_[43] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[44] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[44]),
        .Q(\mem_rdata_r_reg_n_0_[44] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[45] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[45]),
        .Q(\mem_rdata_r_reg_n_0_[45] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[46] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[46]),
        .Q(\mem_rdata_r_reg_n_0_[46] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[47] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[47]),
        .Q(\mem_rdata_r_reg_n_0_[47] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[48] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[48]),
        .Q(\mem_rdata_r_reg_n_0_[48] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[49] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[49]),
        .Q(\mem_rdata_r_reg_n_0_[49] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[4] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[4]),
        .Q(\mem_rdata_r_reg_n_0_[4] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[50] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[50]),
        .Q(\mem_rdata_r_reg_n_0_[50] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[51] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[51]),
        .Q(\mem_rdata_r_reg_n_0_[51] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[52] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[52]),
        .Q(\mem_rdata_r_reg_n_0_[52] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[53] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[53]),
        .Q(\mem_rdata_r_reg_n_0_[53] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[54] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[54]),
        .Q(\mem_rdata_r_reg_n_0_[54] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[55] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[55]),
        .Q(\mem_rdata_r_reg_n_0_[55] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[56] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[56]),
        .Q(\mem_rdata_r_reg_n_0_[56] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[57] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[57]),
        .Q(\mem_rdata_r_reg_n_0_[57] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[58] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[58]),
        .Q(\mem_rdata_r_reg_n_0_[58] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[59] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[59]),
        .Q(\mem_rdata_r_reg_n_0_[59] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[5] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[5]),
        .Q(\mem_rdata_r_reg_n_0_[5] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[60] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[60]),
        .Q(\mem_rdata_r_reg_n_0_[60] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[61] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[61]),
        .Q(\mem_rdata_r_reg_n_0_[61] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[62] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[62]),
        .Q(\mem_rdata_r_reg_n_0_[62] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[63] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[63]),
        .Q(\mem_rdata_r_reg_n_0_[63] ),
        .R(SR));
  FDRE \mem_rdata_r_reg[64] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[64]),
        .Q(p_0_in[0]),
        .R(SR));
  FDRE \mem_rdata_r_reg[65] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[65]),
        .Q(p_0_in[1]),
        .R(SR));
  FDRE \mem_rdata_r_reg[66] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[66]),
        .Q(p_0_in[2]),
        .R(SR));
  FDRE \mem_rdata_r_reg[67] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[67]),
        .Q(p_0_in[3]),
        .R(SR));
  FDRE \mem_rdata_r_reg[6] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[6]),
        .Q(mem_vc[0]),
        .R(SR));
  FDRE \mem_rdata_r_reg[7] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[7]),
        .Q(mem_vc[1]),
        .R(SR));
  FDRE \mem_rdata_r_reg[8] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[8]),
        .Q(mem_wc[0]),
        .R(SR));
  FDRE \mem_rdata_r_reg[9] 
       (.C(m_axis_aclk),
        .CE(\mem_rdata_r[67]_i_1_n_0 ),
        .D(mem_rdata[9]),
        .Q(mem_wc[1]),
        .R(SR));
  FDRE mem_rvld_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(rd_en),
        .Q(mem_rvld),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT4 #(
    .INIT(16'h0CEC)) 
    pend_data_i_1
       (.I0(mem_rvld),
        .I1(pend_data),
        .I2(m_axis_tvalid),
        .I3(m_axis_tready),
        .O(pend_data_i_1_n_0));
  FDRE pend_data_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pend_data_i_1_n_0),
        .Q(pend_data),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'h00AE)) 
    strm_prgrs_reg_i_1
       (.I0(strm_prgrs_reg),
        .I1(m_axis_tvalid),
        .I2(tvalid_d1),
        .I3(tlast_d1),
        .O(strm_prgrs_reg_i_1_n_0));
  FDRE strm_prgrs_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(strm_prgrs_reg_i_1_n_0),
        .Q(strm_prgrs_reg),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'h80)) 
    tlast_d1_i_1
       (.I0(m_axis_tlast),
        .I1(m_axis_tready),
        .I2(m_axis_tvalid),
        .O(axis_last_beat));
  FDRE tlast_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(axis_last_beat),
        .Q(tlast_d1),
        .R(SR));
  FDRE tvalid_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tvalid),
        .Q(tvalid_d1),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr_21
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr_30
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr_39
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr__parameterized0
   (Q,
    ram_empty_fb_i_reg,
    \src_gray_ff_reg[4] ,
    WR_PNTR_RD,
    E,
    rd_clk,
    AR);
  output [4:0]Q;
  output ram_empty_fb_i_reg;
  output [4:0]\src_gray_ff_reg[4] ;
  input [2:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [4:0]Q;
  wire [2:0]WR_PNTR_RD;
  wire [4:0]plusOp;
  wire ram_empty_fb_i_reg;
  wire rd_clk;
  wire [4:0]\src_gray_ff_reg[4] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(Q[4]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(\src_gray_ff_reg[4] [2]),
        .I1(WR_PNTR_RD[2]),
        .I2(\src_gray_ff_reg[4] [1]),
        .I3(WR_PNTR_RD[1]),
        .I4(WR_PNTR_RD[0]),
        .I5(\src_gray_ff_reg[4] [0]),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr__parameterized0_12
   (Q,
    ram_empty_fb_i_reg,
    \src_gray_ff_reg[4] ,
    WR_PNTR_RD,
    E,
    rd_clk,
    AR);
  output [4:0]Q;
  output ram_empty_fb_i_reg;
  output [4:0]\src_gray_ff_reg[4] ;
  input [2:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [4:0]Q;
  wire [2:0]WR_PNTR_RD;
  wire [4:0]plusOp;
  wire ram_empty_fb_i_reg;
  wire rd_clk;
  wire [4:0]\src_gray_ff_reg[4] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(Q[4]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(\src_gray_ff_reg[4] [2]),
        .I1(WR_PNTR_RD[2]),
        .I2(\src_gray_ff_reg[4] [1]),
        .I3(WR_PNTR_RD[1]),
        .I4(WR_PNTR_RD[0]),
        .I5(\src_gray_ff_reg[4] [0]),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_bf15_rx_0_rd_bin_cntr__parameterized1
   (Q,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    srst_full_ff_i,
    E,
    clk);
  output [11:0]Q;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input srst_full_ff_i;
  input [0:0]E;
  input clk;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [11:0]Q;
  wire clk;
  wire [11:0]plusOp__0;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire srst_full_ff_i;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_DI_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_S_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(Q[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(Q[11]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(Q[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(Q[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(srst_full_ff_i));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[10]),
        .Q(Q[10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[11]),
        .Q(Q[11]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(Q[8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[9]),
        .Q(Q[9]),
        .R(srst_full_ff_i));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(Q[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S(Q[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({NLW_plusOp_carry__0_DI_UNCONNECTED[7:3],1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({NLW_plusOp_carry__0_S_UNCONNECTED[7:3],Q[11:9]}));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_bf15_rx_0_rd_fwft
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    clk,
    AR,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  input clk;
  input [0:0]AR;
  input rd_en;
  input out;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_bf15_rx_0_rd_fwft_19
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    clk,
    AR,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  input clk;
  input [0:0]AR;
  input rd_en;
  input out;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_bf15_rx_0_rd_fwft_28
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    clk,
    AR,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  input clk;
  input [0:0]AR;
  input rd_en;
  input out;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_bf15_rx_0_rd_fwft_37
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    clk,
    AR,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  input clk;
  input [0:0]AR;
  input rd_en;
  input out;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AR),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(AR),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AR),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_bf15_rx_0_rd_fwft__parameterized0
   (empty,
    out,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ,
    tmp_ram_regout_en,
    E,
    tmp_ram_rd_en,
    \gc0.count_reg[11] ,
    srst_full_ff_i,
    clk,
    ram_full_fb_i_reg,
    wr_en,
    rd_en,
    ram_empty_fb_i_reg,
    wr_rst_reg_reg,
    srst);
  output empty;
  output out;
  output \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  output tmp_ram_regout_en;
  output [0:0]E;
  output tmp_ram_rd_en;
  output [0:0]\gc0.count_reg[11] ;
  input srst_full_ff_i;
  input clk;
  input ram_full_fb_i_reg;
  input wr_en;
  input rd_en;
  input ram_empty_fb_i_reg;
  input wr_rst_reg_reg;
  input srst;

  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0__2;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i_reg0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0__1;
  wire [0:0]\gc0.count_reg[11] ;
  wire \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  wire [1:0]next_fwft_state;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  (* DONT_TOUCH *) wire user_valid;
  wire wr_en;
  wire wr_rst_reg_reg;

  assign empty = empty_fwft_i;
  assign out = user_valid;
  LUT6 #(
    .INIT(64'hEFEEEFEFEFEFEFEF)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(wr_rst_reg_reg),
        .I1(srst),
        .I2(ram_empty_fb_i_reg),
        .I3(rd_en),
        .I4(curr_fwft_state[1]),
        .I5(curr_fwft_state[0]),
        .O(tmp_ram_rd_en));
  LUT5 #(
    .INIT(32'hFFFFFFB0)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(wr_rst_reg_reg),
        .I4(srst),
        .O(tmp_ram_regout_en));
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_fb_i_reg),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0__2));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_fb_i),
        .S(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_i),
        .S(srst_full_ff_i));
  LUT4 #(
    .INIT(16'h8788)) 
    \count[12]_i_1 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(ram_full_fb_i_reg),
        .I3(wr_en),
        .O(E));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0__1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_fb_i),
        .S(srst_full_ff_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i_reg0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i_reg0),
        .Q(empty_fwft_fb_o_i),
        .S(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_i),
        .S(srst_full_ff_i));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]),
        .R(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]),
        .R(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(user_valid),
        .R(srst_full_ff_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \greg.ram_rd_en_i_i_1 
       (.I0(ram_empty_fb_i_reg),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_reg[11] ));
  LUT6 #(
    .INIT(64'h4444444400004000)) 
    plusOp_carry_i_1
       (.I0(ram_full_fb_i_reg),
        .I1(wr_en),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(rd_en),
        .I5(ram_empty_fb_i_reg),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic
   (out,
    empty,
    E,
    Q,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    \gpr1.dout_i_reg[1] ,
    ram_empty_fb_i_reg,
    clk,
    AR,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_empty_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire rd_en;

  bd_bf15_rx_0_rd_fwft \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .out(out),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_status_flags_ss \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(out),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg));
  bd_bf15_rx_0_rd_bin_cntr rpntr
       (.AR(AR),
        .E(\gc0.count_reg[3] ),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic_13
   (out,
    empty,
    E,
    Q,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    \gpr1.dout_i_reg[1] ,
    ram_empty_fb_i_reg,
    clk,
    AR,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_empty_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire rd_en;

  bd_bf15_rx_0_rd_fwft_19 \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .out(out),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_status_flags_ss_20 \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(out),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg));
  bd_bf15_rx_0_rd_bin_cntr_21 rpntr
       (.AR(AR),
        .E(\gc0.count_reg[3] ),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic_22
   (out,
    empty,
    E,
    Q,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    \gpr1.dout_i_reg[1] ,
    ram_empty_fb_i_reg,
    clk,
    AR,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_empty_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire rd_en;

  bd_bf15_rx_0_rd_fwft_28 \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .out(out),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_status_flags_ss_29 \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(out),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg));
  bd_bf15_rx_0_rd_bin_cntr_30 rpntr
       (.AR(AR),
        .E(\gc0.count_reg[3] ),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic_31
   (out,
    empty,
    E,
    Q,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_reg[3] ,
    \gpr1.dout_i_reg[1] ,
    ram_empty_fb_i_reg,
    clk,
    AR,
    rd_en);
  output out;
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_reg[3] ;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_empty_fb_i_reg;
  input clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [0:0]\gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire out;
  wire ram_empty_fb_i_reg;
  wire rd_en;

  bd_bf15_rx_0_rd_fwft_37 \gr1.gr1_int.rfwft 
       (.AR(AR),
        .E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .out(out),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_status_flags_ss_38 \grss.rsts 
       (.AR(AR),
        .clk(clk),
        .out(out),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg));
  bd_bf15_rx_0_rd_bin_cntr_39 rpntr
       (.AR(AR),
        .E(\gc0.count_reg[3] ),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic__parameterized0
   (empty,
    E,
    Q,
    ram_empty_fb_i_reg,
    \src_gray_ff_reg[4] ,
    ram_empty_fb_i_reg_0,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    AR,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output ram_empty_fb_i_reg;
  output [4:0]\src_gray_ff_reg[4] ;
  output ram_empty_fb_i_reg_0;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input [3:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[0] ;
  wire empty;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire rd_clk;
  wire rd_en;
  wire [4:4]rd_pntr_plus1;
  wire [4:0]\src_gray_ff_reg[4] ;

  bd_bf15_rx_0_rd_status_flags_as \gras.rsts 
       (.AR(AR),
        .E(E),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(WR_PNTR_RD[3]),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .empty(empty),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_bin_cntr__parameterized0 rpntr
       (.AR(AR),
        .E(E),
        .Q({rd_pntr_plus1,Q}),
        .WR_PNTR_RD(WR_PNTR_RD[2:0]),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_clk(rd_clk),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic__parameterized0_7
   (empty,
    E,
    Q,
    ram_empty_fb_i_reg,
    \src_gray_ff_reg[4] ,
    ram_empty_fb_i_reg_0,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    AR,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output [3:0]Q;
  output ram_empty_fb_i_reg;
  output [4:0]\src_gray_ff_reg[4] ;
  output ram_empty_fb_i_reg_0;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input [3:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[0] ;
  wire empty;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire rd_clk;
  wire rd_en;
  wire [4:4]rd_pntr_plus1;
  wire [4:0]\src_gray_ff_reg[4] ;

  bd_bf15_rx_0_rd_status_flags_as_11 \gras.rsts 
       (.AR(AR),
        .E(E),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(WR_PNTR_RD[3]),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .empty(empty),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  bd_bf15_rx_0_rd_bin_cntr__parameterized0_12 rpntr
       (.AR(AR),
        .E(E),
        .Q({rd_pntr_plus1,Q}),
        .WR_PNTR_RD(WR_PNTR_RD[2:0]),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_clk(rd_clk),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_bf15_rx_0_rd_logic__parameterized1
   (empty,
    Q,
    \count_reg[12] ,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ,
    tmp_ram_regout_en,
    tmp_ram_rd_en,
    p_7_out,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \gcc0.gc1.gsym.count_d2_reg[0] ,
    \gcc0.gc1.gsym.count_d2_reg[2] ,
    \gcc0.gc1.gsym.count_d2_reg[4] ,
    \gcc0.gc1.gsym.count_d2_reg[6] ,
    \gcc0.gc1.gsym.count_d2_reg[8] ,
    \gcc0.gc1.gsym.count_d2_reg[10] ,
    v1_reg,
    srst_full_ff_i,
    clk,
    rd_en,
    out,
    wr_en,
    wr_rst_reg_reg,
    srst);
  output empty;
  output [11:0]Q;
  output [11:0]\count_reg[12] ;
  output \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  output tmp_ram_regout_en;
  output tmp_ram_rd_en;
  output p_7_out;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input \gcc0.gc1.gsym.count_d2_reg[0] ;
  input \gcc0.gc1.gsym.count_d2_reg[2] ;
  input \gcc0.gc1.gsym.count_d2_reg[4] ;
  input \gcc0.gc1.gsym.count_d2_reg[6] ;
  input \gcc0.gc1.gsym.count_d2_reg[8] ;
  input \gcc0.gc1.gsym.count_d2_reg[10] ;
  input [5:0]v1_reg;
  input srst_full_ff_i;
  input clk;
  input rd_en;
  input out;
  input wr_en;
  input wr_rst_reg_reg;
  input srst;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [11:0]Q;
  wire clk;
  wire cntr_en;
  wire [11:0]\count_reg[12] ;
  wire empty;
  wire \gcc0.gc1.gsym.count_d2_reg[0] ;
  wire \gcc0.gc1.gsym.count_d2_reg[10] ;
  wire \gcc0.gc1.gsym.count_d2_reg[2] ;
  wire \gcc0.gc1.gsym.count_d2_reg[4] ;
  wire \gcc0.gc1.gsym.count_d2_reg[6] ;
  wire \gcc0.gc1.gsym.count_d2_reg[8] ;
  wire \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire p_7_out;
  wire rd_en;
  wire srst;
  wire srst_full_ff_i;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire [5:0]v1_reg;
  wire wr_en;
  wire wr_rst_reg_reg;

  bd_bf15_rx_0_dc_ss_fwft \gr1.gdcf.dc 
       (.E(cntr_en),
        .Q(\count_reg[12] ),
        .clk(clk),
        .out(p_3_out),
        .rd_en(rd_en),
        .srst_full_ff_i(srst_full_ff_i));
  bd_bf15_rx_0_rd_fwft__parameterized0 \gr1.gr1_int.rfwft 
       (.E(cntr_en),
        .clk(clk),
        .empty(empty),
        .\gc0.count_reg[11] (p_7_out),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] (\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ),
        .out(p_3_out),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_full_fb_i_reg(out),
        .rd_en(rd_en),
        .srst(srst),
        .srst_full_ff_i(srst_full_ff_i),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en),
        .wr_en(wr_en),
        .wr_rst_reg_reg(wr_rst_reg_reg));
  bd_bf15_rx_0_rd_status_flags_ss__parameterized0 \grss.rsts 
       (.E(p_7_out),
        .clk(clk),
        .\gcc0.gc1.gsym.count_d2_reg[0] (\gcc0.gc1.gsym.count_d2_reg[0] ),
        .\gcc0.gc1.gsym.count_d2_reg[10] (\gcc0.gc1.gsym.count_d2_reg[10] ),
        .\gcc0.gc1.gsym.count_d2_reg[2] (\gcc0.gc1.gsym.count_d2_reg[2] ),
        .\gcc0.gc1.gsym.count_d2_reg[4] (\gcc0.gc1.gsym.count_d2_reg[4] ),
        .\gcc0.gc1.gsym.count_d2_reg[6] (\gcc0.gc1.gsym.count_d2_reg[6] ),
        .\gcc0.gc1.gsym.count_d2_reg[8] (\gcc0.gc1.gsym.count_d2_reg[8] ),
        .out(p_2_out),
        .ram_full_fb_i_reg(out),
        .srst_full_ff_i(srst_full_ff_i),
        .v1_reg(v1_reg),
        .wr_en(wr_en));
  bd_bf15_rx_0_rd_bin_cntr__parameterized1 rpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .E(p_7_out),
        .Q(Q),
        .clk(clk),
        .srst_full_ff_i(srst_full_ff_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module bd_bf15_rx_0_rd_status_flags_as
   (empty,
    E,
    ram_empty_fb_i_reg_0,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    AR,
    rd_en,
    Q,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output ram_empty_fb_i_reg_0;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input [0:0]Q;
  input [0:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[0] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gpr1.dout_i[23]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_empty_i_i_3
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(Q),
        .I3(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module bd_bf15_rx_0_rd_status_flags_as_11
   (empty,
    E,
    ram_empty_fb_i_reg_0,
    \dest_out_bin_ff_reg[0] ,
    rd_clk,
    AR,
    rd_en,
    Q,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output ram_empty_fb_i_reg_0;
  input \dest_out_bin_ff_reg[0] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input [0:0]Q;
  input [0:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[0] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gpr1.dout_i[41]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_empty_i_i_3
       (.I0(ram_empty_fb_i),
        .I1(rd_en),
        .I2(Q),
        .I3(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[0] ),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_bf15_rx_0_rd_status_flags_ss
   (out,
    ram_empty_fb_i_reg_0,
    clk,
    AR);
  output out;
  input ram_empty_fb_i_reg_0;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_bf15_rx_0_rd_status_flags_ss_20
   (out,
    ram_empty_fb_i_reg_0,
    clk,
    AR);
  output out;
  input ram_empty_fb_i_reg_0;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_bf15_rx_0_rd_status_flags_ss_29
   (out,
    ram_empty_fb_i_reg_0,
    clk,
    AR);
  output out;
  input ram_empty_fb_i_reg_0;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_bf15_rx_0_rd_status_flags_ss_38
   (out,
    ram_empty_fb_i_reg_0,
    clk,
    AR);
  output out;
  input ram_empty_fb_i_reg_0;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire clk;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_bf15_rx_0_rd_status_flags_ss__parameterized0
   (out,
    \gcc0.gc1.gsym.count_d2_reg[0] ,
    \gcc0.gc1.gsym.count_d2_reg[2] ,
    \gcc0.gc1.gsym.count_d2_reg[4] ,
    \gcc0.gc1.gsym.count_d2_reg[6] ,
    \gcc0.gc1.gsym.count_d2_reg[8] ,
    \gcc0.gc1.gsym.count_d2_reg[10] ,
    v1_reg,
    srst_full_ff_i,
    clk,
    E,
    wr_en,
    ram_full_fb_i_reg);
  output out;
  input \gcc0.gc1.gsym.count_d2_reg[0] ;
  input \gcc0.gc1.gsym.count_d2_reg[2] ;
  input \gcc0.gc1.gsym.count_d2_reg[4] ;
  input \gcc0.gc1.gsym.count_d2_reg[6] ;
  input \gcc0.gc1.gsym.count_d2_reg[8] ;
  input \gcc0.gc1.gsym.count_d2_reg[10] ;
  input [5:0]v1_reg;
  input srst_full_ff_i;
  input clk;
  input [0:0]E;
  input wr_en;
  input ram_full_fb_i_reg;

  wire [0:0]E;
  wire c1_n_0;
  wire clk;
  wire comp1;
  wire \gcc0.gc1.gsym.count_d2_reg[0] ;
  wire \gcc0.gc1.gsym.count_d2_reg[10] ;
  wire \gcc0.gc1.gsym.count_d2_reg[2] ;
  wire \gcc0.gc1.gsym.count_d2_reg[4] ;
  wire \gcc0.gc1.gsym.count_d2_reg[6] ;
  wire \gcc0.gc1.gsym.count_d2_reg[8] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire srst_full_ff_i;
  wire [5:0]v1_reg;
  wire wr_en;

  assign out = ram_empty_fb_i;
  bd_bf15_rx_0_compare__parameterized1_5 c1
       (.E(E),
        .comp1(comp1),
        .\gcc0.gc1.gsym.count_d2_reg[0] (\gcc0.gc1.gsym.count_d2_reg[0] ),
        .\gcc0.gc1.gsym.count_d2_reg[10] (\gcc0.gc1.gsym.count_d2_reg[10] ),
        .\gcc0.gc1.gsym.count_d2_reg[2] (\gcc0.gc1.gsym.count_d2_reg[2] ),
        .\gcc0.gc1.gsym.count_d2_reg[4] (\gcc0.gc1.gsym.count_d2_reg[4] ),
        .\gcc0.gc1.gsym.count_d2_reg[6] (\gcc0.gc1.gsym.count_d2_reg[6] ),
        .\gcc0.gc1.gsym.count_d2_reg[8] (\gcc0.gc1.gsym.count_d2_reg[8] ),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c1_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .wr_en(wr_en));
  bd_bf15_rx_0_compare__parameterized1_6 c2
       (.comp1(comp1),
        .v1_reg(v1_reg));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_fb_i),
        .S(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_0),
        .Q(ram_empty_i),
        .S(srst_full_ff_i));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[1]),
        .I2(sckt_wr_rst_cc[0]),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__8 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[3]),
        .I1(sckt_wr_rst_cc[2]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__parameterized0
   (AR,
    \syncstages_ff_reg[0] ,
    wr_rst_busy,
    rst,
    wr_clk,
    rd_clk);
  output [0:0]AR;
  output [0:0]\syncstages_ff_reg[0] ;
  output wr_rst_busy;
  input rst;
  input wr_clk;
  input rd_clk;

  wire [0:0]AR;
  wire dest_out;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire sckt_rd_rst_wr;
  wire [0:0]\syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy;
  wire [1:0]wr_rst_rd_ext;

  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rst_rd_reg2_inst 
       (.dest_arst(rst_rd_reg2),
        .dest_clk(rd_clk),
        .src_arst(rst));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(wr_rst_rd_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(\syncstages_ff_reg[0] ));
  LUT3 #(
    .INIT(8'h8A)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(AR),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(AR));
  LUT5 #(
    .INIT(32'hAA20AAAA)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(wr_rst_busy),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_busy));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized0 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized0__4 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(AR));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__11 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(wr_clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__parameterized0__xdcDup__1
   (AR,
    \syncstages_ff_reg[0] ,
    wr_rst_busy,
    rst,
    wr_clk,
    rd_clk);
  output [0:0]AR;
  output [0:0]\syncstages_ff_reg[0] ;
  output wr_rst_busy;
  input rst;
  input wr_clk;
  input rd_clk;

  wire [0:0]AR;
  wire dest_out;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire sckt_rd_rst_wr;
  wire [0:0]\syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy;
  wire [1:0]wr_rst_rd_ext;

  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__10 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rst_rd_reg2_inst 
       (.dest_arst(rst_rd_reg2),
        .dest_clk(rd_clk),
        .src_arst(rst));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(wr_rst_rd_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(\syncstages_ff_reg[0] ));
  LUT3 #(
    .INIT(8'h8A)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(AR),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(AR));
  LUT5 #(
    .INIT(32'hAA20AAAA)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(wr_rst_busy),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .I3(rd_rst_wr_ext[2]),
        .I4(rd_rst_wr_ext[3]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_busy));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized0__3 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_single__parameterized0__2 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(AR));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__9 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(wr_clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__parameterized1
   (wr_rst_reg_reg,
    srst_full_ff_i,
    srst,
    clk);
  output wr_rst_reg_reg;
  output srst_full_ff_i;
  input srst;
  input clk;

  wire clk;
  wire srst;
  wire srst_full_ff_i;
  wire wr_rst_reg_reg;

  bd_bf15_rx_0_bram_fifo_rstlogic \g8serrst.usrst_inst 
       (.clk(clk),
        .srst(srst),
        .srst_full_ff_i(srst_full_ff_i),
        .wr_rst_reg_reg_0(wr_rst_reg_reg));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__1
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[1]),
        .I2(sckt_wr_rst_cc[0]),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__5 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[3]),
        .I1(sckt_wr_rst_cc[2]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__2
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[1]),
        .I2(sckt_wr_rst_cc[0]),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__6 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[3]),
        .I1(sckt_wr_rst_cc[2]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_bf15_rx_0_reset_blk_ramfifo__xdcDup__3
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(rst_wr_reg2),
        .I1(sckt_wr_rst_cc[1]),
        .I2(sckt_wr_rst_cc[0]),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_bf15_rx_0_xpm_cdc_async_rst__7 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[3]),
        .I1(sckt_wr_rst_cc[2]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module bd_bf15_rx_0_updn_cntr
   (Q,
    out,
    rd_en,
    srst_full_ff_i,
    E,
    clk);
  output [11:0]Q;
  input out;
  input rd_en;
  input srst_full_ff_i;
  input [0:0]E;
  input clk;

  wire [0:0]E;
  wire [11:0]Q;
  wire clk;
  wire \count[0]_i_1_n_0 ;
  wire \count[12]_i_3_n_0 ;
  wire \count[12]_i_4_n_0 ;
  wire \count[12]_i_5_n_0 ;
  wire \count[12]_i_6_n_0 ;
  wire \count[8]_i_10_n_0 ;
  wire \count[8]_i_2_n_0 ;
  wire \count[8]_i_3_n_0 ;
  wire \count[8]_i_4_n_0 ;
  wire \count[8]_i_5_n_0 ;
  wire \count[8]_i_6_n_0 ;
  wire \count[8]_i_7_n_0 ;
  wire \count[8]_i_8_n_0 ;
  wire \count[8]_i_9_n_0 ;
  wire \count_reg[12]_i_2_n_12 ;
  wire \count_reg[12]_i_2_n_13 ;
  wire \count_reg[12]_i_2_n_14 ;
  wire \count_reg[12]_i_2_n_15 ;
  wire \count_reg[12]_i_2_n_5 ;
  wire \count_reg[12]_i_2_n_6 ;
  wire \count_reg[12]_i_2_n_7 ;
  wire \count_reg[8]_i_1_n_0 ;
  wire \count_reg[8]_i_1_n_1 ;
  wire \count_reg[8]_i_1_n_10 ;
  wire \count_reg[8]_i_1_n_11 ;
  wire \count_reg[8]_i_1_n_12 ;
  wire \count_reg[8]_i_1_n_13 ;
  wire \count_reg[8]_i_1_n_14 ;
  wire \count_reg[8]_i_1_n_15 ;
  wire \count_reg[8]_i_1_n_2 ;
  wire \count_reg[8]_i_1_n_3 ;
  wire \count_reg[8]_i_1_n_5 ;
  wire \count_reg[8]_i_1_n_6 ;
  wire \count_reg[8]_i_1_n_7 ;
  wire \count_reg[8]_i_1_n_8 ;
  wire \count_reg[8]_i_1_n_9 ;
  wire \count_reg_n_0_[0] ;
  wire out;
  wire rd_en;
  wire srst_full_ff_i;
  wire [7:3]\NLW_count_reg[12]_i_2_CO_UNCONNECTED ;
  wire [7:4]\NLW_count_reg[12]_i_2_DI_UNCONNECTED ;
  wire [7:4]\NLW_count_reg[12]_i_2_O_UNCONNECTED ;
  wire [7:4]\NLW_count_reg[12]_i_2_S_UNCONNECTED ;
  wire [3:3]\NLW_count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count[0]_i_1 
       (.I0(\count_reg_n_0_[0] ),
        .O(\count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[12]_i_3 
       (.I0(Q[10]),
        .I1(Q[11]),
        .O(\count[12]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[12]_i_4 
       (.I0(Q[9]),
        .I1(Q[10]),
        .O(\count[12]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[12]_i_5 
       (.I0(Q[8]),
        .I1(Q[9]),
        .O(\count[12]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[12]_i_6 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\count[12]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h6A)) 
    \count[8]_i_10 
       (.I0(Q[0]),
        .I1(out),
        .I2(rd_en),
        .O(\count[8]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \count[8]_i_2 
       (.I0(Q[0]),
        .O(\count[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_3 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\count[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_4 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\count[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_5 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\count[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_6 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\count[8]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_7 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\count[8]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_8 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\count[8]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \count[8]_i_9 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\count[8]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\count[0]_i_1_n_0 ),
        .Q(\count_reg_n_0_[0] ),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[12]_i_2_n_14 ),
        .Q(Q[9]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[12]_i_2_n_13 ),
        .Q(Q[10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[12] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[12]_i_2_n_12 ),
        .Q(Q[11]),
        .R(srst_full_ff_i));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[12]_i_2 
       (.CI(\count_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_count_reg[12]_i_2_CO_UNCONNECTED [7:3],\count_reg[12]_i_2_n_5 ,\count_reg[12]_i_2_n_6 ,\count_reg[12]_i_2_n_7 }),
        .DI({\NLW_count_reg[12]_i_2_DI_UNCONNECTED [7:4],1'b0,Q[9:7]}),
        .O({\NLW_count_reg[12]_i_2_O_UNCONNECTED [7:4],\count_reg[12]_i_2_n_12 ,\count_reg[12]_i_2_n_13 ,\count_reg[12]_i_2_n_14 ,\count_reg[12]_i_2_n_15 }),
        .S({\NLW_count_reg[12]_i_2_S_UNCONNECTED [7:4],\count[12]_i_3_n_0 ,\count[12]_i_4_n_0 ,\count[12]_i_5_n_0 ,\count[12]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_15 ),
        .Q(Q[0]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_14 ),
        .Q(Q[1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_13 ),
        .Q(Q[2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_12 ),
        .Q(Q[3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_11 ),
        .Q(Q[4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_10 ),
        .Q(Q[5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_9 ),
        .Q(Q[6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[8]_i_1_n_8 ),
        .Q(Q[7]),
        .R(srst_full_ff_i));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 \count_reg[8]_i_1 
       (.CI(\count_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({\count_reg[8]_i_1_n_0 ,\count_reg[8]_i_1_n_1 ,\count_reg[8]_i_1_n_2 ,\count_reg[8]_i_1_n_3 ,\NLW_count_reg[8]_i_1_CO_UNCONNECTED [3],\count_reg[8]_i_1_n_5 ,\count_reg[8]_i_1_n_6 ,\count_reg[8]_i_1_n_7 }),
        .DI({Q[6:0],\count[8]_i_2_n_0 }),
        .O({\count_reg[8]_i_1_n_8 ,\count_reg[8]_i_1_n_9 ,\count_reg[8]_i_1_n_10 ,\count_reg[8]_i_1_n_11 ,\count_reg[8]_i_1_n_12 ,\count_reg[8]_i_1_n_13 ,\count_reg[8]_i_1_n_14 ,\count_reg[8]_i_1_n_15 }),
        .S({\count[8]_i_3_n_0 ,\count[8]_i_4_n_0 ,\count[8]_i_5_n_0 ,\count[8]_i_6_n_0 ,\count[8]_i_7_n_0 ,\count[8]_i_8_n_0 ,\count[8]_i_9_n_0 ,\count[8]_i_10_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(\count_reg[12]_i_2_n_15 ),
        .Q(Q[8]),
        .R(srst_full_ff_i));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr
   (ram_empty_i_reg,
    ram_full_comb,
    Q,
    out,
    wr_en,
    ram_full_fb_i_reg,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    E,
    clk,
    AS);
  output ram_empty_i_reg;
  output ram_full_comb;
  output [3:0]Q;
  input out;
  input wr_en;
  input ram_full_fb_i_reg;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts/comp0 ;
  wire \gwss.wsts/comp1 ;
  wire out;
  wire [3:0]p_13_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_3_n_0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_reg;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  LUT5 #(
    .INIT(32'hFCFC44FC)) 
    ram_empty_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(out),
        .I2(ram_empty_fb_i_i_3_n_0),
        .I3(wr_en),
        .I4(ram_full_fb_i_reg),
        .O(ram_empty_i_reg));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_empty_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(Q[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(Q[2]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\gwss.wsts/comp0 ));
  LUT6 #(
    .INIT(64'h4100004100000000)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_5_n_0),
        .I1(Q[2]),
        .I2(\gc0.count_reg[3] [2]),
        .I3(Q[3]),
        .I4(\gc0.count_reg[3] [3]),
        .I5(ram_empty_fb_i_reg),
        .O(ram_empty_fb_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_4
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_5
       (.I0(Q[1]),
        .I1(\gc0.count_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[3] [0]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h5500FFC0)) 
    ram_full_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(wr_en),
        .I2(\gwss.wsts/comp1 ),
        .I3(ram_full_fb_i_reg),
        .I4(ram_empty_fb_i_reg),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(p_13_out[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(p_13_out[2]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gwss.wsts/comp1 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_full_fb_i_i_3
       (.I0(p_13_out[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(p_13_out[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr_18
   (ram_empty_i_reg,
    ram_full_comb,
    Q,
    out,
    wr_en,
    ram_full_fb_i_reg,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    E,
    clk,
    AS);
  output ram_empty_i_reg;
  output ram_full_comb;
  output [3:0]Q;
  input out;
  input wr_en;
  input ram_full_fb_i_reg;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts/comp0 ;
  wire \gwss.wsts/comp1 ;
  wire out;
  wire [3:0]p_13_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_3_n_0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_reg;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  LUT5 #(
    .INIT(32'hFCFC44FC)) 
    ram_empty_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(out),
        .I2(ram_empty_fb_i_i_3_n_0),
        .I3(wr_en),
        .I4(ram_full_fb_i_reg),
        .O(ram_empty_i_reg));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_empty_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(Q[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(Q[2]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\gwss.wsts/comp0 ));
  LUT6 #(
    .INIT(64'h4100004100000000)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_5_n_0),
        .I1(Q[2]),
        .I2(\gc0.count_reg[3] [2]),
        .I3(Q[3]),
        .I4(\gc0.count_reg[3] [3]),
        .I5(ram_empty_fb_i_reg),
        .O(ram_empty_fb_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_4
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_5
       (.I0(Q[1]),
        .I1(\gc0.count_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[3] [0]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h5500FFC0)) 
    ram_full_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(wr_en),
        .I2(\gwss.wsts/comp1 ),
        .I3(ram_full_fb_i_reg),
        .I4(ram_empty_fb_i_reg),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(p_13_out[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(p_13_out[2]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gwss.wsts/comp1 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_full_fb_i_i_3
       (.I0(p_13_out[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(p_13_out[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr_27
   (ram_empty_i_reg,
    ram_full_comb,
    Q,
    out,
    wr_en,
    ram_full_fb_i_reg,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    E,
    clk,
    AS);
  output ram_empty_i_reg;
  output ram_full_comb;
  output [3:0]Q;
  input out;
  input wr_en;
  input ram_full_fb_i_reg;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts/comp0 ;
  wire \gwss.wsts/comp1 ;
  wire out;
  wire [3:0]p_13_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_3_n_0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_reg;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  LUT5 #(
    .INIT(32'hFCFC44FC)) 
    ram_empty_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(out),
        .I2(ram_empty_fb_i_i_3_n_0),
        .I3(wr_en),
        .I4(ram_full_fb_i_reg),
        .O(ram_empty_i_reg));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_empty_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(Q[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(Q[2]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\gwss.wsts/comp0 ));
  LUT6 #(
    .INIT(64'h4100004100000000)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_5_n_0),
        .I1(Q[2]),
        .I2(\gc0.count_reg[3] [2]),
        .I3(Q[3]),
        .I4(\gc0.count_reg[3] [3]),
        .I5(ram_empty_fb_i_reg),
        .O(ram_empty_fb_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_4
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_5
       (.I0(Q[1]),
        .I1(\gc0.count_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[3] [0]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h5500FFC0)) 
    ram_full_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(wr_en),
        .I2(\gwss.wsts/comp1 ),
        .I3(ram_full_fb_i_reg),
        .I4(ram_empty_fb_i_reg),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(p_13_out[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(p_13_out[2]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gwss.wsts/comp1 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_full_fb_i_i_3
       (.I0(p_13_out[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(p_13_out[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr_36
   (ram_empty_i_reg,
    ram_full_comb,
    Q,
    out,
    wr_en,
    ram_full_fb_i_reg,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] ,
    E,
    clk,
    AS);
  output ram_empty_i_reg;
  output ram_full_comb;
  output [3:0]Q;
  input out;
  input wr_en;
  input ram_full_fb_i_reg;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;
  input [0:0]E;
  input clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts/comp0 ;
  wire \gwss.wsts/comp1 ;
  wire out;
  wire [3:0]p_13_out;
  wire [3:0]plusOp__0;
  wire ram_empty_fb_i_i_3_n_0;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire ram_full_fb_i_reg;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(p_13_out[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(p_13_out[0]),
        .I1(p_13_out[1]),
        .I2(p_13_out[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(p_13_out[1]),
        .I1(p_13_out[0]),
        .I2(p_13_out[2]),
        .I3(p_13_out[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(p_13_out[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(p_13_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(p_13_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(p_13_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(p_13_out[3]));
  LUT5 #(
    .INIT(32'hFCFC44FC)) 
    ram_empty_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(out),
        .I2(ram_empty_fb_i_i_3_n_0),
        .I3(wr_en),
        .I4(ram_full_fb_i_reg),
        .O(ram_empty_i_reg));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_empty_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(Q[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(Q[2]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\gwss.wsts/comp0 ));
  LUT6 #(
    .INIT(64'h4100004100000000)) 
    ram_empty_fb_i_i_3
       (.I0(ram_empty_fb_i_i_5_n_0),
        .I1(Q[2]),
        .I2(\gc0.count_reg[3] [2]),
        .I3(Q[3]),
        .I4(\gc0.count_reg[3] [3]),
        .I5(ram_empty_fb_i_reg),
        .O(ram_empty_fb_i_i_3_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_4
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_empty_fb_i_i_5
       (.I0(Q[1]),
        .I1(\gc0.count_reg[3] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[3] [0]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h5500FFC0)) 
    ram_full_fb_i_i_1
       (.I0(\gwss.wsts/comp0 ),
        .I1(wr_en),
        .I2(\gwss.wsts/comp1 ),
        .I3(ram_full_fb_i_reg),
        .I4(ram_empty_fb_i_reg),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h00009009)) 
    ram_full_fb_i_i_2
       (.I0(\gc0.count_d1_reg[3] [3]),
        .I1(p_13_out[3]),
        .I2(\gc0.count_d1_reg[3] [2]),
        .I3(p_13_out[2]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gwss.wsts/comp1 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    ram_full_fb_i_i_3
       (.I0(p_13_out[1]),
        .I1(\gc0.count_d1_reg[3] [1]),
        .I2(p_13_out[0]),
        .I3(\gc0.count_d1_reg[3] [0]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr__parameterized0
   (Q,
    ram_full_fb_i_reg,
    \gic0.gc0.count_d2_reg[2]_0 ,
    \src_gray_ff_reg[4] ,
    RD_PNTR_WR,
    E,
    wr_clk,
    AR);
  output [4:0]Q;
  output ram_full_fb_i_reg;
  output [2:0]\gic0.gc0.count_d2_reg[2]_0 ;
  output [4:0]\src_gray_ff_reg[4] ;
  input [1:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [4:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire [2:0]\gic0.gc0.count_d2_reg[2]_0 ;
  wire [4:3]p_14_out;
  wire [4:0]plusOp__0;
  wire ram_full_fb_i_reg;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(AR),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(p_14_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[4]),
        .Q(p_14_out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(AR),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[4]),
        .Q(Q[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(p_14_out[3]),
        .I1(RD_PNTR_WR[0]),
        .I2(p_14_out[4]),
        .I3(RD_PNTR_WR[1]),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr__parameterized0_10
   (Q,
    ram_full_fb_i_reg,
    \gic0.gc0.count_d2_reg[2]_0 ,
    \src_gray_ff_reg[4] ,
    RD_PNTR_WR,
    E,
    wr_clk,
    AR);
  output [4:0]Q;
  output ram_full_fb_i_reg;
  output [2:0]\gic0.gc0.count_d2_reg[2]_0 ;
  output [4:0]\src_gray_ff_reg[4] ;
  input [1:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [4:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire [2:0]\gic0.gc0.count_d2_reg[2]_0 ;
  wire [4:3]p_14_out;
  wire [4:0]plusOp__0;
  wire ram_full_fb_i_reg;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(AR),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gic0.gc0.count_d2_reg[2]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(p_14_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[4]),
        .Q(p_14_out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[2]_0 [2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(AR),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[4]),
        .Q(Q[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(p_14_out[3]),
        .I1(RD_PNTR_WR[0]),
        .I2(p_14_out[4]),
        .I3(RD_PNTR_WR[1]),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_bf15_rx_0_wr_bin_cntr__parameterized1
   (S,
    Q,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ,
    v1_reg_0,
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    v1_reg,
    v1_reg_1,
    v1_reg_2,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    \gc0.count_d1_reg[11] ,
    \gc0.count_reg[11] ,
    srst_full_ff_i,
    E,
    clk);
  output [7:0]S;
  output [10:0]Q;
  output [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  output [5:0]v1_reg_0;
  output [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  output [5:0]v1_reg;
  output [5:0]v1_reg_1;
  output [5:0]v1_reg_2;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [11:0]\gc0.count_reg[11] ;
  input srst_full_ff_i;
  input [0:0]E;
  input clk;

  wire [11:0]\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [0:0]E;
  wire [10:0]Q;
  wire [7:0]S;
  wire clk;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire [11:0]\gc0.count_reg[11] ;
  wire [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  wire [11:11]p_12_out;
  wire [11:0]plusOp__1;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire srst_full_ff_i;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire [5:0]v1_reg_2;
  wire [11:0]wr_pntr_plus2;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:2]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_DI_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_O_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_S_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc1.gsym.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__1[0]));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .Q(Q[0]),
        .S(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[10]),
        .Q(Q[10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[11]),
        .Q(p_12_out),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[1]),
        .Q(Q[1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[2]),
        .Q(Q[2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[3]),
        .Q(Q[3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[4]),
        .Q(Q[4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[5]),
        .Q(Q[5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[6]),
        .Q(Q[6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[7]),
        .Q(Q[7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[8]),
        .Q(Q[8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(wr_pntr_plus2[9]),
        .Q(Q[9]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[0] 
       (.C(clk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[10] 
       (.C(clk),
        .CE(E),
        .D(Q[10]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[11] 
       (.C(clk),
        .CE(E),
        .D(p_12_out),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[1] 
       (.C(clk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[2] 
       (.C(clk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[3] 
       (.C(clk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[4] 
       (.C(clk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[5] 
       (.C(clk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[6] 
       (.C(clk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[7] 
       (.C(clk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[8] 
       (.C(clk),
        .CE(E),
        .D(Q[8]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[9] 
       (.C(clk),
        .CE(E),
        .D(Q[9]),
        .Q(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[0]),
        .Q(wr_pntr_plus2[0]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[10]),
        .Q(wr_pntr_plus2[10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[11]),
        .Q(wr_pntr_plus2[11]),
        .R(srst_full_ff_i));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[1]),
        .Q(wr_pntr_plus2[1]),
        .S(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[2]),
        .Q(wr_pntr_plus2[2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[3]),
        .Q(wr_pntr_plus2[3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[4]),
        .Q(wr_pntr_plus2[4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[5]),
        .Q(wr_pntr_plus2[5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[6]),
        .Q(wr_pntr_plus2[6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[7]),
        .Q(wr_pntr_plus2[7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[8]),
        .Q(wr_pntr_plus2[8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(plusOp__1[9]),
        .Q(wr_pntr_plus2[9]),
        .R(srst_full_ff_i));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .I1(\gc0.count_reg[11] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .I3(\gc0.count_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(Q[1]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg_1[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(wr_pntr_plus2[0]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(wr_pntr_plus2[1]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(v1_reg_2[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .I3(\gc0.count_d1_reg[11] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .I1(\gc0.count_reg[11] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .I3(\gc0.count_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(Q[3]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg_1[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[2]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(wr_pntr_plus2[3]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(v1_reg_2[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .I3(\gc0.count_d1_reg[11] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .I1(\gc0.count_reg[11] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .I3(\gc0.count_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(Q[5]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg_1[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[4]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(wr_pntr_plus2[5]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(v1_reg_2[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .I3(\gc0.count_d1_reg[11] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .I1(\gc0.count_reg[11] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .I3(\gc0.count_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(Q[7]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg_1[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(wr_pntr_plus2[7]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(v1_reg_2[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .I3(\gc0.count_d1_reg[11] [7]),
        .O(ram_empty_i_reg_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg_0[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .I1(\gc0.count_reg[11] [8]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .I3(\gc0.count_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(Q[9]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg_1[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[8]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(wr_pntr_plus2[9]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(v1_reg_2[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .I3(\gc0.count_d1_reg[11] [9]),
        .O(ram_empty_i_reg_3));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg_0[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__0 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .I1(\gc0.count_reg[11] [10]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .I3(\gc0.count_reg[11] [11]),
        .O(v1_reg[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__1 
       (.I0(Q[10]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(p_12_out),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg_1[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[10]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(wr_pntr_plus2[11]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(v1_reg_2[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__3 
       (.I0(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .I2(\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .I3(\gc0.count_d1_reg[11] [11]),
        .O(ram_empty_i_reg_4));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(wr_pntr_plus2[0]),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__1[8:1]),
        .S(wr_pntr_plus2[8:1]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:2],plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({NLW_plusOp_carry__0_DI_UNCONNECTED[7:3],1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:3],plusOp__1[11:9]}),
        .S({NLW_plusOp_carry__0_S_UNCONNECTED[7:3],wr_pntr_plus2[11:9]}));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_1
       (.I0(p_12_out),
        .I1(\gc0.count_d1_reg[11] [11]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_2
       (.I0(Q[10]),
        .I1(\gc0.count_d1_reg[11] [10]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_3
       (.I0(Q[9]),
        .I1(\gc0.count_d1_reg[11] [9]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_4
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[11] [8]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_2
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[11] [7]),
        .O(S[7]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_3
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[11] [6]),
        .O(S[6]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_4
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[11] [5]),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_5
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[11] [4]),
        .O(S[4]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_6
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[11] [3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_7
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[11] [2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_8
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[11] [1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_9
       (.I0(Q[0]),
        .I1(\gc0.count_d1_reg[11] [0]),
        .O(S[0]));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic
   (full,
    E,
    ram_empty_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    out,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] );
  output full;
  output [0:0]E;
  output ram_empty_i_reg;
  output [3:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input out;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts_n_0 ;
  wire out;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_bf15_rx_0_wr_status_flags_ss \gwss.wsts 
       (.AS(AS),
        .E(E),
        .clk(clk),
        .full(full),
        .out(\gwss.wsts_n_0 ),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr wpntr
       (.AS(AS),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_comb(ram_full_comb),
        .ram_full_fb_i_reg(\gwss.wsts_n_0 ),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic_14
   (full,
    E,
    ram_empty_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    out,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] );
  output full;
  output [0:0]E;
  output ram_empty_i_reg;
  output [3:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input out;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts_n_0 ;
  wire out;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_bf15_rx_0_wr_status_flags_ss_17 \gwss.wsts 
       (.AS(AS),
        .E(E),
        .clk(clk),
        .full(full),
        .out(\gwss.wsts_n_0 ),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr_18 wpntr
       (.AS(AS),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_comb(ram_full_comb),
        .ram_full_fb_i_reg(\gwss.wsts_n_0 ),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic_23
   (full,
    E,
    ram_empty_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    out,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] );
  output full;
  output [0:0]E;
  output ram_empty_i_reg;
  output [3:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input out;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts_n_0 ;
  wire out;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_bf15_rx_0_wr_status_flags_ss_26 \gwss.wsts 
       (.AS(AS),
        .E(E),
        .clk(clk),
        .full(full),
        .out(\gwss.wsts_n_0 ),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr_27 wpntr
       (.AS(AS),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_comb(ram_full_comb),
        .ram_full_fb_i_reg(\gwss.wsts_n_0 ),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic_32
   (full,
    E,
    ram_empty_i_reg,
    Q,
    clk,
    AS,
    wr_en,
    out,
    ram_empty_fb_i_reg,
    \gc0.count_d1_reg[3] ,
    \gc0.count_reg[3] );
  output full;
  output [0:0]E;
  output ram_empty_i_reg;
  output [3:0]Q;
  input clk;
  input [0:0]AS;
  input wr_en;
  input out;
  input [0:0]ram_empty_fb_i_reg;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]\gc0.count_reg[3] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [3:0]\gc0.count_reg[3] ;
  wire \gwss.wsts_n_0 ;
  wire out;
  wire [0:0]ram_empty_fb_i_reg;
  wire ram_empty_i_reg;
  wire ram_full_comb;
  wire wr_en;

  bd_bf15_rx_0_wr_status_flags_ss_35 \gwss.wsts 
       (.AS(AS),
        .E(E),
        .clk(clk),
        .full(full),
        .out(\gwss.wsts_n_0 ),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr_36 wpntr
       (.AS(AS),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ),
        .\gc0.count_reg[3] (\gc0.count_reg[3] ),
        .out(out),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_full_comb(ram_full_comb),
        .ram_full_fb_i_reg(\gwss.wsts_n_0 ),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic__parameterized0
   (full,
    Q,
    ram_full_fb_i_reg,
    E,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d2_reg[2] ,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[0] ,
    wr_clk,
    AR,
    wr_en,
    RD_PNTR_WR);
  output full;
  output [3:0]Q;
  output ram_full_fb_i_reg;
  output [0:0]E;
  output ram_full_fb_i_reg_0;
  output [2:0]\gic0.gc0.count_d2_reg[2] ;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[0] ;
  input wr_clk;
  input [0:0]AR;
  input wr_en;
  input [1:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire full;
  wire [2:0]\gic0.gc0.count_d2_reg[2] ;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;
  wire wr_en;
  wire [4:4]wr_pntr_plus2;

  bd_bf15_rx_0_wr_status_flags_as \gwas.wsts 
       (.AR(AR),
        .E(E),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(RD_PNTR_WR[1]),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .full(full),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr__parameterized0 wpntr
       (.AR(AR),
        .E(E),
        .Q({wr_pntr_plus2,Q}),
        .RD_PNTR_WR(RD_PNTR_WR),
        .\gic0.gc0.count_d2_reg[2]_0 (\gic0.gc0.count_d2_reg[2] ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg_0),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic__parameterized0_8
   (full,
    Q,
    ram_full_fb_i_reg,
    E,
    ram_full_fb_i_reg_0,
    \gic0.gc0.count_d2_reg[2] ,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[0] ,
    wr_clk,
    AR,
    wr_en,
    RD_PNTR_WR);
  output full;
  output [3:0]Q;
  output ram_full_fb_i_reg;
  output [0:0]E;
  output ram_full_fb_i_reg_0;
  output [2:0]\gic0.gc0.count_d2_reg[2] ;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[0] ;
  input wr_clk;
  input [0:0]AR;
  input wr_en;
  input [1:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire [1:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire full;
  wire [2:0]\gic0.gc0.count_d2_reg[2] ;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;
  wire wr_en;
  wire [4:4]wr_pntr_plus2;

  bd_bf15_rx_0_wr_status_flags_as_9 \gwas.wsts 
       (.AR(AR),
        .E(E),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(RD_PNTR_WR[1]),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .full(full),
        .ram_full_fb_i_reg_0(ram_full_fb_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr__parameterized0_10 wpntr
       (.AR(AR),
        .E(E),
        .Q({wr_pntr_plus2,Q}),
        .RD_PNTR_WR(RD_PNTR_WR),
        .\gic0.gc0.count_d2_reg[2]_0 (\gic0.gc0.count_d2_reg[2] ),
        .ram_full_fb_i_reg(ram_full_fb_i_reg_0),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_bf15_rx_0_wr_logic__parameterized1
   (out,
    full,
    almost_full,
    \gcc0.gc1.gsym.count_d1_reg[11] ,
    prog_full,
    Q,
    v1_reg,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    srst_full_ff_i,
    clk,
    p_7_out,
    ram_full_fb_i_reg,
    wr_en,
    \gc0.count_d1_reg[11] ,
    \gc0.count_reg[11] );
  output out;
  output full;
  output almost_full;
  output \gcc0.gc1.gsym.count_d1_reg[11] ;
  output prog_full;
  output [11:0]Q;
  output [5:0]v1_reg;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input srst_full_ff_i;
  input clk;
  input p_7_out;
  input ram_full_fb_i_reg;
  input wr_en;
  input [11:0]\gc0.count_d1_reg[11] ;
  input [11:0]\gc0.count_reg[11] ;

  wire [11:0]Q;
  wire almost_full;
  wire [5:0]\c0/v1_reg ;
  wire [5:0]\c1/v1_reg ;
  wire clk;
  wire full;
  wire [5:0]\gaf.c2/v1_reg ;
  wire [11:0]\gc0.count_d1_reg[11] ;
  wire [11:0]\gc0.count_reg[11] ;
  wire \gcc0.gc1.gsym.count_d1_reg[11] ;
  wire out;
  wire [10:0]p_12_out;
  wire p_7_out;
  wire prog_full;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire ram_full_fb_i_reg;
  wire srst_full_ff_i;
  wire [5:0]v1_reg;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_19;
  wire wpntr_n_2;
  wire wpntr_n_20;
  wire wpntr_n_21;
  wire wpntr_n_22;
  wire wpntr_n_3;
  wire wpntr_n_4;
  wire wpntr_n_5;
  wire wpntr_n_6;
  wire wpntr_n_7;
  wire wr_en;

  bd_bf15_rx_0_wr_pf_ss \gwss.gpf.wrpf 
       (.E(\gcc0.gc1.gsym.count_d1_reg[11] ),
        .Q(p_12_out),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5,wpntr_n_6,wpntr_n_7}),
        .clk(clk),
        .\gcc0.gc1.gsym.count_d1_reg[11] ({wpntr_n_19,wpntr_n_20,wpntr_n_21,wpntr_n_22}),
        .p_7_out(p_7_out),
        .prog_full(prog_full),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .srst_full_ff_i(srst_full_ff_i));
  bd_bf15_rx_0_wr_status_flags_ss__parameterized0 \gwss.wsts 
       (.E(\gcc0.gc1.gsym.count_d1_reg[11] ),
        .almost_full(almost_full),
        .clk(clk),
        .full(full),
        .out(out),
        .p_7_out(p_7_out),
        .srst_full_ff_i(srst_full_ff_i),
        .v1_reg(\c0/v1_reg ),
        .v1_reg_0(\c1/v1_reg ),
        .v1_reg_1(\gaf.c2/v1_reg ),
        .wr_en(wr_en));
  bd_bf15_rx_0_wr_bin_cntr__parameterized1 wpntr
       (.\DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (Q),
        .E(\gcc0.gc1.gsym.count_d1_reg[11] ),
        .Q(p_12_out),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3,wpntr_n_4,wpntr_n_5,wpntr_n_6,wpntr_n_7}),
        .clk(clk),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .\gc0.count_reg[11] (\gc0.count_reg[11] ),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ({wpntr_n_19,wpntr_n_20,wpntr_n_21,wpntr_n_22}),
        .ram_empty_i_reg(ram_empty_i_reg),
        .ram_empty_i_reg_0(ram_empty_i_reg_0),
        .ram_empty_i_reg_1(ram_empty_i_reg_1),
        .ram_empty_i_reg_2(ram_empty_i_reg_2),
        .ram_empty_i_reg_3(ram_empty_i_reg_3),
        .ram_empty_i_reg_4(ram_empty_i_reg_4),
        .srst_full_ff_i(srst_full_ff_i),
        .v1_reg(v1_reg),
        .v1_reg_0(\c0/v1_reg ),
        .v1_reg_1(\c1/v1_reg ),
        .v1_reg_2(\gaf.c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "wr_pf_ss" *) 
module bd_bf15_rx_0_wr_pf_ss
   (prog_full,
    srst_full_ff_i,
    p_7_out,
    clk,
    E,
    ram_full_fb_i_reg,
    Q,
    S,
    \gcc0.gc1.gsym.count_d1_reg[11] );
  output prog_full;
  input srst_full_ff_i;
  input p_7_out;
  input clk;
  input [0:0]E;
  input ram_full_fb_i_reg;
  input [10:0]Q;
  input [7:0]S;
  input [3:0]\gcc0.gc1.gsym.count_d1_reg[11] ;

  wire [0:0]E;
  wire [10:0]Q;
  wire [7:0]S;
  wire clk;
  wire [12:1]diff_pntr_pad;
  wire [3:0]\gcc0.gc1.gsym.count_d1_reg[11] ;
  wire \gpfs.prog_full_i_i_1_n_0 ;
  wire \gpfs.prog_full_i_i_2_n_0 ;
  wire \gpfs.prog_full_i_i_3_n_0 ;
  wire p_7_out;
  wire [12:1]plusOp;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire prog_full;
  wire ram_full_fb_i_reg;
  wire ram_rd_en_i;
  wire ram_wr_en_i;
  wire srst_full_ff_i;
  wire [3:3]NLW_plusOp_carry_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp_carry__0_CO_UNCONNECTED;
  wire [7:4]NLW_plusOp_carry__0_DI_UNCONNECTED;
  wire [7:4]NLW_plusOp_carry__0_O_UNCONNECTED;
  wire [7:4]NLW_plusOp_carry__0_S_UNCONNECTED;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[10] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[10]),
        .Q(diff_pntr_pad[10]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[11] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[11]),
        .Q(diff_pntr_pad[11]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[12] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[12]),
        .Q(diff_pntr_pad[12]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(diff_pntr_pad[1]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[2]),
        .Q(diff_pntr_pad[2]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[3]),
        .Q(diff_pntr_pad[3]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[4] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[4]),
        .Q(diff_pntr_pad[4]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[5] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[5]),
        .Q(diff_pntr_pad[5]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[6] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[6]),
        .Q(diff_pntr_pad[6]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[7] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[7]),
        .Q(diff_pntr_pad[7]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[8]),
        .Q(diff_pntr_pad[8]),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[9] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[9]),
        .Q(diff_pntr_pad[9]),
        .R(srst_full_ff_i));
  LUT5 #(
    .INIT(32'hFFDF1000)) 
    \gpfs.prog_full_i_i_1 
       (.I0(ram_rd_en_i),
        .I1(\gpfs.prog_full_i_i_2_n_0 ),
        .I2(\gpfs.prog_full_i_i_3_n_0 ),
        .I3(ram_wr_en_i),
        .I4(prog_full),
        .O(\gpfs.prog_full_i_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \gpfs.prog_full_i_i_2 
       (.I0(diff_pntr_pad[1]),
        .I1(diff_pntr_pad[2]),
        .I2(diff_pntr_pad[4]),
        .I3(diff_pntr_pad[5]),
        .I4(diff_pntr_pad[6]),
        .I5(diff_pntr_pad[7]),
        .O(\gpfs.prog_full_i_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \gpfs.prog_full_i_i_3 
       (.I0(diff_pntr_pad[3]),
        .I1(diff_pntr_pad[12]),
        .I2(diff_pntr_pad[11]),
        .I3(diff_pntr_pad[10]),
        .I4(diff_pntr_pad[8]),
        .I5(diff_pntr_pad[9]),
        .O(\gpfs.prog_full_i_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gpfs.prog_full_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(\gpfs.prog_full_i_i_1_n_0 ),
        .Q(prog_full),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \greg.ram_rd_en_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(ram_rd_en_i),
        .R(srst_full_ff_i));
  FDRE #(
    .INIT(1'b0)) 
    \greg.ram_wr_en_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(E),
        .Q(ram_wr_en_i),
        .R(srst_full_ff_i));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry
       (.CI(ram_full_fb_i_reg),
        .CI_TOP(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3,NLW_plusOp_carry_CO_UNCONNECTED[3],plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .DI(Q[7:0]),
        .O(plusOp[8:1]),
        .S(S));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY8 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp_carry__0_CO_UNCONNECTED[7:3],plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .DI({NLW_plusOp_carry__0_DI_UNCONNECTED[7:4],1'b0,Q[10:8]}),
        .O({NLW_plusOp_carry__0_O_UNCONNECTED[7:4],plusOp[12:9]}),
        .S({NLW_plusOp_carry__0_S_UNCONNECTED[7:4],\gcc0.gc1.gsym.count_d1_reg[11] }));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module bd_bf15_rx_0_wr_status_flags_as
   (full,
    ram_full_fb_i_reg_0,
    E,
    \dest_out_bin_ff_reg[0] ,
    wr_clk,
    AR,
    wr_en,
    Q,
    RD_PNTR_WR);
  output full;
  output ram_full_fb_i_reg_0;
  output [0:0]E;
  input \dest_out_bin_ff_reg[0] ;
  input wr_clk;
  input [0:0]AR;
  input wr_en;
  input [0:0]Q;
  input [0:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_full_fb_i));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_full_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(Q),
        .I3(RD_PNTR_WR),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module bd_bf15_rx_0_wr_status_flags_as_9
   (full,
    ram_full_fb_i_reg_0,
    E,
    \dest_out_bin_ff_reg[0] ,
    wr_clk,
    AR,
    wr_en,
    Q,
    RD_PNTR_WR);
  output full;
  output ram_full_fb_i_reg_0;
  output [0:0]E;
  input \dest_out_bin_ff_reg[0] ;
  input wr_clk;
  input [0:0]AR;
  input wr_en;
  input [0:0]Q;
  input [0:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [0:0]Q;
  wire [0:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_full_fb_i));
  LUT4 #(
    .INIT(16'h4004)) 
    ram_full_i_i_3
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(Q),
        .I3(RD_PNTR_WR),
        .O(ram_full_fb_i_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(\dest_out_bin_ff_reg[0] ),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_bf15_rx_0_wr_status_flags_ss
   (out,
    full,
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;

  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_bf15_rx_0_wr_status_flags_ss_17
   (out,
    full,
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;

  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_bf15_rx_0_wr_status_flags_ss_26
   (out,
    full,
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;

  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_bf15_rx_0_wr_status_flags_ss_35
   (out,
    full,
    E,
    ram_full_comb,
    clk,
    AS,
    wr_en);
  output out;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AS;
  input wr_en;

  wire [0:0]AS;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AS),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_bf15_rx_0_wr_status_flags_ss__parameterized0
   (out,
    full,
    almost_full,
    E,
    v1_reg,
    v1_reg_0,
    v1_reg_1,
    srst_full_ff_i,
    clk,
    wr_en,
    p_7_out);
  output out;
  output full;
  output almost_full;
  output [0:0]E;
  input [5:0]v1_reg;
  input [5:0]v1_reg_0;
  input [5:0]v1_reg_1;
  input srst_full_ff_i;
  input clk;
  input wr_en;
  input p_7_out;

  wire [0:0]E;
  wire c1_n_1;
  wire clk;
  wire comp0;
  wire comp1;
  wire \gaf.c2_n_0 ;
  wire p_7_out;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire srst_full_ff_i;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire wr_en;

  assign almost_full = ram_afull_i;
  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_8SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  bd_bf15_rx_0_compare__parameterized1 c0
       (.comp0(comp0),
        .v1_reg(v1_reg));
  bd_bf15_rx_0_compare__parameterized1_3 c1
       (.comp0(comp0),
        .comp1(comp1),
        .out(ram_full_fb_i),
        .p_7_out(p_7_out),
        .ram_full_fb_i_reg(c1_n_1),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en));
  bd_bf15_rx_0_compare__parameterized1_4 \gaf.c2 
       (.almost_full(ram_afull_i),
        .comp1(comp1),
        .\gaf.gaf0.ram_afull_i_reg (\gaf.c2_n_0 ),
        .out(ram_full_fb_i),
        .p_7_out(p_7_out),
        .v1_reg_1(v1_reg_1),
        .wr_en(wr_en));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gaf.gaf0.ram_afull_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(\gaf.c2_n_0 ),
        .Q(ram_afull_i),
        .R(srst_full_ff_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_1),
        .Q(ram_full_fb_i),
        .R(srst_full_ff_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c1_n_1),
        .Q(ram_full_i),
        .R(srst_full_ff_i));
endmodule
`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "XILINX"
`pragma protect encrypt_agent_info = "Xilinx Encryption Tool 2014"
`pragma protect key_keyowner="Cadence Design Systems.", key_keyname="cds_rsa_key", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=64)
`pragma protect key_block
HidWR5lLolKcUOf7FMZ9/FkftVgnm2KmZzZ6DoOaHj9jsTtIev4p95LybBNtYgj6nC5n6+bAwUSg
k5tQ+1/Kaw==

`pragma protect key_keyowner="Synopsys", key_keyname="SNPS-VCS-RSA-1", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
RXdJbY4zI8UUm+hriO0H6MLiBUCIPMsycin39wD6W5I203vtqCHgm5OLh9ojxoDV2rE38I3O2gER
4FleoV3NmUpO1Ham04aZzwDk1jk3tNSdqozf+FfqNZnyUpIYfCGV99421d9tyPS0NlFUdB8rM/WG
rhKmnPO32S4oGxyEkq0=

`pragma protect key_keyowner="Aldec", key_keyname="ALDEC15_001", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
T6TTpUca2F1qogu5zWKU+QLI8PLJXuCf+aMSD9ONje/3MzMYJVZrIZ4adIklUU8GwuwRx1wxmFN2
YNJgZTK+arKU22FkLaG/2Asov00x2MH515zIjOKQRmeRkTvwSLKddJMn+0XM9ENI98tcnuMfA4Yr
859mN643whsAvlRTNofeDAQqGaHoKQHyuXywQtcN/BuQMbtQ3D7WtBWRrWij6FV0WNxb5/Mmv/Sn
o/D2T0Sk32WdQhxQUPBAtsS0k6tTkVcaBBWDpcyt058q3JfAlpvvlQ+sRBJhPo/wQlx1AV0nR/iv
49bAkgFqRfL1DabFR8v7s5ZOFQ33yg7oUSwqmQ==

`pragma protect key_keyowner="ATRENTA", key_keyname="ATR-SG-2015-RSA-3", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
Rqv9reuUfMjvAUjdrPA3ZyiOnDBC3kUuQ9Q5VDKWBOAoMBHMaID5Jyy/i7TyK5X5LnA/T8IW85E4
SA6Vm07RyIiN0ijK7nRLfjBtix6hIyDIPLN0DhyFtl5KJkPW0AubBl2aymW+SDrvQf2dupF/ENYL
gKm3GbKa9mKZj0/CKJovZ3gFiSq70AqRgJ9saNfgUe/PMSSvzZ5zMRCNxqhumLQ6mZnl+bIE8m8O
C71GSafBgPYEV6ObQE8WRJ1UcstA8KBB8CPY4iZQWvk/q3TBVp7QP7We4TkV2e4n4gmLMz9UY6TT
oQRp6141Qnjz4UbpJnyY+lGK8HSY3mun/L7r1g==

`pragma protect key_keyowner="Xilinx", key_keyname="xilinxt_2017_05", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
mbccpEvmv9htmz/JiTlOCWFeavbNSpw9/5RIE/Z/jYcRxAf35amDCQSvxqTOxNxK7sX4UbL6E9Lm
QjsjcV4ljW4i420AMrI55O+ngPBx+wln7MrKnr6/M5jj1M7FiIPUehoW1/6CzZdIeHq99CLiD+kH
lQfb5M4dfWbXjL3nH19YD4DvY6reVqGHw3JGDk0alMUls3nKadhu/1xWGRi6uZxPiUWjlPkaaW5J
Ukl7zPF12aOls7LrHzbJuWit+6ir+uCOyAUrs+4vYl1WgnuuK9AwxjGvjX9E24ObixaybFcJmeBg
WtahAiRvat25RcYd+iHs2Y36OJtIPe72DbDrrw==

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VELOCE-RSA", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
Rp/ttrNR4mZuFnixP2bdrFoyyDjKKlKHvByUKGxBJIXXzo8Y/DanvYq0QD/FLWjrlqo2BI4Qgxxh
3RlBmWLmnD+Pf5RdpvW0d1waUYPCCgbPFrsrQ7FK50dJNFLHEwzzLcPRyim2wwDbEDSUn9MDVfeW
21FMktqFgRZc+UFMNgI=

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VERIF-SIM-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
Eoooy8RQR9JZCgIBP+oLCvzkJfPXqy8jHiRucfKG3WFC5ivvSB6sgypwtZ9AIzdk1rBql+vUw6ub
ydl4BCQJg+bx01TndpgvRmgOZ79u8D6N4tiFX/J0wDQ/JPvKHe8ZV0lJbj4YiIMjlkPfWFHmwAUz
dpRQfc6phgZ6JzZ+ffh+tieoofmMw/YRqxXMrJXhqpL/QVZT9YKBoT9IfNUWBso6Vm8vQbEEnw7m
a9hVbtR5hW6/N2sTlpLCYOt45wvdMRNDSpJAJcooxsOO3POoNotsNy/5KnHqyn10jI2+8WNh6o0d
Spc75aOqRAlmtc29EJYBHVTMpsdnGRTXZMrQ4A==

`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 53056)
`pragma protect data_block
pm9Tj1RBGj4/OtH6cKfXkEvmoSZrFmmxVvh9SKghja1Rvi5wEfBKAKfoD4n+qr9Ph8DWKHcw3BGG
iIc4AchQn7rs8zDeyDcY6YgwWSlMjpR95XrwNJ3qqd80KeYw6b9xlemMO9HC3xyop0EFc0wa2Qa7
DmcQC2y1KdSSVRwKKvVDJL403XToHF5xxfuQnHc0bNHOOcfB7D6ENWrNUmnbX8aPszio7y+f0CWX
8an5UeyNSasYblqLaII09PDTcwohVjAcfZMcBBh4E87HJYnjU5POB/XJtg4A2f6jB+zhrzzpRssd
kgrlAERxKZnwC0lJhPs9zLmuHOCFz8mXWqwEZP26oa0oNjhl+i6fXs21qPBrPE7xXnQGvjV38rhp
Cd/qteuCHBv1QPuHeA7ENTkudoguQ1u5LlmEEvRVFogNmrTY+epP4NWtzRi7HzF8kBk7o8XOOR1n
zMBBwhXbhBv1FDlMMGR8qTm1gtBYs5qGPJ/a6oxBgE69QJq2efOfzYR2SINdvwrKhG2qqYUpby4q
o1Pws9bnYOMGKyLtByeHXgUB6ujeJkbhRRkgJd7j+SizipTNhMotsZUqZQdWfnP0Wj087K0/RhXq
i38+A06C4ayQ5WjNmbaZrTFpaGs7m8LVXNnzDMQHJIztpl+Bkjf5WBKrwOTmnL3FRLy4RC71FJOF
Nb0QLAkGdJFOi9M6XdFjBbZsanULlUxO9aikJu5i/0ch52yiTfYFoBb5wowbVdtXpNkiBbBwXBQ2
XfA5C90nTFo/JLyN/K8PQ1fINxiQF1yPS/fbnpgvAHLSsiTX6Csmub98zjqSAM9jemrbVcpN2wrj
/0XvD+NVlU41yWpmrpBlhChTsWU1iCmIO7hZM9o436b3vrJcPPsh13UJsiSMJaJ4MwUlyyZSJb+j
eBy4LuQXlu1De8xXwV2rhzYLyvmm+o2B82J/IOFsUANQdw9xiZNZJgqjgRZIRrPSLD+V8yxv6v7l
uQGIeg6wxN2Dgu5Ez0WGmN2dUxaciZZIm4HvJviiBmvvAUN3i3tVA0wp96L6sVb4fjnzUVFX7R3R
qksmVM0wJakNiJg/g3A8WAPZG8/IiFzNKV9SHTEEfcHT8CMLg9CPKH4/ftLN1UeHvqgFJfl8WDfW
rAqINOCwthrvh/vkZRFqc6RB7h7/Z6mvlxQuAVYbJBX6uG7WcCufr/XPPNiyLSD5iWzpgbPjK0wR
6uukMFndv6hbX3oeD2ei6rDJ362wD+Evw7q3TIdmgFUfiuTU0hC99N4Zc14yn8HeUMPvQaE9MvzF
K8zf0PrWyj1qSah8iUmgQFVqCzEWC67VJvEMLHvfMtzWRi2RrtZBlSBM5wRR1GrvYvy4W4i/MgjJ
/3fWhCkjP+uCMt6ZYX+wPTNZ7Wo4vFjFtDihZGA2kYdtNvSNiYsOnqdtAwoghNTbw/uLgpw4yJ20
ZZtRW0eW2Eg9SJH60KmvV9rm5KCuOs2T9nJQymw1RJSdu0kHWElOTFGlscY+losdZOEn0zWcmaZ2
pocRMCl+GRUqvUAW9oJqTRj0apgDfk2Tz5LOfTW+eujmRwoZgmBTuIlDOgqVRMnL+8MXwnp0MiVi
DJfHycUKgIPqmpnSCBYBrhILNxxf0xYSQyyLljD+9yLV8xRhIwv1TS9c6JN8jm8pWlZwV68oblNR
C2mYRP7iExS9tiTM4eMbx0ZnqpEvfHautb8+sa0XXbTonzN7RWE3+KhTj3Ufr7eoYFFPBJM4/DB4
1SmH1zVujYGY2AS6KhcUPCxvGPdmffKWcJIdrVOThmtczrwFtlFue4AuHFb5c9BguXN8ROxH3Hcl
3I511CPmboUHRCgad2/IkS+V5z6y6D82Zi5hd7miZV+okpHvxJ3rreLJqyTAWgasRe4PHAkTxS8L
9XVH9dSGPmcT9k+6uugmHXNOgbdDa0gtQutpgnBdTc2eAar5Lfq+XeeqrA5dbYAxT11c6FfxQI0f
r5tkrFxDsWSXDWiF0wACYUU1Gy0kP3DOSaSQAd2Dh4s/IWmdwHo5SLpg4Q7Jm9p/DttsM/U1s/z8
6AVy+wdjq8lIGUIX4ZPJ20s/yu7Wh0si2KQjEga6ezhWJSctN18mabhlFGo6HRYoDMtDHe3R16Wo
4vIe8cJM+ZbZ3sMadzy7OqK+68VR3/GIN0qezSeDWJEoJUGhfWpvKamK2nBahpiJyl6hQf1/5mVu
UtNzqbYJR+P5wpZ6+OAV99am0ZcLfHEH83fmErrnW+Z2npRZFKklMjQkm5hA4y+k5bV4r4IqnmH0
oSF3H2QAuVbIHFv3rJzniyIxmOOeBYvkEroVpvGSASj/TKOE1Hf2jR+Y+Mxjk39LwVtj3REEU7AH
+5OflQI4n3G1StlFeHCbulwMpcYABehlo82wgeRPNVqZVRc4zVAU8weKZv9xZItYjdqEOxI2uEP+
FUSEqswxw29bqCy4twB+8oraJDfZvzJemJOOpmNTf8Py69w7093KZYSUo19+PTT4xi9UY2YWTC2D
f7bDk3mpj5Y9ReXe6SWEGnA8r2UwUows3cROf3/5bnotsh/yFrm0p/PqSHx98Hfjndf0mCSPJtQZ
WV+g4Exbvek6vCc3lABCGKvToxZyZUtlOm9CiFzpO9SSxXdUckKuwkc8GAlP4HhorpnIMX5RbyFc
jVo6QRcUt8PVzwSem6PUQZD26k3b7seOY5V428lekta4fLXh8qmKH09pr1ILyRMGHvYIyiDqGEKG
Nex/3DIvMccdcFSkXyN3z32G19/Dl7RtEjpnbLjiVPkujKLCkmeXZzWcDi9i4OxjQok1xDBTKfol
j6F/azQK66wl0VFhYG03MuaWkdWKKmNDSQUwbUK0HCPKZMxSyT0plAioQV/RtYvFuOV+qnQ006LH
GcI9QRBL7cLMrPrJTc7QgPYtXyugilZluS/O/SAkmfkEQ1N4xaXiym2Na/e0rSurxcmcMJf62JNn
fG0+ZKdXVmkmamD5I49xpjuDbIft6h6XlZvt/dec0LRRk93NuBHEmGXBhxj+0pxTpCobJg/t5iJS
jtJYIcGAg5brXyGAeYEmq8F8+ONd+93Lu6Oihb+mw9g4fcyTt9iFmRuO7LTTBQx2dwkG1qTkvWEJ
y3WNgzY0/Uz5bG/A6X0YrVGgRC2etruUdtH13mSkjZBZf6YWX2bT4U79gjquPMB4aJVJ4flYyS6d
XX6EC/XGeYxcSrLyqMcPo1bvnfDU/39zk/LVRR2w/YFsnEbHYi49RMLf5gFoEMP87Iq/nIOvTSMf
rBY+ntpGD/M0dnOW1GXyyglkpodbHXcIV1075NFN8I7wqdkWOBLHvwfcObqpjhxYqy3ubpMCBJWm
0NnHG5wgljgUNER+aAhNgL0c+zhea/G/LrJqIiBLG82s0eSfNM+flu0Ha3k1NlY22z/4nkx/hK1T
by0fy0y7gVCX7s3ZK2G7fkGmZL2n6IGJBmcvzCfIVYS8lob+ZU3TU3WD+hZcSzaiv0ycMcBY5sln
IhZWMrWvnWQdgAzctTVn8sHVwjKlIZ/g/xyYwpeJPTrz/RBDH/4NSDB2/FCahSa1yT6Oq7UNp0jp
SSJXAf4f15u1L38LKGlJxlIXWdw33lSV2TVUg29HE/a0ChcW3gR8mL4RDiUhfDsWSQJGYBk0ya9m
SwBN6uOhSP3Pk5WKiXuj8C5Dv0bmWRv5Wjav/sGOjnBzGXl5tIL4lRFiKyxrHxtS1VT2D/ey8aPj
anKbK/ygBa0lay1A8UR7SNyfbKFeBOrf3u9ETPHZy3Ys/XR78rnIZu5FYNw89f6fPvHGbL5bMoXf
Mr/IDyZSRxZxHnEwRynTBL8zs/pSUhDoXYTWu6QS0fVyTlKUdD03GsGXekPOPO9dA3Brs1AwSofh
rYBqhehqm2Zq9JaPFWmdIijUpuOAfXlwtu2zbpGOVUceOgE/CZSBK3HjuiCcOdjAG26a4leWs5Aa
SEjas263b8aYXmukjxeI9gHuA4a/umt4z4VGGfjHMAiTDPLaI10SfrcBWiQvt/Nht87V9xGoiwpY
Erh0WfynhTCZ7bZMyaQChl6pZHnT7wxC6XNvwa7Fw2/WjyFwXfrEwAKXzcf4B1BxcgGg8tJN6AGI
tIkYpYWy9ooV7/9pJ8DqWVA+dKKVicaV4YyMGfy7NUeohqfRVzO8rFTOMfx3950isgiR/RAyaSvn
/0Dqs9UgBbUTGVI2H90+SWOrBb2LFY9LHepbbPgSTbK/In8lvU2vUB7IWaKtjzuhJDOrbuSBG5uh
WZwFWSMiydAJAjuPH5wDm+AhTB6Df4qr7GxKPZAjDOPdlmKhbPbXUQCFOPxPXsTbGUxjy5+f8XRx
9OmPivIT8j5v7RMCPGbpqEzpdd4Gooo/iGBbGvyMP7MuljBstXwJeNELnAfacChBEQRUxdF13g6z
8GAMK28xN7WA2B7OGeNnP1W/2XWqmgSRIGLX2vUQbG1A49nDl7OJRmGv6j+XNo0Qg9tBf11ZNapw
zGzjcTbrQIx2U3d5Zbptd++0p8h166zpaFQThxoltFFODk6QL/tsreFk24rs6eydJc+Ug+z9Z4rM
K8W6ZsX6sPB5C0ZNDthtxqrmyq2kjevYoAEeZDcCDtIRPPGh5BaPkPxQmpX49fZltXCmMp3XJLLk
ODz6dHN5ZRPB1lL8e4/MUbjgfbvRAxrKXI9ZpSN7mx44k3ozyBK2lVI6p7twJEr6eZgfbMKoGj33
uBTtPchpNAcuIp53COTJZvtTfHm/q5lIu2YboFWXyKrqdyPgkTBgKQmDus23bSAMRn2Om24Kat/U
uOoPK5UlxcFsDmRuJAsuAodx91ZVVO1mWX2wJBueEpD+Nrk42hAfObucKIVQ5SVfQHe45WXpl7K+
T30x36/fopv9NwYuYHbutrt62E1B2C61nS7V18TpKOY0gduSbCDffOGvhyC7k7QdQpgL0JY62edo
KrGAT343STodbeicMZYTY22lcO0CQzKkLOEROe2th8aFq35AK2xXbxgAl611H+QX8gDLw8w0mBXc
VHqFWsF1hoQH/3RyLx5e7gA7ogaSp0q+b60/7yDcMgbpfWpzLsO0OgVWEN/Mov36mrQQ25VL6fTd
8wYgfh2rA/1TPLg9AT4fqACxC2ZgTrKylJTRPio6hcWCbfgaDaqm3OGaQCVoMxvsjO0MTowpn0b3
Cwmagy3JHbLDi+7X8h5YSflrD0dHNRL2KNvBGFTf2Yob25dkV3zG+Tmjd5gzhB6Wa68ErnZpyI+z
oXhycHfecQHl/uhASBVGeP3GL09YNEpznocx2BYnDfnw3EvhZXhh7aYLInXMJ+CTPHxJ/I9I8TUq
EmXl4vpZqJ1c7zcc9lcEXOnOFkT5rLTkub3rWAv73usHTJWxmhlHXmBtuPcrgYN6F1ywZeNz+Pav
BDXA1isFOgYXLHYWMGwYtt06cBoVcDkJRdAn3Ca/8zFV7pc0b+JLXdgQpaihYIMskjeooVMW4anx
ilFQqesxRa5XDSYZtdeWhimZ7Kp2QtsMrbdAhm9/TbTRm7cQMpRUIofP9ENBzuIRDezIcvv5nnLB
CRIuXk03Vk3HiJ5kVkQJQ0UhMC9QY3D507p4R0h4l14QRPAiab+JvIa1RN4wJzggQia8NEuY5Hax
byleZbY1k7PGLxsDgqSC6/do5YxKHPJKUDdGTImF8vLEdkgM3XXc6eww418Q0FrGPEPstuLbxD5S
l7cb84/NlNRUHt4NW4aasRByTlFPTNYg1hmYMZnq0zWOHmlZ6ZdVcXGsj2ckuvoILcVK8oR3ZFj7
ndDFXIjpwyRDHAp9AzpzBIS/ZnJTbsGov9glsex/cD2r0WmslJEGfxlZHJ0HqjRMeDTAme93ZUw3
lM4emLHn+4sDcDruZRQMei1x6kstNcTS5aQN3+XQ5TvrfplYHiAmE3sSBVqZIkTczfFib4+k3l3w
8vB7vAn+5Q1TdX8xsc4r+kQvdCtBYnTI1nDgYJkqW2tcVf1okVxUgn9gvTz4uqC/MPawXA4i96gg
eJ8w0K2puWM3j91w4rCzrIytm7/DwFCWS+iHFERUbqrVREnmOqWzTd0CJUo4Uf4rR5vMO8Ptuz99
3uXn2DppqNVK6Hw387zTKSkGk6NT3P8ml43y68d9vH0+mhmljcdpbuMLpMuMwrQKxHUSM0lwURzP
vTExvW9ggJICjH4+pURHPVVk8XhMkK18Fnr7mtoB1s18HZYsP3PDli/Pr7YUifNbr8s1JjBPhSh+
cWqZqCR5z4XOtLkLhDfLNEo3k1352SzAPKdajgXfFuUxxgvVdK3lVRiuI5WsEa7XLmTBOBKvitxT
z3i69AP8mIsmUv9WhmnaG5njpisWwl235sAiazIXul5FsNxCUmNGn+KpstD9TMCBIu1AZMzDWCBb
VzA64lh+PkHM0Cz3EKokvSpuYDty+4/b99iqxRbAvsyVsX/1g6+GnphzAtcZjUbP74zCat+f1/rM
JNbi0lB/bGiwU2qaZ3cxUEnNfslyxBJQLvOpvZwIdizfP66TGsTVLhuIOH3uF76vk+s99vmomzaL
68zfcwStSrwQsGfKtHpz4QJltB9s//qxvTCI/pBjGOucZ3YKYXQzx4/w/hDvkeF2Ew0GM7dUIS/e
TimS6C488b7O3HwXq1mu59hWSA5n4lcIDxZ5XM0gwqw3K9ByQw6jiWmm7V+vHGR6kpbRj1MwG51o
7WoOVVDRCdqqj/6lYArfUNZbaZFXq7QJatGUPV4oiwf+H1KF/cP6DqIwmlr2FHwGsSrVbQc/vb2a
qKhCVMFOrpBPgSw/cx95c2Wy50lOxFOPbkZuzHf6bftvNUsaRi7cNn82Kz0TvIUbxyrB/qP9OO0j
yee7hTi6fGF06/suc2qtofvWGuz8dpcWXbpi1FD7qGePO8YzBh/6Dm+7efsd1pyiMoPP/+PEM4Uu
1fHNW6alYQUuhFt9fl2uTkQAENhidaqGjjSn6Q7J5vpj+h+uhOCXasC+JSJUgvcMNbj2LCxI22bd
vM1bj2PcZgx9fFIxgQ6Ol667aAuydiHyutxGbzU3cwYwOlzKUl8wWusjeDMHOMttl5zlX1G7JfwU
u6IOjQFLS8dNwfEuvZ8NTxM9gTcbVoknJWRZyjGQlRUpiyGRkJtQxt5UPxX3alNLLEWtjJqPA6Dy
2Ij4EWRpwGJiJ5NkVOSIPnikejGTcispbjDoBwjaMcDB5FxEDZK5jkceYRlUO6p8cKY9U6VsAWcb
adFH71NTTrohIkgPKab8Gx8ySJF1o0G7ItidlidA5e8PhunbqJkRmwYoecXeRggqglaYkeZeSksP
SkYl17ocQB7/Sj8VC3VQfrw7QbKDZhy3DY9Ltwv77zYD0I0n9vsPYobql4K/JSU9ydmo8uHOB5ju
i0Jha/6c+MH4PP/eFvl+gNc8UCdsls8tXmcKRJCsLFauKUtB5DMYl2v3JUsoQXORhgGXUROy4xLA
hWoRSI4TGzZzNLQAEOEv3l9HXJ9BbtQ7BaTe3z2W+6CNvTPpZoDahKN6x2xt5uD9x+lVCWZEsbAw
3Tz5NEKkwuEB7JZHSB5qtiPl+4WYdNC1/wUsTXzEtkntz69IgwowpNLkTWSqCwS5XFJrGA+4gCWa
Hl281noG74+JYgxK5afrRAsuEAgNeeDfJ64k1IUC2XnxrDPrOf0hX5BPLsi2Ok9EuXJIAXL4yjPI
jRNpa4UJbcpHcBz0HP+qj6/9jZto2c8RJXK9xUMLclG6+TXkDHYswE5jkfw2Vt0m8pAVsRuBFpY6
aFV0dDTznZm2IXNm92Rg4u7FRBH7LosbApcT1LGejYyokrnHZ38UB2fIqRxkXSoePNDqBPm/jvkN
3wti3RK/PYkq46hGgNYTcb8LeWqbw5mkDChoznYXp5eh70zEGib9bC9lwI43bDDfmvkpJp4JcbIn
yBJSsEMACSLJ2QGJajcJdAfDoiK9J4NigLyXpV0eAZvj7lprzwKQIw7GJRfStA+Bb/Jog/j7aAeJ
cOjnoq+WlvmM4OXOVgGTpvGik3SDO6RGX5o9BR0DvO3f3NgloDSIEvyXZwzUN7f+nG/ESRQIAXSb
qr0sQP3bfBYhgydS9Wr//ciQmZrxPEsiFDNdYuLpgBY6SvIp/zzCnYp8gPvq1OheUFPcp47pTVtW
XRQC86Ci/Uwpyem+OXc4tt5P7bXrJT21ZpqD4PVRLTUIDInF3ZHFH+bWR04Zs15DZJTjxe+fXa7j
tqLeji2SJRKfVRqbuiSdv4SJ6VDuhVHNQiLREQpX7wkIiG6xerR0czkZhwheAo7LAeHQ05AJky6f
ZGq2R8G9nsWpQ3rIrrzZXb+/PgAfLnh5RDDzWj53pdkC+iYLhHP62Ol14Ba0I33CBKtkNHgt6Ki7
i57I+YnDSYmXV4BNG1dGMgf3rIgHSJ+ZIH53ylNiHkR9WPEDJltowoDOoriIZAseQRcJK35+epEd
GDiFRVZZS3guOnkRJcCORu5hJOPrsgzeCeS1v/tOmERePCfXXUs9eGQlSikkXUZHNFOEB/kncgGn
0AZZNDMEKdQg6P7T9Pw8H17kZny/JsoCd0uHc5wPFT/gwgNIBa0i/RvtzvzAiR4PcSvSBov1eMrN
SXiv0TwrUIqTbhaahPm8c1eiT3bmilBV3qSoM1kJW2ZFdhrMaHWXS+Jb9V9/BB8sMpuIEGeSAt8+
Ifwslp/+I9WGfguYJqF9xYQMRH9qwfwap6Q/SQBmz+cUDDVMfJY2Kl+29qqwSy99jEVJ6MIjIW1E
yZUYY4SJkScaE8a0vLNtpYc1QwLNucDvmutnlhGmd/ainRahQ16NSoJJFbWh3wxX8DKjAdOBW4gR
RH/V5kOxkA0dcA9ZeeKPdR+GVPWfhc5P/XG+MaDUrODRhVC4bFcwvFELjYG8wz+Cw+65o1ijAqWu
GrJi1ggGkocrJbjj1XNeaP7sEJgYIpYDxK+240iaZui6364Xyn0Mj636bkJ149EN/QIyNeV0DS31
SuC/JO3kED797oMysYOJK3Q5L8pL7nmV9PcphF5VKrnyMD8GzWH/SL/P8WPzRdw80OC0Rkn2i2Qy
GEL42x+KtlJ15qUYDprbEsvCe9tnT46RvB4VvJIkkSTcaEwnS0zXwXMaC2EsreyV1deRdqFQ2htt
ByaT+3mJDBVreyXKQ8wx5jIjNbpNz82Hn8gPvSduojwKTlacjwDH/KqOBBOkmn4UKe+ubuebEFEt
oznVhGPacG0uC/dez2kySCZWC5ytg6C7/hh6ZOO2nKFXWe3d83ZQkfLNiktXFu+Tl39nlqisEVAY
ZC+kiRVcLTzAAPK1WS8/OZXpkYQIs5YjW4vINNlzvU/piClh8B2kLOuyxCGyVewtiznDbKudZ4no
iW5yuFCrT5yJjop0yhdGA84dHMLN/scAurYbIV3er8Gy8rp+E31ainWVqbk1bPnIv2zjFW8+oFD2
ndSrsVj6eyjew54/q8nJcEC92xPAysrrZigu5soSDkr/rERQnjAEjvcv5SbTRy3VYeUv3J1cVUuE
cCq4reOKzIXf5liIe3YxFngww696/k1HzhP28hwlqf1AeC3n28po/3fbHkU9IGfZ11TD2CSdYUmL
4NzQ4/KKBg0hiXD817JTwHJplkdyeUmx42k6KNxhXIieiWfDHRPNon5U8TjgiEPmekSK8soVxAVB
y+52646tVb43QTmHmW8R1rkQ5LrGleLg9AE2bbXrWXp7UyRtdUV9G09FV3i5lNVFLkrmh/D2tXsy
rtOMKvo4vm0gshIH6PrwG+WVFxAYbvXPDorpbQwCBUcBHo/KRrjjGlzeAtxFmRGTPLeJeSnVTabb
gRIE7wKndTRbKphO2ESgPXKO/TtOffLmGYYOm5GrvvMs7m3RxsJ0MAIxal/XxUC+P5JU8l27CBT4
J3Jv3EHPKoZNvs5+WA3X3iaBbzU3k/tYx3Nx4kygWu5MT5Evf3lXNn/8laJRDytYqoRUwrmNzrJM
7Q1AbfVuFL+1uhxehUWM2fY/gQjayUZ2Qbv4vpLHKPEE0CzV/JEQsLcSv9/lfxU+p2M+jRAHmgSj
v7qkpw6bbrqaSPsGxgqTXWLcdKnjciieNfGkzoCeYGD49Iofj92nu27gNS3a3I0gnPLbBWn0kt1w
qvqfeZEv7erGdMP3MKuGXslpVF4SmDZCID5x++BByrMv0D33FWGdicnCvYl8P+FxRSSaCiCvfRBf
Zb+pLuNgBv5jUYFmZ5mNRHWtfetoGsnVHu/pzZ+3x983gWCLnw6ZXDeD2uKrSbQzrZTYgDSwlGSO
lEcCfhUNJ5xBjP0cIkmsLSnmqng9WQrlA/0iDgdWSMYwDymexOAn+tUrpCuWP8z4rPUyYDDbMuSp
b6S2eGdvp/9z3HhFv07yUVhcQ1DinoUQg0ztadgWHY/GQi758nUELy2WRxZ4ZaEAL8vp6ZbvQgLt
WUNTkTfoM1d+joztDFBWPY6u5xBMlJZPtOI6DvPZA/51eiVZykNE1q9ltnsdTqTFAskKgJk0n4E6
pwDxCZMJPtFW4ZBgCG8fNAxM1irgzGyWEnM8G04znFlmi6aQgrE3O5gFa47aoJdzoy2sRB0u9jwu
PN+3TFiVYGS1W0NUQ5GSGH4ZgDL/UIOa3kB3irl9nWLrMcTTS07QKMbDb/8Off18Kaj6eY0yIZAa
2MlrR5GbeMlKTZOuWTNskj0/av4h41AvsYLQxKUzLSM6gCizzyzCPJIqxFALuFY0ljCNccm0Qf23
yKqQLoEPUGdKbPemQAxtI2gTB/sRxid3uhbMbZ4L0EZYFtLzNLd8tDlaZjRjm/iFnyluZAezUJ4g
qaWVR3gu4tjG2aq+V8aCg9fCdOUYHtNHW/UvsGWq2xCVd8E8BzTlg0ipSxQTvhZhIUf7g6wUq4o4
97Wr9jEKxpGrCc9O4z/zYnDddL0EUyVBSjl2AADbMvvbJ1tYqE6vSOSrTI6whuy5G3npZJYaHcXh
/pINvR+uZMcmAyNrnWqTeuUJ5ks/OjbLNXdJsL6y6ybL21IPghebY9nu3rPbhgW+0u2cHAf4obab
MPYe+wVK8r9HkChxHzjNeRRCD29327K9KcpNbu0kkpyahbgNkbK/nM6dKNOI65gzc/weqhd8Feq5
DIa9xmzunvWdjbIZWwTBqfwZiA7uwzO/eHGlSJlyWgdJK24bZV5ycXBJeYJbiCQZEk1aCblXlASo
7DQIPAmAbAf7P4nVX1kBkls++/oyU/Ril0bZEWD/eqlCy7B7hNd4nQv7BL3RKXSZffsJJFxuN+RL
Fc00wFPPTMh7XXlwjLHRTDKO227OnAOOM+65bkVMBSfz+x75Jr+jm1BwmNU+s5oCFjeaGHB6O+lC
LejIjXBdI1MVxowGBnMwsWZZFm9xQyQzauy0X7C2XVRItLos4IMKIfzLGyvrXJZxz03xPJMJwa97
aZPKOO5slR+i91gUWOD1HGdQQSj9lEKSVDtM3mGNLedVeErPUBzUD9xUOhOKqAOiqmeNChs18V7p
R6k4ThoA4veMdyl2rH05LuEg32FlSuORStn+x4oPxhAp68cxWT+urXf/sNqVXjHk/GwAIZKuknoH
IIF5j8WANpxPAqvcAGTuMXPH/RrER8Yn+mYZKUPtqDUpcRGfCY2CII8xXQxHyT4FO+RXmswiu+HS
NVHLG3kWA+nCjJ0n/mxJgnhm6x1X6ZuGZ7NfOaA1/z2/G6dlOvAG7kpFVY0+4LQe/wG7ZY9k6FDI
E0Jjfzwdr7GJs7GRClwzJbFc9A7IngB3Sva0jGodNy/2PKFyyHEgVdstmVSzaYk8psQGZl5dLM0W
HzQy3JfQ36Z6uhu92qVQ0WeQ2vG0KiKS95Y/hQbCpWurXVjll+TtJbzSHTJSiAwOvn3dI3bEweAh
rv8U1/SJPy5sKWzhwNY/eCh0JFMRgnVJGW/1LQaxyLt3niSqOpdChU7XlwSC3Vb3HJRiAF7GoSDf
uwI8twGf0zb7lR+smu7zXHFdq92r9zox6GIg/thvaWvx5wD6wKiTQDaqY9aEcnyYsy51hfDLeItX
FQ1TEq0RtMXgAMjDTe8yjRFe9LoADHrfGpDz0/HZkmni8+PQEtl30UdVqnq4KiMgfezBnXs+cInp
DnvLUsNv0BwGxEHsG3R2ahZsjWSdLMMg3KLkMP1FOAsy9tQ1j6nmpI6gadqpIRHmiSoopxvBKHyn
qxKBAapt6+5ahPTaPsnreD1RwRgG3BToEaZzYYKRWatldEI3yw/NKkv3hYAaEOg6gxCW2xRUjfGx
YdpwVPGU3ghd9iEGW2e2cteUl1kOE9x221kbiWadwC/nn/kWzeAfuSzY+l7NrsidcgNxnFpPMbh9
2DF3aAEvPJawRWwUH84ov8lIEbJ8ANxWiMHNtMeLFuINw8TZ54fBCOW0R2ryjpYk5jMT6DrD2GOp
+1Asm25CaPvXiv9ij+q5HNR6iWATw1t9y30rU76Dc/g5kR+z51K5Mn6+92DgwixYRb3dV06Lsr9Y
mTVdrziNLjSlyzCdwwORGYz6fFx2JMJrnWCK4hMv2dW3erAkTAorR2fJIvQ+03D15YG0W8Moko8r
cQ+31VezeuE3Ho6Hq67CmMg4q/fpx6rGiIB/nfFI0E0LogTqwpiSeAM2fWpLIH8eJ7CtOtSVThar
C77qByTcMsJLnMpMEgh+RM3ZD42QRgk5F65n40UqcEm10OkgHf7O4Ye4xHhId90F51UUxcJfX7b6
FhLIgsqQziwgim1Ta6j7Mc09ehyvHNJpI2jlh3GcPYM+3O2jJHgzZ9XAEMT7c3pr3wULADUs0HEC
ojflYqoRLT6dGS9fQaIo8mTLz6s18ITn19mZKGX8urFDNA4sjx2ju3PXlA8m7ncBh2n+H6yK/J8O
6C0Mssu1ypz63BoIqlLgJSpe8HFMrNttrcAxuTJoqulca8iDcjz8xH6hHSKDJh8sssKHj/JG08bk
137R4frSo1L4BFm+oU1SXpKohGm0eBzguub4Q5tjfFZXt6dblnt6bsrxFuESTJUz+GU5w+hOyZVZ
ZDixQNhLxClF3nuljzorLxY1ZVzAhg8frG9hHQ5LpVAxiP9KhjDP59qgxdmfthGBnQ+s8Bpyp/D8
jYYVIZOF4SOJgW4cBkhY2LQ1b3RhQPpPei3IfZK+wHlnx+g2Egk5fQuGRkPimGcUmHrWDaBMBBu+
M0s4Esy2R7oPorlUzUSKh3bnuc0TveYJ0rUuJ0khM/LxNAe9sDzoxZAVJehuGma9HFUsRwW6y2rV
9pZC8l0qysHJ8AIddbl4vqQftVFhvtKXzGMGtgIBMB4yQaU5Vhb1psQaobXyv/jy6oFgXZIu/8DM
HtPI9MsaR91kYGwPzlpF4qUeGjFPOr9C376jO00ybXwC+n/JS8mzRDSAua3HkqNa/IWmDX+Zh6G2
+iLabdHJ9ivCkMc2DaGqni689LkDOrM7xsxnX307qxKi/322afLP8LWu+72sfB27W62PnR6Fyepv
BGnih6k/dv6YbivNgxXut5e35qlFt322UVYZifVIhr7KUfi6uxI494gcjPuNBMOFXWVMEG75naEL
IrjCyrz8kwARY65yqVd60fWan5XjCeO0e8aCgFHRi6VBp1jHvSdY/jqJeUVQkdq/D2Yo5ehPwqN2
QnEFUt9ag/9fwOkPej6mX9sxnKn5IwiCmGlHYKhBD7H6liyCwX8YwYWZICU/8HFzrzgRhxhSbv99
jI9ThYvpWLXSm3GHhVoiIagIfV/TaZwcOBm6YUJGkfQtPctLUlNYABOp/sZbt5n5FOKWiy4fbLfN
oIhHOO0QK6PQKgH/VEmJLzzhMdZeWqiUgCSgEA4h82tGDo3emg/i/MEehJ2F+9CpO11nELypm07W
acGvxVs/u3s/AHvDOModUQP8cGD5QkvhNLkMP/aiRjzbEkcxxMYt9wdd2ki/YTnXLeohqP0wCYii
cSlW9ke/ghYVNioHABN4ITJPncWPg9+fEOxk5/pbMj+46c/3TUio2sYiNlJm29fgSvybVFUy3Qfq
4bqeYq+VJmKumfRDnS5gc+FMgYrXBADoFG9Rr3svz16CUicgEs1W/buZ/EpeDz0WX5aqEnMax1AQ
b4hLt2PQ8xrHp24UUdqHbEe2l3Ius4yqt/SfJZCrVfBUTZQQPxYJC6I16lGD94fhzPL3+lf3pnD2
jjNSwfUwlKlF6SwNlSOQwBKcjMKToESgM3sYyptBGppXWFKQ6naFgFbLlDGvvPUduFaCIX409gly
b4KwunvzYuz2WaX8iIbG73iHxG1bSbKuaUu59Zz96GR7si8FiL3ju90/ARXHD1LYta/j+eJRkARo
G9w46AaqZSXlG0YEHRf/zTbTpImJUPtQVa/RQbE53YypAq3V/BkSmUfUzZ7LBCyJBYBwKgD+c627
UrY/DTRne1siZBsEPGPzySxVQO6IcE6klsvRqwRhe5hxzQtk610jqV534Kvhh8zLhAfPd5Iy9/+R
Vm/JLBCSx1T15IC8j9nc2Ae3WwpIy8fU9OMGTkvxfn/blfr/GhVoSzjPv70mL5eKWBat1He/qpqd
jy1tVohg7H7oSN6EowmdvkKzSPjiBO5rZu7sNxTHaglhicHDp9wmw2m0eEr3z8/qRsZlk/tMasmN
/BkIj036iyiEw2hNR77pITo8DuVJjg8qCRavupslK8sy3bf8pogAbZkuICrMqTqh6ch0pTiAR6lq
qs25Ln2mJmQP6xYcWAFwaX/ZvL7Frnuwtwm3ALg4mGIeNl0vDoaKG290cmvcs58YxVXfZ9+kj9P7
/l+gFA3BYOkyhzH7Yphb04HkP4Or78Ad2YSeDDutr+PDXfM4uYlZkaNVogvi9dxkfGiI2o54UQz1
fX75aEVRxLP568ehxbq12Lei8ZiPxbUl1QOQqLHQmydQ05LguWUlaQ7JhnIc7IaJ7FlwaZcUAumv
FWIn6SBnOXIyvpMjOOTRMY1Io6cCBrZOBJX1nQQ8ZZvVNrLQsDE8jZrwErg5B/JhnVEjuS4oUxh3
ERGeeYE/qSjQvvFRR5ABmiV5Rqw45L3PSQqbAkl5mQxSMYaR6l/WQyJ7BxZCTDln84WbBaFxLjGG
X+Qlzwz58ZY0R74YRfZq1u1geAxpUxglR969Lju3R4Ilv5um541uX+BIgEZSFLpsJG0mu244XML0
I7zxuRyFyfuh4PL572EmQSD0+XRByc1l+nrXq2540qtPpO4HJNFhPHP87zDPdKNF9PeeONAfY8Nb
sU69qEJYVsix7XLbe6L9+/PY7xguYXdllQy+xyVp89N20gIhxkPfah0SYT7wbigfvQFFRxh1CwKM
5MWaCXf9bG2kkIi1qKhfW5iP7/WL4RnACNqcnGmNas/dmHRlrKD8qnKM7ieHmJGlpjElvk3XtXDs
tF6R/05WtrLa/zx07m3869pfR3wMpUoXdivmR7MZFXL1rW9t5NgOIP+X3SqzAqThXo/ieqtxruHf
A1Jl9qqI11yqlJD3i6RfhxtPD7+b8Q/Sj/1SXCutwhQtY4SaDWnnBNkXvxIxDugtTk2L31nkdRpv
AaLshZVhYyerzBUKOPzplgAs4vpGe0QP7q+6eWGbB0v2yxnrDJ7JPnV0wL1pwLmKCbStBYgRjeE0
bSEK8Nni8kaon0JJk822S7Ot7J3AAjUVBmMw201xTzlIxbENs1cl47uzc81Frl+VMaelIhReDg7g
MPZnJYrFNfEVe0GnqdPt+KS13pRv6R1wTToG/XChy/oNWhChplCcoRlYJBBhItrkU6HaRHcvRVD4
8rwhQVJg4TJEPHQE21UnAWKYCYrC0sfB5b0shgypMsRPTb+EkaihY5GSdzCyObc7r+vIqvRAkOga
YIAHh1kHfgOIl6xg9jpMkW1RfazPKWurYWWNoBtf3SR86c2s8TYrSWS4/bjFJsYuE5KRdnbsKvkU
vBoFHo4R0X4iUhIRSG7Oc9TzKCQSn8Pr0lIzjVuIrnP82W0JFkAg9KinYgm6cw3fi9iTQm5bjXnu
Tqms81pkDK+vxTxvD54Hg1sSXV+FpBNUNlVD2ce6wCspfB6D22SfSRQ7jw/nGubnalf6Z5pDCTSs
3A/KY34JSLkx9rFZUBVqxcej8pqCN66r8Et7gAt/VgZkTkycEl9eIwPOPa/jfIAdYRjWKLDy3C5Q
rI0UzVyxQZ65UU/Q8JumnALZcVASS+19rfDmlEslXwOogFb1d0oAA9oHerwvVlnhyfB/dwkpnlEc
GMHBqCDEzdfnEfwNye7smHh8GTeu3GhgoKwkVEMICoSZVh7C3ZUMxEQs9RPP+dB3PnXKgTWnDUvf
yYahy+tY4Z8V/1dwAJvIsZzN6f6+ktBczDRCL8ukak8wX8tzn6mTHN7oKtml7B9zramRZ0n6riBb
hQAonmmNCkBVtLI/66OrYz+PwD7E5A/25Z41i6yQBngHFUSMZW5Sz4G8krGD2VwCszVT9NRlWdi/
Gam18ObA4u3TS1/qgrMOr6xG+dFUYTQKGyLXn5o0FKqIyesXlbVNIWeHp8el//IN18h2URw68tj7
yRNqwg6iBdv+ZSKS5iHwKEPTgpMkWRqZjy0+9bQDN1hb6hVpItWgLtLHl3nkdxUv7LEwof7eCWlR
XSnh5NOeWNoXq4KgeriSIMAtNVfVdVoybnQbnJXQFQetTbN1GE3gOfKDLcq+cHk+OlnXpSTHtqwy
cqfcorMJFSdg+RN/C5aaFHdAE09XPv2p6RMSq3rsuiv4uvCCfLco25BHq0ygD7VUtadORAWXCWFx
xWLyKfvX7v3wNRRIBsDVQe5ltNss2hu//FJI1k9GCmYywMU86RYpqHys6JZKzfJj+0z1x4LUwBmx
mA7vY46RkZoimeNsXZ5rCMYdGhFfIjFR4NFdWpt8oEaHjLTPAbbmHTy7EoID4qleicYQvYvZecQx
Qxv914jZXbF4dh8XfGHW2FWaegnA8H5YfpkLZ3qruzLn/bylld0SY76GPM41BpSacAysYlsHA1a3
56ExpDgMT/2/0/Uevo33LhjG0t3D3k+wkAQEvg382yf+Xfi+PFhFxLyBEURakLqNF1bPp7M1HPDO
usCJJVIeloDuhyrWbI/miPj5SP4Ld7RLqlzIhVIXxEJ55r94Hkl3G6uW6eXV3IjenZhGDULvNnxl
u1D4I6+RSTdk8UISh/vNM52KYJ9cAtErDALDBUuolWuELt8iUMe6I5SFObNpEblc6t23z3ZjzdFN
iFzFDqaAkFHgknOT/5J/tGTy0cBV66zCp771W0ZfW8+1O9TJMhHZzpDQ/x84dAjYB5qBqWOfvEcP
QSzH9WJtxUrGC/Z9Zv5t9RFHCbEgZs7ZUeucjAIYeQH0n1lRzVPfCrahJjs98s6Vg4cHm7ArBNQP
dDQ/P7VWDX1easzIn0kEhLED3YOI+m0cqEZ02lZrm/ZyS1sEHJ6K/SGmABxmJtkPaGgNiV+x2d26
q3Cxh1msCFzq2rG2coqYmKpp8+LtpTFIiq9G3QgMVwT4DD5V4P136ovyFVMxXwF8NwCXyxRs5LRy
iJsfqOFXnBltf0h/JHx6GuNjj0ksFHgMXQD1ZBWfdhaKOEYLdG6GX+FbEEV3KsyPUrqt/WFcW1rE
O/pIRHab1U+lPS+T2XeU9JjeiCOsxHjLg28GMfFiPF6KAAPmIjaiDXUSWfYcWXRcKAAtDXYqVcuP
Mg4liZiJXP39Zi2n4QpdY7TnY+G9ts78p12vYRQxirvAfCQlARJhrnr9sxtxPCDjWW2iVD2SRzSR
DY7e5tlgZEIuQ2Hn8ZFWEdFaDsS8ZHCp0NO2x8EUS6+OLh1yhlqJZ07XxlDD6In4Hvtqd86lb/sJ
lazZsrB5JKkPQTWxa4L+ZLEOo/z3b6U9sRCNeohRvHgwX3xEGx0Kokkwpi0vUH/RZRp6Xlze3xt8
Xg/yu/nv5GNCBf00E2+ZBN1kogCA5SQ1Rf/Ealo73h3O/fAMDiIKtF0RK3BQUwmFV3JKMOLtTueT
6lUeYLPQN6jbOW3hOhH2yoZOq8qt97H2UpQEFbxHO+e7QZq29k3HIiY5kultzmpKSZ4k1YOhQdbF
E3sAOJTi8/vkTpl1K6Y9i9i1YgggBMMo3FqPX2RMgHCIGT25l7DTe1C00MCNhfoMModSz/6CI8Zn
nGc/WOBCJQjvJe600TMXxLEHXojWSVgkDTnShJZXT1i+m9FAmKVQeIQQCmnfN94jMq3F5+ZL3gxa
UBpF5XqSGdJWQi3r9za/aBbu8YTrrr3kxE5BrJ9x53Lggoa/9XbVXFLq9O2hkInih/hDLo5bGNko
3MJOlErZEKQgY75frwgArh5QH4THx6Xq90xgslnrFAiHFtRU5ZC2jfT3tB7tAgPrhkfG1efaI4Eb
kmvG5VfX7sWZBeHbGJLKTmWg859hsCZpZkjQKSN2zSnkhgxUmGaKllIVMy41vo4lLyPtfoSrJHAn
t2fdvPuzJ5xKr1jqfUfqxL1PhSptJENc7wij10TvXi3qIUVrVnPM6xraBSRr/GBKPTxIvYMstIV9
2MxBk4tEKsP8mFoUoD6wR0p7kZDCzPvUBbEdeCm/NDazEMFG6LQsMMppB2lEPt4lQtfZ96DIr82C
eKcqAi1fNt4sMzxKdY5QDKBuofxfg6OIppskV+lSCNKrZ+rZ3IQ65Xsa3/o6ZShz5GYzT94bCYtj
KBipKwBOnI+vwQT9hLt4NLTe5IdORYmvUV1/AU1MspX3KPgTg7up+j5lj6Lr93xwNFRIRBm9uAAS
rIA82WOO+SMfYeffsphtJtH5gYuODw95UojIWOwo7EhldBoNjX2sWdVk/DFRqhhj5eqk4FGcKlas
PE+95iaKI9OM93CRI0ZkF6FwZp9J7llqgw078Vx4ROe6ZDwgODQrk/zfB3PxPB6Xg8VRQmUwwWb+
KB6kxlYCVU/RVt6xiQb2eZ28Kvr2CYE7G+3YHsfOTq1P/D7QCdzyV/HZmJ/ddinsNzZuGnt0xixV
x4cttLrxsaXjjV8HIoZ+RanCEHNEzq8qrl9WkGGrETAXOjLaaaJvBwLrXYdkRNjSY2pclp0ylWeI
7iYd3dijDZIJOIf3zLdi4JxuqtsAiS1/Xu01jkYSycBZRGW2nxdanPYCeMzHzojkipSBdKdQwGw1
HEDlmbMeQRaw7zXH6fWw2aCv0O4VtZbxOIp12ktjuSs994a2LWomB7vHFqmagyCloeiofAoLCdna
IO1zhN9XYu+oZ+y4f3AueCdFMcEA0a4uwPcA8WDY9ODrVs5djdmjzfJU9bvAPXUUUqNJPsjQFrq8
0UTbrUugco9o26mG3uDox2J83EBFgsFD2NltkXYkZAiBQlN7lx9GPkinvvk1Ywn0YyLHN9fWtNo+
DiEDiP81AcgLYwuFbrN9MLsGIR+BHsLL/nT3mB4U2XrHq+82/PYDAirFx8qakOFR7Hi328aET54G
PJNFziY8+Zu8pyikp31q9WInpxgJdeExanLbvNwjH1F4CtSPXfNj1yhB+gyD0CcbqqpzopFeYP3N
DB25Ckdj/1YbNRGmJ8IwoE3hSBZAWKytYPPjdZKcuxaoxw4D515A3wg4hMyutvXUr0HL1zoS1jSD
c533S30vU+JB8CRutzlDORS0Hcwvb9qgHlwiD49kO6uDPpntrgMsKDTa+u+IibHour4rZegV3Qxq
1wPcI8nz13tjkis6B0udlFjOfaIQLDGjn40TJQiG74BaBfjQeo89kWX5vFqEOkILxisEdGW6zuGq
5T1nAVOCdrdA4gg3qRU05Bqh/EG8+hclXucjrnhXf/zMbtxnDD1cFvCGrRAUFves1CI6fvP5bDP/
ZJ0sAjMpVfSXbe/yH982GmWhFMLvgp90uW2BSH00zbDmmsCTFhg9yXK8j6apQ77FoV8YQxEL/k+P
utFR1FFwrT2e7XyFj7Cl9f4C1z6lwolDaNV/L4h9CTGBkLgIkd1YBxC6wJ0RF7XbcAAIdCkZ1PYY
D2rpvNWZP+l4RZ9XBAP795vA07ZG8oEpurpd1PEf63pNwTDp9G2Ww9D1BfWgGwkKG/rr3hB2C5rT
YNfPWMF+gUbJqNv6ohD35XICp6NS4vz/zicFDn7ubSogWvMALwx/HOY18t2ayY1QF7QiGDteb40K
+QaVMF5RavPtFSzVobC4UYKWxB73BtJlooDLh+mAmdYvX5dt/L+b+p/yZtgnizRGHhjm7vTvwlel
zt4OaEaG4kukCnrwsyegkm1ot+1FClNABGcOJZ6TgouoVIMQM5JOFmmczAhOTjgaTTOgqcofwtP5
woWED3oXGvpuoqwHdvHt76uibJADuVtFFDQ2BVpn6jdnxKYUo94xWI/3nRm+WVpTXBmzY+1ShNfH
EfiGUUi0XWrJrarC2M3H3giIQI4pn0gK4c+BJehU25gQ3ZZ7eVC9E7zvWe9Z0sR5e0m5iq5PnQX4
kcRPs4ffShv2My8kskRoBM9DBtdRtRqxLOYfdzsFgmONSSn8iu5zHtwyf/hjQavUTDZsMvq/Rrbv
1StsMgeFtnrYVthM0YlpOuegnYrDIj2+Zikuk7ARpPt/fLvTS++KERN5IJ9NONvXmEzvDHv8Z8/2
7SWniAWURYHFBhL/UE7HHqT86zLI/y5fof9EeTb7pUNRoHVDwYJ3GwdevBrCZzIFnNa9iAap28L7
/lBm8Jtdjtw+EOliE7xNHj8hLD77ENT5WJ+f76A12psSyqq5boaL1J8hRpUSP+cIolwMqwE9xVZW
cfCda7+r9vyYDb7UmYFRW7FNjpTkdsrDlRSqT0pBAdTzAhCYq6iTzspnKJiDxbBgLNKuO2Y3PytI
YjLbd/fW031AaVq2G3phbeXS4VYsUulqIMrNhgBN1gXRgmA6xsQLUM2l3cNbEHDYeCM9q2WBqDDR
k6fB0MAhXvEdrWLYrYUZWdc2wFJxUbTnwBYNaBnUAQuUi/D25tChaq8gKUHP0LUqpK3SGLwru7AP
a0X7Qv5EI/nrS6ZkXWH2rmDqqDlse+q3JQPN6B+sC5PPA80wY1fhykorHCeuVDeXDhoJR6DXuYCz
wcOMH7aeaRoWGuGV76gaUef0gyPWwLwmXs+2NPkjNc6/i3vdybcNOuniwbiAzrig50R62E6eLa1x
UsVpO/sCbd64utrAM77tyuOw1tLRWURRjaqdbBMIbT0dF7bjLqHm7DmixbkHs0HeWV6V9jI1wMhQ
TgjvI3mhplqqFFSc77RLAITqJjhjFzhVnqY4tXoxvt1/3WDGboVtYtneaWsIB+7Fx9k94NM0VUXm
0vmqLXqjemMUHE5izQY+b59IxrQNCbD80fU2t+jCUt/9Aq1SWVPX887F39Oq/BJxBFqYeNGo+MRu
Q/L7GqTKRjK4+KyvALBOHdnY/yNG04kshgvj6gdzup8pLxTE/OmRS9ylnazMZkzUAzbvHP/Px/U3
0XCSYUpWubGotiha5I7yMQBjGWtdbalCCidmsGWxSAFk7rgP/vywvn8ZkFL3A5aYtkhWihrHEcCW
p5Rd0rwmCu5CuJOC78GWsa1/U4G5OFvcwRodOcuvALjns7sFJmeSlPHPRhpWyx5D50L6NPHna+9v
LIPTm+qGMYiiYr/nZ2pbTtxyZRdyn0jqVMr6aGsWwwVx5KXch6g9mZ5g6MCqSQxCwqmafX5A63Cz
4XmAriqlTZqdGiB+zt+8rRrTKRRSExzk7atnBOFlzj9aHPumZnQAasqKuB3U/93SCDOCW51+wBOM
LPK984Y0jnCm47P93NKV8BM9bhB/VDn+npQGAhj1wgMdoZFwsWYye0efx7uAPSnG8BanxmGWql/S
gIn5NOqsjDq6J/y4GA9zTWCefQdMC6uJpDT63bLBtSmgbo2akSFhdwNjbbJZbOxKrZslFzKZY83w
aPxPlh3rkHHjS4XLOK9+2SZ12ORjUJfORUZNB63SX54YusImzSYlmSrw0WKAnXKZ70gXlvS7ox44
Du2/2n8VKAybfrP87qHNhDl9kTc+5/gGvJBZb9/Npw3F5v2JXnxl82P4Qc7ikxiW9Yij4AxLltXh
/FeJjuujmcoG/YVEdS366e2N/8ww2fCIMxF4ojaiybQW2r8Z0OqKAGKnq/tjB7RZNgaHH7m/tv7Z
kklqvD2z+1gJZlQBD+Hxpr/v00USF6EZY9LYz5q6B0fC/he4sOiXIHLrBs7/3ab/I5XXdlpxYSJX
Og1tNBMGx5UppoW9G0/QgskT84N03HQtUIdcXnqi6OAc5z9qcWsxg7+PUfWyrIngnxcjO3R1JIWo
djsSAogLgwDdX33Kk/TTa+Gz5EjY25mk1+KAqClHpXpt5rXTVAWMaHDOR0KBZhJrpTeDSTYw+aIE
9cPjugNPeuEK82N9flnFKaXHnCqELKhYLx4SUdJcnmljUsLOu/MJiTyA3ls2yiOpqiu3ooemgF3Y
+0NqQVVtSIZ7D4JYYE8zj+65ygOlUhpZ4DMMw6hH90JxDvrDNpFMaIQ9Hv+sF7+d8XC5s0R98cEc
19o8QnqC3vQr3P15cO/wwKBeT1IosVcoRLcUeTSgsIvBBb4xWxcNitugdiqg+69oXmEUCFXqKtaG
QcjDlRK2GKHGg1S3rHfs0N/pJ3qlE0+PjbuCXNObR8ZVnTxwJVvBL5kShQlBbtzTf9MosxaDZUCw
QAr9q42fqwcxp956V20Q/dR2roHk6mz3Oj6t4xUF9i8skCtZi7BID43oJ0SX1Liwz+rqIKt1UNA5
hjnapQq1KHlA7eDF5De41wrG1kCQgb0XfGuu7XGeD/i50NMZGNucrAEMNTicGJyt1uLJ/vQWoDOD
O11O9RDmGfr7ozXx8m5WUKN4c+/0fsxi/Srcz5hAKrQ6tsYuGcPUCq/++oy5oPLeZhzoXdjvzAHy
8UNirdr/gOGrZJD4k0mkjzAZyib/UmF9aCiOPOnIveL8F0G6su/hwHZLUBAJAvazYPr10NsdVKNZ
XU8oszygivxteKHlwuTXd0fQJKksDLrKGGC2IBoMMrnp95w7mDXuDZzLsDg1H0U35J2PkfovAusp
XEOjHC5kOnRD+r6YRu6flC4Ot17T1PqjW9i25L2IkiDzIFSUPXeYWUkieyf+/+YEhkSDXaqiOKub
JZmLWTma+eXjfNaWVFvebaZ0Gax7zSY4tSSXvFAzQwNTv5PCoZGLi8YfS63VDMRR97eKnrP9iQVd
Kn2bTcvidGRO6Hq1KdHFYFX+uVxxsTgqzNrZYXsm1Y20rR1Wh+mWmDkWcS5xZeUZPtOT3KfUmxKY
tYJRQFCpIZfKxADhnPxhc87kzKVQMlvnSF2JxbRMs6wrQ+k8JMSoSXx6ScIQnL3IlaopcR83XvXc
gr9nOGZBdz8tVsQdn48AoW3lrRkY+QGQR//0v8nZwoRcK53PmPGduZ4jo8LnpYhANRgW68qNNSOO
PjfSs7Sth//HELPPwUi+jzfqL+pyLiHmDsvF0O327t7i7IQFb0KnuwbBkqsUg3KQyvPVHbKZ9FNC
M+Enb15C5cRz7M/mHR+dz8HCffBBHqGnuKaMgtXmFZ+IcLq9smhiGgloRd/yPDT4pmmqHhbhUM9f
jAgtrlbwCf/RJjIArXCGxoebjV46dg7LdgvHY01QPeOA6vF4pQVU/geY5362C0iMQG0tEPMydYzV
RHd3r7QrbgLRLo76lVkofX1mugqYmYTd6FAsv16R/dCw1QKqhJGZFupYPloaCdZ2rfWNAIbf9KAb
HSAIbfQ01d5W9utsM+d+jFgMRdHvz6JXJXpkgWtO/9z72mS2nazmKPjJv40jJ01hLFEjD7Hiywvf
qvHKyvjxzw1R26wYj6jhL7bmkADcJNj8zv+aM8EEKL5Y0Kym2xj+03yDyhH2muPCnQWs2MJLKBpS
BG0l8ZUffW2gwkjeIT/LxHxJ1JDkKbWfl/FS+0upNhoNYmj5q/X36L+Bpz20NRW04DedJhJRNLT8
A27ZWI0eGJ+vUkf7KVMlW40I+jmmlSwGb8r+/DIJZ4W0kJfZRBn2SywsJfcFr2dhwCmE4Pe1EFlv
leSdJDPNmfM2+FN+D1LIzoLpcLVdN9PW4c0NQsTrCeKXFOp56P/qsyUzNYVM/FSWoYoaNeIDOZOo
xQh3hZZcBh5bbuD3BlhukQ3rqAFaqMVLFDGekgZORRDJqFPdqEPBkYEtmYm26NXkRv3rppjZQ3lJ
+M2SId+KqSj8o7+AqdrNZK6opzqAK3OWbkHIcJ1BGRDIUY4UNQdSJd2AxXvbcQF2qDtj5RhCK+SS
8b0y7fSN8vPzaQnsp5Kytu9gnF7dBXB+OkYwEy7mHVlo5nljJl8KkSsbDdwlHN1KnK/IBkJPVGOE
3kYu82wCJrPyfFdRY9Yjcr9hsV8/jo+aAj/9lRJ5jYXSvz0W+vhg1NMw6vprabbD51vocBuefMXp
BVYj6yJAVwnsrS4ImB0rLkBzNUfsnkMXhDiadUVVjo5k6hngsMNdGw5eeLdDtvDek0+U4xFNXIz+
ff5VKctxAKXlbHCAU0q6n0B77OEB99UQ8eXL1kzbJlgFVm52eOhSpaiWz6Gk1XfwvBX3RQ97f9w6
yMkMzouogf0y+LDDNH3qXQwbA9JdaxlRIN1vMv1CjPNjzwbfiqJZFJqzc5/2/acOaaQaK6PIrPCa
yR9XxrEPYvzL0GSZRD3peyR5MOJyX0Lrx+ug9PzHwTuVwCU+g1DWHvyl3lOvmep9eBDsJVCCnQFV
A2hDi9CkGHCn0ckCjhWr749qEQJRfnIsIWaFTmQpQmae9FqNjv3RzKM8ColcKS3cKWGVZM11L+nI
RQMU9Yox37U5N8KGVjQ6Z8mFUrxK+1p9Zb/er4Di1DNSsKqGUM2SciaKiwGXvrVLOoE1Mt+4XNYy
0E3W1AMiy7b8sRBRRCW74NaQe4E5H1Z6PLkOC9UE6cErbWToLAncq/bqxljmL5uIcJyoBjQxgkgs
ym46HJm19Mm56jw9DeOe5IKBpNyfj+ctLTLh5ytDnKcXWuuWyfyT58252As8Dt0MTaF1MY199AYh
byAZSe1Dennx2YIJwjK76PhlJ7SECsgzE2M+NtNU6cjQRTRP7cAqoKobOS1luRL8u1tiPkQuKKl6
wZjqiQYGBgzvVcKolyG5tghWKc9rweg3aD03dI/sFgy+briMuzAQGIhCt7M7TgqoLEfxM4bCf+MB
qBwaj428LSRSHll6JzKaJogSrtqhCrLJef++2bzkV0U7DQcwUv2mXL9jDcTilWHshHAudZRIqpwr
fPW1W1856CX3NtrloIAcm+wuGdEyrg8ei/a6gBDHQe4lAr8oPepGPgnsQEtwPviJn0Wt60dpOBSL
8FL1X0KQoM26M1kaOZsw8Mxr97oAn+vTenYf8LtVDhS/UEleF0GWvFF9KteZT7/3eQ5fYmaGhKP+
3e4ddZJ5PoSg4NbiK7VS9IGU7kEu4G+01byO/JWWIO6q+rN+Q5pnKQ12mgX6PpP8s6WgH2quHduJ
p6KalYo6lu2kOxTR+Q4eFdQahH1cEM0Oi3C11OPMBtr6H6Aq/21FXilvqoTo//jT1zHLA31pI1M0
6tXVD8jwtCUXIO5h/6cqAK/pMq03bnuHw/riNUGQsvIuFgDDh5gguFBk4GTRhUX+xnXoRiSaYwFs
8NbXQWMnCg9cdcsBKSvILCGM9h9iXcUBEJ/udT6qhJgeUwUbqEoKkWXYVEOCyeGMSgsizVDzzgC1
DN2D0HU/JNbsEKDCpkaogqn8XRJYquitdfivfd4nWRcAcjmsLsgS0B3eEjxI5w7uiV1ghqWYiCiK
fd+wEqy1A9x8jERxeZ76xnj2tbYM/YHvUX3VkGMUN229I422uuTMmxCOdnBvDCO+/oYCdVot/j98
20K0u9cqwTmOVVmXMar+KP5Z1axNNgeNZlC6IIQS8MXymo19jlA/egx/kKSaqIk0IVOEJ7LiDLZ6
GAlD37s/7yRVH9gAAWQpudfS+IsFAJm1ss9iEwzjopSI4hx3aawkfJnMqAQDogVPlmjQamDVBueF
A0C/5oz1Mt2tdndrb0BFsaVUenU2S+MpQ0AVTV5mb9OEyIPrQWjaEZBvYc4ZyLHzUYVLoM1Ygg1Q
Ly4VWC88KgZPC7gcjy8dwmyIqu7x2P1cuDrW/dMNegFzh0MZ57UPjM6JZ+64PaAOUBcnWTVPRJkc
am+Ivc+u7uf2NuECngaSBSL+7fM91HPstZSKlTWYHZ9V+guq6ZVdMz1u/zSAg6ei7zoMwyWm5dA7
oFi6lzpIei+S9+XGafAohcRrPp54K6LihopqQo8iWRYrz/kuzDJ0BO1HEqocI2qHc1BjsQpKZndJ
d0Wd36EG8eF7YLk9IUzGlxwGMm/bzR5mEv3vAeSUS8kMIfh8S/sNHN2TEDGbUzXfmtQ0SNZBqfxB
+eQ4XSsipGLZ+cPLXRM+dg7miowCVLZM4M8Gdt90gFEdCot7vf9bP/c9Q9Pn/StqkPTBMfczU70/
qrRWjAsGaZIqPblpeYzpJtQ3IeXp6xZMweOnrhfmrni+/g+tTjs4gLKYwmYyF78pejmuerAv0FWG
CBRvE0qabaNMQw+n8uc2+brKp5LJZm6hOKBzKvQhM4wlxLyNU6aPLBF0bkYzhiyNTR1Xh7FyRLf3
Fqy5Bkb6ZxqgfOckTK6OFejzm42dFILpZbbByow7yhYlGFfrmYk/eA2/0ibLMXZuIlRVuWh15d/d
TZxCtmwIPRp1Re/IXpeRBiNflpA6Qd8LDHoaqjz4McXvHUFtl88D5D09iRO0H96eAACvVSUYmZSb
JJnraL0teYpxjJXtbJ/NWW0QVxOMyTR7LA8DLjc5AmKeFHNDV2NY28MhNkQ9cOCJe92GdcSq+AX+
oUsuvkC24eH9JbNoNC2I2WY2/qD4gytLn1Txix3MllSsJ36VSbi3CxwVZ/R8F7WF3G5v/kzyRxor
WeFrXHaOF7Sfpi4GdyOcb1Xsb8HrhHrpn/CK8mIl/K2IKJaw9r/mjZQMKxK6jobf7Y4uXSZll6MU
f0GfT8+xyZhssPfVixQpxGvoZSsZ9bfj1O7Ul0HA/mu1JcysjNBOFpY/6D2yNFHfgEUe2oYA6sNV
Wa7sRWP8e9uepAofOj0NSA4Tz7hwPMO8va0Bp2BPPXrw4nHRqmwXahhaz1DOMJYOSD5cJU51IY9+
xrI8GeYW4NsR/8xdR9z0A2ixeWnhW6KF4EKUahpx9kkVIvEwGaWc72JNKlCXwdQayu7IGmDdjtlK
TNE8g2mHv+XEkLT+AE4jBTy3iwpO3xnPdN7tsCRTtLzmXRQTLLAPf76ZyhuTw3d5O4TVTuLS86Ok
Q1cWNPrr2WWjMwO02aGsZc7tH0lAtTGGiRUz1bRuLOFHNozqHf/lQYO7Y4AemqpzEZMvapebVC7X
66I5BG008GArLy738xEmaF0+ie+ik3+Tf28lGuDSDJOPZ1TljKo2Vcn+0Ca2pvx/6ygfEcYyicfz
jo03ALhOqF7vSb6TRqXgXVsjzVh5qBo0rWFBq0da1kXRjcboRNz25L5NrBEyjDsvco9JUmHr9G/s
4a8kWMi/god4+viS4HV/kRbH8NpbCdFnI1BwQLqN/FkkvJg2/ItweKSsjSiSmndP4tyFFYqSm9i0
cyeCV98+l8t/z9lZ1PtxLy2lBvZvIhLF06/lgaZqMzYzU0J/lVhjQkb9yuabSkwL0z+rGrx6xJVU
qL3szcprl7WdT1FjFuEsSh3kgAXLXXeHEF6PqxU9ag6P9o7+kNuGPPqqePhqnCiswYIJdM7u4bly
npIlaVngQnCzOh+I1RBajMbLj31lt4a7a02DFrLNwPG91cO1Xn6nrkcHRat2Bpr9JJuDFCIepl/2
uO8g3K9u91hK7n1FiVV57JHM8mxrQK82zaWs2IpMCWRdi926hEazVW/r2qpA++Ix+LMVyUS72/o6
RHvBmm2izorsDNsgyJN3w3zZcmqIsJxQeYf5mFvj4WZ31Np9PUF6Oh1NsC7YPFKVXl0NOELzkcbE
U26z4ULFzValD1FUH56mkcG068ar/fQkMH4Krw7Fj63lsJZqnOGIkouAnINGWSGYfHfqEnUAE0pQ
LXehwix4sKmxaEsH7opejMsc5j8E0Z0qQGzoKWn2LGFb3LX4lrF9eU4NnJcUkrLVvhunUTrOqWNb
v27AF17f1ZCxhMgMihQ7ym4+HbBT+suV2qRPNIxY0NKhMW2ZFEkjxehQmP6zKhOb99SlBplQB1Xz
70VXPmAaLsYnvfsYHYjbzflki/4o6PFdZL6ESmKO5hK+xpZGGAK8Wc6nLl6BLJXwg/wnjrvRkbyt
o0Z6owKViBENex4ujtUnTlgIpsewMEQSQya9J/e0b5l7EU2DuseNn1qI3zJ26mqE6uLcRvK4cNvm
RxlSyD+1Tku9ljp8S/skhtrjGH08JIrl3TUPWKCQyPevO86oRuIZ5F/YNW/XCpQ/kWtgttoFO9UW
2N8mVCPwwmM+x19c6G4I7CfygHunDd7w3C6MscG3qiGCuV9NIRDVw1XIrMpYdlQ3ex9HauRuB3H+
1CtEDfPqws0yrFwJdBI4hUBrCiZVkAZhrh8lkrQuCeqqkvDOR3Jhl6kxbE/IHwpf76XGEFCrsjJG
43pANccKr9KrBdbHMICuFAo0XOmHhbwT6f7yxuhciHYG5wFgHPgzwW/MWW/zTJFbNDZeIT2S7tDw
6mafL9XCts01LEA88/ts2zS7t25cW5VqYslwYyL4C7fnXcU9M2SgD4KPakT1udJ+vezStA5m2kME
gRrmMSAv1g3yjwQSUTOrP/qeqsKzebT/rY4f5Q4x0BTxKY+hBkbG6Lc1U1ux23PlRQM25xNGv+1w
gRITeRkEFTpA4JZ7IkCLGzYf49PNuG7WdZUkLKFtXXHGcMsu9Dwu7dyd+EEW9dju8VsoDDJ08i14
jnOeLXDuwFlsUQS9bgLMzyxP7Vau6LLFcdmOytYeSNXK56BfdjH4eD1lxzH9iGDdHBy4LQmtpCiY
VbQGLqM1EZ84EeC3GxUc6U5AcgjWRJIa9X0Rml2OofxrF2Eq9DkWIVTcLGgLjWdWRC7GBUbMMRx0
EqS2GaQwuTAULfZOFQrcNushpRqY2ZILUAT8PvBHka8usRIW0apXK/4gdNxj9kNCK19P+bte5ju7
6BxdV2xCE69ki5a64JIDu0V60f5PPb2fNdyLzMxFHZY/1my8kUeM5NLHMxYQIIpyvOQ+YhxhLAZt
n/cGB99bZzdHcwaVK2opQMk6r9A6iF0ieF43A63KmHG7+k619Y6+LQ1FYbcVNqZJJeXO/+o0qfbu
y8+9MtWk3PpoHNAx6yTCh9fuESZIq5hKySwe7v/sjzEetvbEnub4Dx9kdD6SIEzLRmqxLEVmZZV/
mHrkU1E4KM6nUZudXRXgsWfhtnmq19mvzIMv6gC9pryAbg2SnGsZSHNeUjEckqpnhJCgnNqiyfC1
gLMJ4h9BArMHsgP0itzeIHy+BK4HeEkbZd1iIbrctPH++fxPlh4v5wvpQ5Nn75+3uuXZ+c2xaAmJ
kVYhjpJ8RmruRDw98PgLQnbzwf8ZnLwgnoslc4zgccO7gK1enVGxykMYZizQmyrPjCLBeb85yoj3
zNlcTKLtPtFHVOojn8CnQyV4BrkuhYZKwyL84efVo876hFqfMR4peqlJ/+uvu06nVGkdQQdA95E/
dXgFPb9BLSgGSpoot8ZZwn8953tyoH6Qlq3/haBTt/2UM/d3FrNz9S620PL/rNDIYtaiBa3vM8Mx
VVnC0whH1RHUJ0d16ekyRcBb25PtHDSiLG2cUsykZFJAZxO5ZtWGSG6HHjywH/dEbUapTop2dFy2
3YRadNAuGP9vzW9A5DKcSOO5m7KhZ0/IYNgypOR1OuhR8oyxosu31NQ8vTeUGnGCY3zh6gu6+edN
HYMbtwQ0FnrK7bwoI0bvoTjTW/7CmrYc0VTYUwa+OsZWSPUmY6jlNt1X+jV9TrikfCgMzQCV39Rj
E7Y+ix2MdplE3Re4KuJ4aIkDq9YymvCnPCTay0fo6HU4OmWNuyopx9YuK8Kiu8hBLNnKrsTU8OI4
2fAuWTREYqktg2N5Jmx6qqmxuk0iSmgYKbr7qwwr9N8qhCKTbceXfD0bUieyfnXnfSr5yTIE9yOT
MDWcOhEZ1kWgQR5+5K+4TNp7YR4kdyaYVLtYZJcIjRP/O2xgsxx4eirnXpEB2NlRfL7mnLyI8kKF
sQOY+OJq8YIgYJ1J48uT+9w9t7f6vc7acPKWHQIuJC+cCaE20z9OVJE4TtKHAJPiKojB0jANarv1
S4IEdTCU6g9AFRVxQMH0JJPuN/sIU/vHWL4mgs+TjZxgsBfT1ebKIxnqHlqYDL4gdEJ6HTIJAqWS
gYg52M14shYkL5bPIoAoB23FIS8ibvcywWVd0DUFTaN7xftG3BYXQ7TU55o5+Lp4CGhql6yE85nk
4N6h+3zuAQoleroqQdWOXXd1WPZmV+RtO0MHd7uIN/gkbBC6OhIimWU6w+OWG02cCKOndjivHO+L
3SWqkevOHkXW+weUsnmELk7w3WXC/v7B6X5avr6Xv6xXfkS8Wux8BdZWg2ATlSMxJrw3NB8W4mxa
7oZfALJkYAg1JhLMPjDG1j3SoxI3rQVcJniIC4Qqv+aZraxDV4i/rufvgl1yCWKt6m604+V7Xu31
d60jEpjk66NBs7nle134SrVAwOPz+XygTQgeGsC5LaSfVTuO2s6bdAem+KNYonbpGlWtTcE8m0bV
+c4uhqDIpo8MyzCOSmigl1h55s3IQ+7GAHwkvSO1H5tHD3EtI1E4kfKhzEdOjSdnmYReDPKnYGut
rQqwJjc0QHQDNmat5qs5wUkybVvHHP8UxrBB77wxU/YcpdYO13DFn2GF7b4/xfS65RT15dYI7OM2
V/nz/lM9giS/qf7bk5rxfYgvk7c2zdExzSO1MYWOEpQ6I8RMfyBmv9oFdHfd9y+4kjsxcRr+rVO6
hSwL43jvIEDTeeWZDnI7jtJXE97uWY5Lv0xdSTNXkPcLIsfCzVDNP+mF8PIKkX/Aopz1Spa4P3BS
D2/d2GdTXGAH999JWcmQsFVJZ7pxm3g1X0zzZvOxXFpHgX0i92Iah1hd0NfU8fKMjJa5P+eFQ2c5
uofw2X9M2eU8906UVgy+G692oZSxIhRfwU/QVrdx098Wolhy4/1aITXqVDfdeZhj6+LO+xFP19F2
/SyxPTB7mrrKMKFTfP0LCjAvZZ6LKKryY1IWlfXpkiTEEVMWArEJzaBsjkz6z+eLS2zxsjkirnJF
elAPwqW9yzQ3wfWhjHUnd7J56rAC0E8j3+zu3aXeKgwC3+KWdLhlQxls1EfaPn+DwZpD1LSOSHxx
ymuA+epHmu5rzGXLq6knnL7IZ+eeFtTJSNEOSLYeMNR3g68da4tHL1a81c+QxIhKcM7cIRPGy+cz
7RPVHx7lcbibFLpDMHioxsHENezropDFlgeZX6YJTKdpymr/h5xMjomi3fyHZFRhBh+mCzY7sdm1
z9W2igU05LUh0ORIdI6vEo3eXOfuKvZu98VxI1bmPe4ZLB4Zd4FJT3/kFl8AlQmVXe9471lnU8QB
XCmKhf7dMe0u8+h1uTd/wSWt+yk/Yx6+r6tRAcRXK8pN8YJHzQweO9r5kCOiSxI8vTM7X8X8ZuJW
4dBcgg50al63GI+sz6baAGY2uKa4B83Rws2beMK/pkiEt/Rt7NW0fwd4I56D7hxlgFIxr3BXvWpK
+GQAcYU+vQ3ejqRkfu5yPR7OkQKRjNDXhRhl54Y3IJ1CAfhE1KmSNEjBfC00/Kl+ZckcKamVS9qU
N3GNuEGuxFnY9YnxX58StiSbtrEN3Grs07+Miy1552X7ixchcodpuga9ahbk4IXkrdZWzR7S+1m7
aAprt6B6e7NE7tFwS+cqBMZn5NCqcg3cBTjBrm2ZdxmT9ZzZ1skD6Fq78rlMwl+DKlOpHFBcjnze
jQ5t6Rl/AM85whccixh4o9TaEnyVLScZ/XkGiuARlwzgMBohTpGvNZac8GuquQYWFUsACNuDhNaa
opN5w3iwztRXnk6pevj6ntHIycB1OQvxUTJbTQBMY5lKFRtLGntxDxaz1WxulRBE0YHapYr+bZOE
yc39H+ACKg90qjey/Uxj3f+zQRdtuVu0f9vjGEoAzQ3ntjgNcaUcGv7NzdRKPexZE6UNKXJLVKlY
QyTd5EhctVzUfOKI/CHGJIVUIfqcwQMPlnpwuBXw/Vq7LgFoneNCzA2XfLSTNAQojmOglryD0LpF
zqOBlvpYXDZWLHyBRFBJJ8ihgY8JLMx6P4zYnVZcvm1d6fnClO2X1GFMTm+l0Kjx+sA2NRwuL1MM
tFZv4EoTMtm9KbzlBdjOCna951ZCmE4EgCXqAAjlbJMUiiRzB1WCt4f9+rcen4s8cT9ZFHk77yzq
FkBP9vq+vtHxX8z+2zWg9StIfM5e1fjXdoBSu3nXtw88+xqhTaYNPHZr+YhvIyHZyzQQgTsnmWHC
EsiJa4r3aisaAEH348xu7mEzM+a8eNwlV6T0b4+fzjyu3kELN4sp+dZUy+qfpiuilkBe5zT2Yyoh
CDEs4AJXzjY+R00SYpT803ARiPNZ7dyp7w7HcjCotmHEXApKuucQ7mROaGDcTrj2q4ynjStZowzv
SurXFQUJcJbSAhZnpKbM6WoXre6/SJ6Ha+PQ3LDAmdsM320NIHD3ZlAF1Jzt6YiXg8D6Sl6QMzHW
K3RcTuHkNPpULUxjQn3FbBFd3bOrgljmMWRhivXiC11+Z2bi3DmAOsMkUN71037sjzhDdUbzXKqb
spEl3HSOwUQDAnMjCk4n9icPmZBbmDFzbJsPrp9ovnAdFC3yiyTAH9waVDZqcdWi3fIPzfFgmB1b
3d8KPNy6AG9V0KdR9I61U7QamBOpPyWRXKRopX5al6KIdqb+bYccAeV8bz5m9gJJab7sNn+UEihQ
1fUKCapMZ1q2IZ+DvtDHrRVxD6VXQJS4sRypQdcaqmJ8O+HCcoqt+JBudHM/ubh8MOR7jQx7aj9p
oi2rfpeVzsPy/XQ+IXZ8U/T34P1DJPGAE9NtZhJ69hcrZSX+hgRSJ/psb6bIzf9gP4Nim+SzBpnF
cWcmVEeZqJ21HsF9ZzmuI1sKb45wyuJlq3jeiQwcH6/1lw2fYVRTo2z5xa2OfLe9PKZO202v5CWc
PtH8dHv+HjzLx3kghHgS5szNAucjZ7lEfrtyHq7wFcrXDX09p9ZWqIOimvYBzq7vgiwQbG+NZfi4
XJkEwxaipypUIwcOQfmUu3MLDJUabhi5qbxwU5eFnD0zY+XB6c+9dG/Q1QmRgaqjEfj9rgmVmAGY
dUNss6nvCqiYzxFVOOI4qgf+QGvsuuFjau5+BYRkFqc7w/yb5QwLEQ1yWoQ1q3Rxt+L2IlCSvSPY
LnHOOjmpkGDJTfUB0rKxNlytQiTssjlhRJKDoiK+L5LIyFwl2kQQmoNi7w2Xtne2Xf7nj1z01vSF
b033VccYeAn4Ms5U1iDdkKy8WA0K2w/1+25tJXTn2TtksCwov/Q38yuERQ1k0MRfqB7+xn4jV6Jz
h86UxVStY1ctLDen76u5AxVR4j9Mnv3hQ35WWz1zPxtG2L/89nUiveDvA9xFpvqzudG7k3FXWXt8
ykE9XBZCp9NEQZZdaEDFXj7Cz42b5VAN5QS9twrp2wwewtt8xlFgJiuxdDDbhT2WmI6ibqi5Q9Db
2ZaxIzoTG8pV+f/GZQqZiwaoJelOHy9a56Ciu/wwVHq1GbZ2118nKNeihPK5UaWIuOuECvvZ2vnH
zrsYOG5jHtHWicnQs4XEmYoQjI9XWcReHoG0ffwZSKG3J05U1NgDUwciBhPbLqqcgzqcHRpDXuey
gLKSsDhSvsNgZPA8kQF+o94xQik6VWp9jmf7TzxLHaVHa6vnX8ES8Qecc1EHfHPSQVwq4HW1Ziwj
bZhYWMk1lYczBY+SsKGKe82XOtfNG7/9Trw3Zx2gUx3H8aW30h1eUwOsWShIexHlyCh8i0MaE44y
Pl2QicvetMt40yjDBfBNSceRfyPv/BxoZHqZy39fRY3ylVeXsTi1Cb0Yu4PMPrZAMOFupqhHiJxR
5Y03esP0mNZ3BkJ/Wl9GqDv+6IZRYO+RdkUBtcj/kX4dLUAzgag27CoiU8lBW62LmbSO01Ai2grz
qKoIl5nWILCERv3wz3psKCL00cFw6yrfcxV50+3IOJ++XDC57lsY1SvIHzsMNcPxtQ/Wr69svC+6
Sg1b1fus2nl8mTt2uK2zGP7YeMszabNqhSrXkLFF0x7NWU+5PM9Hlr1jfpGGqc3S4s8Y5ptQbkwP
bGbQeXvLZLGk9IaVDNRNhbR/mODUsrQ3JU87+FzYNnlJg+0U7cbUdfT4m0IVsQ+Uup2f3Dy+srgw
OkyLwoxAy+jIRr5nMDGYSi7mfq4G4WiQT6tbMyAM+YtdrWj4IwYd/tJa+xMlGXDrRGe+p57IqzXH
yxazmDd4IPBbWJVqit8Ug+GYHzDRuaetkzlPOctOPKQEpQxjBEWoWHukDOGZOUO13GSbjm86ygHm
PQBr0yJaQL1leNvy5ID0/t9OnUl27glmP/EB2a8ti3fXmAl8p0skmqHF6qrGGgLCrYGAMat8CtH8
+h7g/mq0Buay1SVWJkD0qp5HF+WedeMi5VnARO4ikCDmzZUl34CACYkukup6pT8Yg3CgPowP61QA
ylYQ1xrfJCVlDV6wXEGRaxJWae3pRpBuW0MR4gAkzz/PMNtSPsxkNBUwp+eZUX/zSsCO0sccwiG/
fKDsTb1hu3ZFUy0Eg6xclFFZpJsfYCn2VtaNVgFDK/xFtLFiPwwIzwttP+sqF1/xLCvLyjfYO1Ft
6KVbcBol4L3qS/zZ2LW5/CW7bhCAIZE2PeCVcstnYOOAQht3glRpAQqg0fJBAdn15luiwOmGqOv0
x3unGkJ0R+qGN7wAfDcOAxUCBVXpccmp+Os37gWFVKH9jeZWOA8uybqCqkm67MkuzB67feAP6CRN
BQwonZSCZhfvYsy5UwXuku5/yaWywsSBbOO4R/gdZNV2ljtX8aYNcwkKWUZZsk6kkbP+2Zq65acQ
lUIt/MbljQMwV4kvMDYZvfyjDiwaK/32PdnoGodM82NB4XT64caBbL180Y32+iyZBt6+PmEQK0fF
hZ/Sy4yqD5hSnteUWcu8+FUx5EPhGK5GZ1ikzqM07O+PsJRF1UBxF79D5DJD2Znto3eqLfmY/m78
LHCakN0guVSjDCEuhUbYfmFDxV5yxguf+fAEfk76ze/lcn5MaCztZqkzqhr5PiNE4+D0lb1dsLHs
EOqOtlfZdFMJwfSfTNj8CrXZdLOtH8R708YOuNscIARzWMh8uFGwzi8OOZxw3A1kfGebFrNL3SbP
pT+b9S+OlOwbmd8FvzkZ8Tjo/R5rrESwHHfxVgDm9lTRKHfXROu+zncpB7XUmJQSrpY+VfMKLRMq
4BmMiT4h6IvXl1mVyROEI5hpInVCevw6jsoNn08o+k4xq6F3BPFiCjz2uM8mRKicvjNB4BGDevJ1
L3r/OIK4HrypEPNzZZ8P3YVSo4+ughGPvsKiB5r/bYj6jJLgJOIgvE6hAcPqmbbfLny/txRJcyMw
ugSZhsGSkP5NClKsHFftTShQ+enJRGptkBlRcALbE4p62oRUhjqsM+xrTImx8qBKFzoYYVjcPPk0
omdOrL+0kSGS7J/UsaXal+cvQQxItF+8UTOCRVK85m3s0SUQ0k4GFvVgCpPPXcBobDekHKXj3Qpj
nmSCDZYRj1tmTmTzS8FSchMyucVmGONLBwvzR9p8Y733bjeBYvgceNIK2vYCOx//bvTU1fRIQuCf
f5eu1MYRBhZTO3sAf0IGzvekPL3VPOpeoXG/SYXJw7ePjnzSoUlV6wroGidsv0FcPo+s3MW4gW3v
HV7dPwOS993jknB+TWCJJ+labdA5MY3l6QsY6e7S2VPzmN3KTv6FJDm5nerW3pQPYTXI0AUclJvi
1BB8IQ7t+Ln+Y9Tv7rrFZxrT/qtRUlOlKfrDRRUdhIbaiz6WCRVG1L7QLJ/fEpgRXc86vBk1pC3G
BpnuiXQzGqtridslSYIobeAdASeKOhiBXTHAwYrogRbBJm3dGtQQlqhyKRprRm2A8e5cB/8x49FJ
mfZwucZAdSrZM2qGhoyCZg7q4ZLYRRfgRXHvm8nRVySnzLKWwU3M2scyipbJCSJvVilIWoQf8hz/
rCEZWmxcQsZu74OsN8+oTAP3Jil/Zjj+x94ucG6Lifxyh3k1Fb9UIuwwl4opKe4AJOnpdPXHnoA5
S/dyD9WuBRyg8FLLfVKbF9VhAj6+JEi3MiqDOjD8qQ0R/Uw0noWYzbaUk7ggLWhZNqfYHgCySzYt
ySNiU4ZXE4PmrZMtbGLjdvobDfkSemYRgPiSpUThYd9Mi5TRk4O69L8EyO+rrmcuiPEjyNHA8zLg
g4FDQD4HtAykJQfx++iLD5FCsdSBBiWRL7WOFWbycS4hxRsLQI2D6m2qbQBzhEDNw7DlL2u8RThr
V24GGrXBnZPOCdFuCIkCIl8VgB15TZvy/N5n59YKU1G2UFmEADAYIobQX1CszKSGAp/EvibKih71
ablxSNSJHIxo9RkCYMimtjiTcYL3nGEQj5PORKkky+givzaE0zPqdxeQtD/PD6cynbY7cen+Z8gE
vXhLT0hzEwNIHhB3x6FxDIljOrPaDvAofDfvi/J0ZbL65W+4eZ7DRCZE7blWbNZzEDde9fSRq5iX
PB40dXEacm0xiWaQEqrb5PLR/Csa1gKviHodgewru4Tp552NdscS0ymckhm1bPZjpcgT4zxopfaK
AHFMsmemn5fKW983tf+fURf/mWLv3exFiI6pch0GmviLlVkUCVoSnrXSUJeZU5BW1iDcLU5zq9nO
ZEPBtmGPQcdPIcHLX6nibbmQnTorUfQthoKIZ2Tz6Mlqc0+3tf0y3BTLYbITb5GKJNR6NAuYofSM
F8zqkMIa7vwqTUOCR7ef+2+zK/VCOfFFXRjbyhVg1ekm1aTmRANeQOqcar3DHTzmxT/WQ6hJN5sS
WfcRd/fGBKtlld3tCGUncRgPI7r9GzD8WOjczY7Y6gVXRBxH4/K9f0KwDn+0DvWz0xno2rhQC1mj
t1pLip4k5yAqEgBdSCSi8vpWRls8e/q4PhhF1iMwSeATIPP52ec8fe5a76W4mWtdrN8O/Glr07hj
dCpkGe7/Yf1cQEnDyGAB8wS7Vwd7ShV6lMyYBDT2Cg3dX0tqmlsi18WYSftDbmBLJxCWp3eZDfX2
fZTacof8FtErUrMBX7FrJKs8BSRx2vbnh/nhEc2ilUNEk1KrMQKppFyzMoFToKPqBNmSombRbzwJ
2CKZBMU8warQO0IBz95r5f+oT6c6WeRyM88J01b7mEZHTtPMipkKqPWOB5+wL8X6oluTCSTt0d5w
4MoQi3KH6Hywa7N2yVn7Z/ZVOfs8RNASRroarcMdbVJhW1ul9qG1wWRCPBEIAyOU9aXIrf01WF6R
3+aOIY6rHe1ok8kQsFpm5MyVhWeTmRYWnKjPR44yeTWryHZs1eeiOJKIVWL/10gVN5zOk+K/Sqfc
NnVskacLhKGCW5oU/yqiqM9tUdrL6Xo9L4x7GZBEXLjaKR5N8Kg9cgYB3Kv9pc8B5tUk1bGPPaU7
1SmUrvbQI3LSva5pxrIHy7dy3Q15IXmyZzSdqnQbOAFktrv5DX8+pnCJZT2ABOjR8CEr+Fb7dUnN
LwvLqQHH1OIkDG8p6KhI67+P08iwD7m2Tsvi8Fvqqw5+BMWKC44jk8U5vdIpK+2wZne0QqVBO7/i
Mc0aV7etiaJDHsYMMyCAOEzNP2saS/UMw51+Y9mc3MkUi0asFCA1TyU4DHLoHCJaN7fqmXhoblg/
upPBoncRMBtI2JRHVKTEMMLzeYlYAWfImZOk2FDgq4cDtGxheG8yAiZURZPw70RbI+3wVpZvyUsz
t7ghMxIyUW84aBlvhtBFM+eYSrMY4zpi2wjniMuv4krhW4zCN7GL+r3nYLrUG7KkRY/7xVQir56O
Qw9BP6Ugw91St3zzZF1/pVo1ajnBYRpm2WlaR74kqvFx68FN2UdrfE3Y4qjBhgRaeqaJ+1Jpq1IK
MdEpTrZal4BG5s5NmNEgFkBo37pUJuWps/xtzPn20CeIpi6yCvJTLoyvkaW5QW1rdIK0f/HoYNAg
0jnGfR2mW3VGjC9++hoa/0KYnvx5WTIy2cRKW74EFee5+DpVXn+pruXDD64nPjBy4mapUiOMYNbX
GBE2d/eaPV7hZ4nEfSSb1dGo4jNR8ZJQIOhEXPjSkbBlOD7/kgHf3A/BBX5TmfeQ/t0JSidn3mbC
MLzQ4aJ65K/ZkMbGrCWTqYTA7xr3nLTizom0Sf09eljf6jKZqOEvPu63tvXgQyea+PbeJzGlKAif
IoIC6k/OXt+2+hSW8PIvqKjhZHFwKz/rspX9lXrHkJnsv8iGc5mLo3b59fHwTfUC7Ay0UR2M36Rh
OD3hhPGwdZZACKYK1/XsUqFVNTpoIM/AFkbkFy5moAnqmwTd3Xm28XBTkMWmjuqEQCp6fqWwE2uv
GDXlW5vSY/0gsTFP5BBDUnRPoDalZb/L5B0BYYA4kQWih8ISiGGayKCfYSZjDgb4YQ+H3DFpeG9W
6jdKKZDZ5DH/EOzLeBFcTXjBOk1jAFPLmnL+skFNPo9Zi9H0HDhMoYU4hg1YOyZjhqhCf8b5xEVZ
C3uzwyu6DjCtAp3IPvVRy6rONVzSVpk+F93m/vdiyqoKZ0jkp+y760k5zqrT7ElfTwh5bbb6xXbU
RPs3mPhF5gTDatCR1KXp2KEgpgeV4jLoZqY85yKaXNLSnjYQyA5ehOmQrQtkB+AGvJBzt6UQq+KH
DEuLV9I8h12Dpa+L+25uMQFge9JCaT3n7fTY5drnaS0yHtBVh0PVpnfbX7/4vTF5wW52puiWJfG5
QWyWy0wdJa1L8V5l9N1/VC7LzfiTTSNuxSjhWQ3da1Q4DjOSSQXX9MgaESHXqbHGSQ4MqnOhRZRR
JEUSxZouD2849XSxaf7mCWER2ZFy7rgZYfHot0iwbS368tj4gcciahcWt5B8S8c6V6X2ay2n0rLq
aUbzV7UOx/5QJJ9DnBsntbG/HPd25WnCXSpOMEUxGmsOB5JQ92Pm0ybbdA6Xho7PUwdcT162fUfP
CRPo425Lfj60yotghmKAxzmIjVyCBQs//RnNc0DRUc+0A2B+E+9LwGibubujZBjSih8oF+4saSHt
n7jP5gxIfksF/JdeHj4qlgEBDpdpkWVledvkbmdYcKbXutVVLTCaaNFe32LSyic4XugAPzi/Wj40
kBKqGJc2z0e4ydl6g/L5IbHTMxnDDeM8vKu4wlznFn9F8/HzQCet7j6GpwqZylrmXhc8/7gajXRm
crZRT8kOIOU99s8AKibQ1I0HubyVdVyIGkZcMEJK4F46SBm0hZAd0/cqkKeKnWEJF6BmxI5Z+qTd
wfMkOxUdzaxonbSj4WbtxvJm+gDhIXeuZV+4prVJuJPoxNaPba6iY9R8pRm2j/pTQ2tXVW/oN3/9
iFPBVACZSlMphj+6Tv/sKxlxEN0jL8nkASTtjrW2Fb/I4eFO4PoLl8shSUwMIcyLAUadTTJh7Ekg
vIWdvBrdNEKpp93jTfNYSyjOXdzMlYWg5UleRD2jqaRLvfQVQW/LLeb68wocasdBN/g5hteKIWo3
TBwxeTqI4FV0dnTqD30pNT+HH+uozP/rj5IQWMD93n+47k1K0VXbZHZBBc0zZ9QEOwV7eByO4ekE
sGLzA2PWZikHRHnCxalN+ZQtE8qTahX5W27kAtVpIJRiwn+IE976e2Acqwja64esPhby8QyrLp+I
KL1sXV/p1hspifHRvwHWpbOkKPcFNF3Qb1UKJIbbtgUFIx19+Tb979OC5lOHrk3tv2ciXROZsrwW
BBkMLO233sdWMZ3L77H7iYRAACmqnf8dxRh05BfxpS6ZpYvx1cWPQ8z+t/VLX//rooTKdwu9UFxZ
TfHy7xddvnCIAi99PI9HiBYrGXrlVuKgsFf8pbVN9n/NZRGE97StMtvFK/j0kIDRoTj/IgpIUpTj
9jTnVfZ6ZsflQdpqg7fMF64lwttcdh4qCbriV9RlxvHdOgimBcU81XooJXqL9WrOjkt4HD3k/7Qd
JqY9uhC5cvqWBJEwPwQNhWpTEtWiTq+WtIDYtDD17ntGQoQ5mmL1LhMFwyv/Fw1BFF+Ruo/olHRO
AMsmS68+yeuyEvhwN+EAKHwfgII5pwFoln3Oc4AvBkbCAuntza2RQLk2fP0bR0heQ0IEdoD5+MM1
WrG+PTorTkUXsgxqvnITFDA+vcElQhv92P3BbO+t6I+/+hMwjlQTqDHYlBiihvJ2aqSroa0n+hsJ
wUqRJOA/pPMNQ0QpA7rW8cmaSY3dg9wVn/mxoqmrSxBw2DenJru4vqkCBx/rbBwLTFns76lU0T/z
5NU/xJwqndrNR01jB2WcxcKxj3Op3MXUqnqxDJTkhokQcQAWnSZl2GzyvpOP/I3jaKCxvCHTRjdg
hVjLx3DIluEEpeWaKyZIZ4PTXoq5KVByG+65aLl48+X7dzolxXEXg5eXu6tLeGcEbBuAi0uWax8m
VqPx/ASYRvw1Ul7kNvOTD6jWJ1M+UbVu/txFgcLtJoXM8hCPJ5ubRwM57iFql/Q1kuBLb16s5aDG
Pot5z1cQyfDoSBesWTT+FwYplcz+RMPN/K0sB83Dyo8b619LLTLb+S6gZrdhOHc6zLa2lIybZnAc
gLm1RXqYz4N+0LFDFPllNcODTb/ZpuT6+7f7XKv9VHwaWWSK2/sIFk4R/ygdxE3ismmx20Qr03TP
aJyV0Y9d1zZhVBR8qKIInw5eXPPOVHaNMjcymYD2nQzplCBc0oB3U9iq7ZSZX+tY6JfNOJiGQQaA
hBUFITgk7DkyM3g1x6W3WBo4Ep9cxkLpFKIhUGZ5L7yVILKsmB7pnceFZMsjQEIAS78/uC6RpUQ7
EOFsTQTGE9u/EAFmMfbgBrLZg5kJoNpKwybhiGI96NKt0RMQUMXgQnsNP0aUyfe+r/awFWQN8wKu
+KKpA4j2jHUEL/uLdbxoqBxT2KYtOthaFT+J5rdIHNzDcvfwz703GzG3RLbi1edMMneEC4VMe5GT
KB9fG9VDryYcGX42Z+nB/CmGR4433b6SmGIiT4KHx87KkS14wS/20XJRpmsZ1U2/b7ykACQJr3gU
DJ6k0AT/gXS4YWUIQVBmT/69vkvrrDQfxqN3fXNL7H+2kcbd3tjz3lX+1GUhAnC4Wp/BoWmS+NoV
D2mR0sF3ivbpZE1oYmKmp4+rqO+bD097v7/D8+y6qn+25qxx3H3ATie8mVNf+eqw4rNRdKdvNB8H
ka4Tkpg75EEQFBm55BPWrJGY657ZrrPq+x4RF4ZmGe5rsord2rqofylX4/HGfKiN58zEJBHWhDsw
F+DO4KpnxtB/umb8IKr65MBMubwF2eseNybtgpw53itfSOGYRbBkmxCnPMg/ojD5uty9V1r8Y9pL
ncbl/FaGV0DXjXsVWU7V1Dw41hWXEUbS9fJQtF1iVXXRse15ZnGNIuJtwjYZBL/0wrXCZzXXV9J9
StaYKfARwDVODltmZCIPh2V55SZvTql1o78hMaBKCx2su3tGDQDJ4HyUin1NyKLvHZeUiIxDKzJQ
RHWsxMcLn1Phbec2YX5tTddkIfD4nsVAkKIzEisKs5blGkeA3r41VnoW78KuFnY90sJxhfV/pMHP
MxlbGXrSGAIpazWldoRYpgC/dLPGukfvJsSxXKWhYaG2ARKd8Y3bjR7QQvdJ2u6gA84hDt9FggQ3
1nUgpdxCDHX5jCdTl+R/UCF6ghZlJMgBemYu1IriCOEb3m4CC4LKSVDpgIzGop88US91RFU+23GS
9eCGzd060wLWsgUlqKDNyBQTPw2bAAbZZu4LD9f7/0yLdCPHmWm1aXeKpZFgSng7S8Iz+IaMncaK
ky6d0Me7mta1E97Fno/Ocu9b4iXfi/0SQWDxJax78RqmEy8T1Zk9Kh2ezt3MLUiw1aYpBawH3TP9
+KXSP6lHsOrHvVPLQLIb2hAXZ1kNKm+rhR6oqqgNK2xsXGTJDo5S9TPfo1BH1PXIm104rMjIEmam
8jrO5YdIJk1MUWwjsc+KOM2GfLJogN3lpnIFKh4njwHdxfslvN8vJVAdr2Hw2X2dGAyVXANJFygq
USRHVcMEt87CDv0AG/ueGo4uOQ5CrLCDOuJsOzc3163CSGsq6RPoqZDRI55c9dTJigXKnoIz/K11
iIZAZDnRXV7yXMRlExT2CNVeGns7nqsz1+HANHPK1oGrDkR8NsYtjfwq4qAwaYCzS/FtlP5uMiAg
a7sTISnDTyzebo0zHDDxLuEmIpOExU5zOWgJ87HkXcrmpwzPDhZJ5fJ06VORm84n9QC7+ySzUw4x
v7nOwP6190iFKh3xmp77aBzOyQ/FvA88tSzWSa9p7Mp1Izxw4yrHq2IhxPMl8phjEZ2pEfind/Zc
dvfU4q3wUbtpgJrjQl2aJen5BAWNipeO/Vb2yYaHs8qCO6AblYk8mOSj9ydvyW3jzxUfA8mWW7vg
Xgvt39QTiyVa1/qWmS0ATnPaem/15J83Eo0eUpxV9dlLE0gnXQa7a7bcEkfqi8L8hpHAkWRuLgxG
EC4faXwYGUC5IZTJN9/sBLUp4yeVF/sQkf4lVrmB74oY6ODoSyZ8SHY+iACktTQnvlRy+U5ufU4z
v3Yuiwz3Z1VCisaGFkz1OuE0LKlDFQrGNw8Wap6eiZdFX5lAavb2Nz4aBkpm66rer3GyQ01Su5k1
nVZFgUCEA3fLO1BtA/etT2GrZry78aKlxjU/OdU/ct5DwWoCc3YaXPlL/uK5DfrcqPJKYVqHogoO
2UxzWK1Jhm4H9EjOF40snvm1+BXEsE//6mWBixFRLEfc0MHFMQjdYQb7aTd8qxtMXQJirqYFZvTb
MPS9yuD6V+udtmvWFXwjRt2nFnpmMmWFuedE6IBqqubwE6anckvp6rgK4gIKsyoYHghdcLtlHLtO
hKX7CU2qzNdltKwsYmCAU8nE1Ma4VAZn00DS4WaJcdEoST5R9BNKurhRg/SJw365OsDhinWKXyvn
pK/YP0brDphBVei7mY+Go80qAzgUKbD/CrfAWFsyAmJmh4JWEQ3hL5Nq2TGSWGwARzOAk86cjSOE
pVusUIcZObUGzMOvuT2C64mb3O/oBE43/1RScV2u0kMujmYdzpSNAoblAhCLmJYNa2/0esjsVtNz
9lZzKK2k7TW2cvMCd8aUhedXI6NSlaR2flOnVmvjpIIsLqtjZnO27DdD8XUef8lkF2bPmW3nmMMb
vgJEFBVqi1PNLs31+2JGMLjuFUiBgutdqgzHR6C/sANlMdZkm23A5/ifo5FR/uP+xxeLtY6G8kmr
GSYnlydQGF3skdSlAzkIjAwv8cHiPULsEVqMK90IiWm/qgkN98n3Z5bOveWCAT4WN2EXu5kSxKZQ
AEVGNtmiUG0FwUvwR60f783bwTuSwoIKqV7fvBhRMcjHcKEzpuMgyPtl9hU+A3nzxyebaagcoflf
LGvHcZ+0QYuIfVJkAfRe8UNv50ztXASqva1DFqnUPltas1drLXFUjUeFeUms20R6GFj/q4mNMOeu
1IpNw482ub5WSL09zfUX7apNgsu9uZlYmpaaKN3TcmMTcKPSZUeNWBCIuGC867wDU0rUXbKmLC7+
bbojIH0WtK1dU90cyA76At1toC4FoFRIlkEC1WqSo593VJARZZoAiQ/SCdDJVjhXy+hUf3e2IG93
Lv9HdxYL9KRn+693SYcuCRvulwfusE5U/1huvY2wm89voq/lyFv3JoruI7Mkk/lnBUlXzyblVMfl
AXa8t0pN6bn2n/Sj4pQ704nEFbfmXqR1kfo/bomeSksU25oNOooLxWmU6FR8MVU/+6R5YkUDsLHd
MlUNbeLd98MP7Dav7brRUZOayTz+Kgu2XYtXFsF68z1PNGzrzyI2I4ZVWGiMvLtytDcw7uyB8z3v
Gs9eITPl9vXC3Oyol+w27b2OLAcxtpKf1bj7CgvG52T1OngY2HrhWWTUa/v0J6+A/QZwomloRZBX
OOsVFNzU5AkDCbONSAk/aANOSijh2hMtfdzQXNurlnVwumAdxWsIeH0v+hPYyDmXWQHQ7srDYEwF
v9XLSuTqhSewKMZQpv3geKuKoKn8uNe1Cf5gnifMxiIGaIiHpvAEkrDZSCrKaDXDHNI9IW6NLdbP
2V09aC1sGcnctKe8GKixCJeHwEaGh/VILHo18GGJV4xaBlx/neS+jhk0LLbpVw+FN1MAqnrFqcfK
+n4RK11OYL4ltjaW9FCElgckAwUOM5MM9/brsF06T4ImydweiqLJUEHqMgio/sDIcNG0IGPywTu6
jf9AxEQZ0knmAVOTbwhiXXYm6GCkeIx/5n/fyFuncd3lXiMoE44osuYIdvn+xrukzWy29j1PgcCq
ZNnMqOuHNIKmQ4kElsbWznYrV2QW/n7AR++LHDA9rRdJW/5uziQPYEM8wJcpNxwW0ItasrN0DtPj
FE1gWldEnOZUFcpVqGmn+dR8xfWeGDRsLR4yys7auFJGIE7/xga+pdQyL5T0FOzQ7DG2/BXkSaUE
g90HyN9XxdeXqzwMDdMk6JvbiyzwGSfNLfuPGuUamacXmiSA6iv3HahywD1doHaZFUS/cwzDEGLL
m1YJ/JN+VysBJnYK4N3pxYb9SvbpIYTBGXI4JxoFKA0h8ORcMuDBqLBCa8ppCcFsZrRoWOqvl9OW
jcvkJN4jDC1ArmHbPBCPh1UlXtxkN7JDj1kcQ3UZWigGtnHvTIPxCW1X46vbRAustj+X9+AosYCb
NQcVanzxM/xq+UGBEp5M3QvsyoVFZmrYNg3PyYTJKJ6d3w2pBB0mlHV8C65HBI7yf0LbPML28F2V
IC9Tv7z0Clgto2BDFiglPd1gtZGqXj7ib7sSfQf6b6ju4YvO31PSTS9808VBku2GNjKj/FI+BrwC
Pf81uKq9ADkcmD9vZYyUpAogbgh1aojpfRBvqMlMz7Hlf9qtMq8I7subrqe99DC0S5/5t7ludH3L
DgRXkbSe5cSgyl0EixxyjDWJ28ESVZ9cq9Gakdz1Tb1XLn2H9ONKu0H6T5/2jKyeZhWok9bKkoSo
jJSMXBcgabE5oA6vGHIZvhVwwiN4guE9aqlKZ45NuKpPinGClmTD81rInAfYnVw41+TAh9ae225u
RGztVXqzy3QOjkVmlgq3xVe5CDECLo66SD/3c5/tez7o+bWeYPb1tuTAhpUb4WR+EDPSOSeP0pqW
fz6eIYsHARR42r51xSKljcJObx2Cg77/sLjL0Ts7+K1LcAMn6TXdi+zrmlLrnab/rma+eiXeehi9
5tXnU1ivaEQ4a1nyJG30NUGULJx0RUEn9pXqunMxFrj8lZ0WmZ3dDTPx0+BwSQMo0ChzQxa5WlPV
hLSqpPqWtjyAKKInc0M+12GD4ESB4b9FKVkNBFepu9+kt3Vo0MG9DjF5z/6+lhOPrsyxEauO2cbN
917dE7ppiTepzcfBZhH+ep50RCW7B0HRcrqxphwOVuMNbsGee4BJMXCMqc3Xa/bAju4U09QwKysB
l2hfnI6QHq4KpRqg6yciTP0pu5ZrC37gqTKynt4Bj1VPd7ZRvX3rc2cS6JxhDDZGGcGMsBrlL2Zc
GW/v1DQUElavnhJONnK9mS26Obg0uI4E/O13AyFQicod7Ospm+53lMY01c3mSWsPt5W8ym48RRdW
zG5DTEjLFm5ZUnA0T4IZgLViayJEX/JkhKx3BSjooprXX99xVMBL0iEVcvqr2K3T2sfDcLR372a/
sVZgebOTCINHJabTvsZ8TqNp9Az+C+tzp8sdR/IWCScS67GIFIC3khwHQG/ARJ3RS//2QLERudf7
v9rEVqGBIgtoDt+XIIvkO+ERwvYe9eF/m8QEHc5iOq047oypiJj5TVi7U5HC0KJCv0Plx1NGep7Q
xqe/IsJIRu9it85eva23UgcyuPFuMTYIGw2xbqEkTeWIcbV8ENTS32uH+goC9EVJXNbygt7SIlIn
1Iyq3lUEbfjamoIBlfwxSUgPysArmObJBtqy7z85mjbYQd6TpYB9k/bMxWEByOf14HrA/EYXChDe
4mDFcw+bgz2XDZixrrfLS3iy05dSKuacgGHHHnYXZ43IjPCFztJqK4CtWQptmuaf8+XFixE6S0Dg
Qhv9oHxBuonVlGtAitNqyZwKdU2GqZVMmQ8JVfe+UVS8GoVpQj1MfjABgdH5alfCSB/Y3Vjor4Ro
/aqjO476pYjirmXM0a6mCRcTRzyxzxbA5IbCM996UktpiI2N0zsGzI4SyTY9TvHUiDUz5uOFGT9g
SabCpYO0Nz9Wx2AlzwWnIjT82jJLBU9mMsisKugTqezsJJbE+CRMxjMz6zTt1C46fRvnzXTPPlU3
6GIOqRyQLcQGCdSN59FGNOuCunET89GEOiE31aqnfkscZVuILHaSpD4Z2WUb+hu5UAv878ZiyHy4
NHD722bUQfvAH0l/zo0FSWnFv2J6tYY+EtcD3t3LSg3CkBvj3y0gFgwB3pmCrBMyYslhy+t7RJ9q
XV9gaLVBrEsykaL1c4NR834QGfVmmdIK46wlWBpXIJi67OD67stNvQGNJcUo7Z2osflTBq5M5g2I
CqRUD93e/nu3qm2UzYI5I2ggGlvm5cy0v6vu7bOBQJRfkVJQ55I18P/RnTPdLuECr42ono6zJpXr
UgyawnKkhUrNDoin2HHt+X7Sgma+dkJbCmZQQI9gyuXQAWSjdXZ/wKLsKCilyEPnuM0subf9t0Lf
4tLN5U3/JRxEilPR6XUBdN07kSSfjppDUd9UteE0oe+08uLRPmdF3F8nFxVxGMoLEgnIZzLm8HF0
+He4o5DrtoXNFuyqBbz5E1JFfX/Blk0V77a9JHYRjwXdL3J+p7pEzi7KcF2x5VubRRd6CqJoZY2u
OVWA8DfeIL0CUE7jSpQ1wsX5KdsfU3XDgfWX7dpJwc2tEcFzjmDKKKrMi/Tme70Slv6/sFc1nERw
dMPWov0jW93692fEorSXO62NEr7FtZ7mY3/dvRRmy7BZxll57ktpWiRJOQJI9mWnk5BO2p6luWx0
CzzE1/vmBxaBP7B65NaMsz/Skni8hJjDN0VAEZwBCxog0iaSl1pInG7kTe4ejblI6c7iPfdorsYP
wtMb4k/Xa//tn2qHvmipfgM+vcCEOeI28ptzCaaoOemxzDyGaf8gArcURNx7ZlYwPXwsbBDjkOQK
L6VgmpGofFkKL0GUkqI7o5lfI7G9QjvWqCca1EEkmaxuw/pwTT2C0N/9wHapABJdxaCrROFHiEQA
I4pV73dXBNjBXcIMd7+ztQEZrvMg05bCyqd9s2JGKF9dpBXY74KTkBfgQV2mW5+d0sDkw9W/FReG
rr08wdQvxObXW5LuccEy3ZH2WTH7hGKKqtShL2e2OEsk76BGpsqheRgUBzZzi03gL8+YmfCR0jRD
U2s7w2vmEe9Tl2qaVrwsFM1vigz3gEOKkQcwi6GUFj2yl/mqkIXEu000ius19hrpa0XvhdQVTkgy
bbL9lN4PUB53C7Fga5RW4/fh3xO8J78ZllJQoGYehNE6c5RI1EUCWYzZ4HMVFVWBnVnFx8lwcKkE
/OY4nmNn8HbHBRDibQ7pD1QQ5DiNGGoxiqsBS+rV7DSnB0L30xoZHrHiexWFz5BeJ8zBcM1p0egj
zJILGuNy6z/Ia1wHqvO7McBuxNDVuk64GiXCBNJgC2UE2hN8I/9ZmJofY+rWlHP8g2QLbThunDoc
iHWqa7La5NHg8//lR3ekWR6ue1ZN0QiJpgRmLHuMmBuU6KRZpfnNEYDnurq1U0b99Q2GwPKmWCFR
i6hIX8J8WVIaTYCayXkxejZdobO+iMCFXWn3nRmRp8Xh3V0QwD3Llsp7C+u9t6vWZC1qwJM0y+Nf
q3g9bKiUFDq/aXu18alQwiS8FaICGe53p5vBMd9pG6EOq8a0vR/nF9C+Jqtvflpmjdxwm9D/ufu0
HwhB1D0GdJsp7kMpAaL0rRbp0/pS1/J5ys9RSCe2a4Lpv0b7a3WVNtstgENJ3XdcsNWg1btOLsu/
ZenWNA7w+yUUYyyPIwUjQJ9nXpy3saaEGVW6N/XUZJBQY03NjmPc3ZFKSD0kBpUSEqkkyk6LR+lH
ETTidTB++4naEb2AO0+Wv7cwkYjAuMAkNeKLmwE4O9NV1OZ/sCiWoWBqCJNm/OHMUvozM9jc+IOO
IVobypAIzVFrKfsg4DmmPUWnHIkPBjwVGnsFygkBQbyICk4JBPkjuzU1DKcJGGM+MqKan08XRm3n
pM5fBqpmn6U0X2E5zCBtv/K4IJm5UkJfxTduceBaZerx+uKGtx7mdBH0T8jYv8jxXoGQKG0uDOK7
UK4qiLypzxHQhBrm+gWydlB5LMZPG4bluMIsdB+7Y0atovwyVoyjMshn4vpeYPpk/fcX+sNOGEXV
zYBXGf+kSBKgkVY0TZ1ZTkgtqVGCDNDy/UdNV9xZJrENpx9YYtmjAObgiGjFePTiYzpbZLVIFS84
1QixjTfnrdTeyDaJUAVz7F8A2fxfTJaDiV548z3lbIDj3WU/RPw0d9Ir6Kool5JR3tjPRUNfz37D
nTFbIgq0+9e1BwGPPFwvSAb0xKZAqEP7pjUzC0F7mM9B/srw+DVcllcCpTZYIhn5J4z+aIiLNJtA
yXNNek/P79B08CA2SkUY1EAKlKvtnC4rrlvYE85EmnwZKz2L45l0HLfTSSSxW8bE/2oPQL8H+4oL
cjYR+smqIwxs0As/qp4GnsLsD3DqkcsK/sI8bEG/w0MamkrVcWcDteWf76uMy6ORUIv2UGUDZM0R
gJcv7k7+k37aSngvP2CTV/Tiehv/11TyZsvYK0PdDYdEP6GVjcHtmO3mCoVcA66jdJ/q9AT1Qbds
J6rNqKwzmZVlArH0Xdy6Pcfut5tda89DBEAWrJ/OFQXnlJLEOXZLFBebh/wQ0exhMfHrBsTvic81
y7x+BftkDGFq/V7HgLhaFirhkqrGJg/3okGNqfW4EsSevjRgZutcQZQ2qzQPHmld3TLKwF5Rwacd
TbsUW+3bWQgMSxxo/qK2AgOQ+UTKiUIoHjt9sEJiIDIpEo4yCtw5zip/Kag1JISyTVAPcea76x+8
ndlp37f48ZFrJs5I5MuDlhteBHxyKOICyYnhTHSH3jxbw4gjDYtN7rW5dqFm+8FgtcZRhkz08A9r
2M9bLhccp1EioR5ZnpKcFRa/Av6O9I8njF99nhlfmhYsk83bCeEIpk37n16Asbb9h0tlA8BvqYgo
OKmAi8vHm0NTu+3VXfeo7Sf2GMzAIf+EpAqoKD8XpQ9zYyhhojib5Pf7qJxpr0FayaC4yCHvjY4Y
xq2ZAgUqzji5L1nP01D7dzS0N1cQqZZPkEdMkRLQRKcOBaiS2uMDeeK3hnu4T0LUUDqAkW3Y0gK/
nGIBVWqVWLSOY9D8MwxLHe0r7cMatAwAGDFTuZhf4uvhk0vy2cBdWBIlprAAiy2ZSvYQB7DczA+O
apx5XpKCUPOAPf/igRw/GaZqv8z6+JwzkYbkzGVmcXSD1xAfudyBff/tWF3yLcAUnEbIhUhiuSKg
4lTD93ddNaUaNyyOSl3V8zUsAVERUPHsgpj2vmdK1wET5HCAZTR2J8pus3iltC1dD5jJIAaEy2i5
H7lMtT1rrLLk70c8KhUkJKhbKdl1QsW6cia7OtIlhG1c2hiZ7eIbOPVbqWxCzQwVchQoxFe/8u+X
UbJbG925GeALVzS0zGeTQaKAs+OI+9GVZjimMRyvEAw469BunvQWWZOuhw20thu70vCtFMD2j7/T
Pelxg/iuc837iFg+k2ToKOaAlsAKQfXWPUEHQFPR+4cIoGRVMNXNZMwiUxtoRfkABE/yGnltclk5
iahoq6TyWE0F4kAnrIeS0UmpeN8Ewfw8YW2i24VTBNSAJBP7Ycpk46MsV85ABvJaXC0DwS3Gq7yd
jAnq47vRWUcx6JUUWTnyni5+aRnfYThWnmsmGVu41eP8FgKLwLycOkRu08GuZXbCOLeIfblnFG3K
mAkXmcL/rYsAQbPUEhaQSRr68rrAS1a54zrXa4BqCs4roRIsylJn6elHJuzHFWJDpt3zCKvF0FrL
yFPrFfP8f5M8LgQE7PWC+fBqtIHisNUoz4gHNQhnlgTURgpw7Wi5M8e8M8mJ/ZhQiLspEj6Hp3qR
+uSuod6OA6xZiYVXyDh8RH4382exKSaawc+v43BMVnZRDYHgN/EbyFSEOQS1bK+kn2QUz/z48722
Tow80W8hV9jHuc8sdThL1O56wj9xerP8+qnyRg0dXDBrbnPaL9423j5eTVgjcfeI1Wg47RubY3Sa
dHnzrjwg/RgOb7nENvGVepSj5L4Tjj4wnVOuOXDxiZjQzxPKysec1deRSK97r5WKTFUbkweXXskT
AOjMn9KDkEuKLOLfKQvCoqTdxIhAGahkya1nwpHaMzjvjpFGEEpUm9tYwF++NzAII3OS+x4SZbQU
rDaFS2ClIrauDM7bXjUP8z1DMol1HgGjBQ0Lvkeo0KjtVMokZhUpHE5lHmLhJx0TQu1xupZFYrR4
dppjxOy0OurZVIje5BuRXPxGNIHVZhbL3imCFpp5gGpvminuDKYWClzNd14XvZgtKaJwNaguDBvP
WRhBDg+zyYNriwFFsvflpfRAx19rbI9Uij2aaV9r6b+aPuoEgjPMoqBpCsxoV5sj2nhXWtFRm8Tz
AgMVEQg2ofpN0J3qN1En0XtG4wETi9OrLGB2mrNGD1/nynlCmZYah5p1NY1vkV7NWvHaFo2nC8/O
qFXPyf6Hr9xaif2MwPxlle9gM7II4qWEdzMCNwXak2D6b1Hd2izg+jKgLf7zxsVZV6TLpv5kPsge
H0c9zsXki79QSeeY7OQBL8pF+qC0V7HKV03Lqa4Ccf7Ae7qL7kHXVgo4bUzewET+2sos3PFcufc3
x51Rd2nJwq1QXRCEXsaRn7qV6j4hiUzM44qlU8WXX9bvPMmaOyRQlogPV76Ucd27jyIJ3zs4MaHr
WKh3ziNK39JJebVRWFPKeGHjKQlVbNoGMLxEeQkL6s+Wu/uVnLS4/MneNgIEBj4pqLhnScZh9Okf
vDkKXdhNiahDrJggl2y8RzUUsoHVH1gSSkTc0fW76nblKZksh65yIVslWyGLziBcAzbkZmyOXudn
sWy+gGepQPGWvWxZch4pNau7Rq3nSTWHysF6G5OEMu+dICkmaYvPhJK99SrpvcqlWta63nw7tAJF
zp6b5VAiFtChFgCP0pkVPpxVIIJrHmaIUFQE8Jrbj6qA7o1jQwuEsM7w5Y0d6jsU8xzd8aq2iX49
F1RBuUfnnicYLnvG/iobtks5ymsf1ChJ5UAa/LjFPnkk/PRinICI55aQ6Zk1TYG1UpvAPaJXvwGO
i4fRI+r4nG1JGd5sx4uLNk+vYAQJ15EQP9ZBynrHLtiiAQ4geIlX3C9NP/SWln3TboCnKBwSezPB
UvJ94vODkLbi8os6Q+XxJv0vF3QrpYHHRJJbWShlECsmkOjBzNcOPR7mMhRkbVaL0BkShKJdjfCz
Tl4w7FKN21J3lDcDUXA+J7s+7gTxyl0O7ZU/scwltdJdHzkqrsbB/D3X4hTv+9aWlJPq/eYjSG9C
7AjilBbXHuDK64Ev3wqTbRcIi6F1CdKhs1f2VDYKaC+wNYo9ApcbzMTex/Lv3do279CIfZ2S2Kyp
aBr6W/onBU5JSrBWhitU7pmyDAISx6zlCInqvqISxbIydAeZm39Z39J4bHopiCc+4DBiy/NwDnfS
Q+bLiiukiPc0NrxM81Z7p2Kr74Nj+eBWdUe2Veio/sv4BDOSRWkD/BTKMm+Gde3vPnmq98WFDkJi
mMvHl7fZNQ87ZzOm6EMAZmRRSxOggads8GcxzVj1CjbU1XsQkfjs2/9oGn0oA+/up8woYo4qhI7h
SPXhETXkS26ct/UEIbYaBVoJdn2NDavpmj+zfEsMH7OiqY6O8MBxtdBzkDUEeODxpoep+EuzWjrV
9sHpadoFlvxUfZVjO29hGC2Vbu6sixUW6neWsa5JdeeIr97mXFB3eNTxUTyakhy7Y6FWZeSWfr/W
pOAIedxoaBG4v29IzSdmiIdqVgML9Npsj5IJelbcAuqApV8X2Mj/JF5lSIdjoRHJLMi0JS7++RjL
1FOoFl1QsCTVr+DIb9tIbWqum855Er18rBN8ZZ4GrbTwYUnFaRAcFfvS8NjoXjsFa8YIK5+3YeJU
9cj1vrnFdWuxsyoeJ4r1nd+7nCc2GyS2/CoghnWJZFGPjArj+6c06yOEukF25FBHDjg4rU0o820C
DFutq5UUrND2iWFxBIjcLxuLmP9roRjkXw/S1ZmMrhExWRj3CAw7v4jP7DbDKGpJnCngUvWGJJ42
jeOCohaFIJUt3VRTjbRpA8Y6JwSU5kcaJym/FVFi4MlETyi5hBllsMWh7S6p+KZNn9NhL/WC3MIg
eKMR23F9YptgH0Izxx7SBPkx0tmo6GxxX717TNZs4+jnrUWV41XvI0MJqDSIGK3JvIFeHfV2NsUq
uebTYWbTG0KuVRQSzUKUMKW5bgtzXiXbb0AQ0DJj5+lLuyWykpGmDdWYASY0as2tqc/IJbjmZZDN
IabxygaP+8po6AxhLY/f4MgUJJ32jtOd2pVLDj6qP2hPq8UyRwMgmpnMlbQ431OF1HS0BS/lCB+6
GfaooOMu0cu3DrCfDqD/19kqe4WXQBKf2krwTuTyND6YzjnsfMgMSCtxrABQE/i0yzyQUZxZTfRu
1AM3yzLSHWOu4hIO5Bki0GrLaVldR5k5aNangbn/qp1JPnTF+4wTg7f3+3pUYU6dDNarvtYuYSr9
JQpXOLHtxyEH1WnjE5inswrt2LVuem2AykijhMyweyZfU4RJAeMc4iFQCPoXSo+HheHm9mhmUp5K
D0yzZEleGFMhpYItTqm3sVnE0Jf0VZQU8tuO6aYy8M/CDSjxlYB6OBb2V6ug7OHpMz8wo9w3Lwcs
Ubrp2JlEKMul+dGgysLVROxz/6nmYojS7ive0OC4kVZRVywKW/xFfKvxXLWo8fyBAVwmTAW7Y7uw
z1DbUyqdDDdiSOZa4qCzKNX7BHMD+jBd8+OaWAu0uzdeinb9ZfXpHwDe/v2uIuy7sc2i/JdIC0qc
d3RLoRbasJ7rMqn0jdlJguyIQ9SNMI56Yuaxruu5T1h3q+uP2lqgF88ft/peHUCpdCSkMTbMrUFY
z+idGABfUfZRDLcSW7lvYd87Jyo20g3en0nfVNY0ef4rRHJ0ixQZpJhFfHQLTKwdR6BYzvraFmoh
zncDcCX6KpOATL8LNcfgiPp1X76IlaM0XWHtZ0lGkQxnS6SX9h7lzyvuM+geN+OGBstpQXt7VdZm
F/9YZx8Lksbqtw1sPp8z8ByXKbJLNhIyvyr/w0VHpcD6BuWOsPSlMS75LRRt8b3WqKbwKrKVPThb
aQRXrac9QS+dQpFZwgm4baR2qvpmn3sDfACSNtpxsq+cOCBH0ShaeCKDgZiNd9n4okWEQC/Afyvs
qygnwW6q2wcOsqxorNJtpRRDmpnbUDit3VxPwneBqj1c5n+ObDcu7ZizHIpMtlfh7MONq6WedLf7
sTF4dMKdvQ4lwe0tGAGhQqELNMAuV9Pju6f1N9SBDIIKKLy0FMZ+fXA0Q+BL6PDWVKUJeWPZGeOO
x9lkrp/LSEN0NgWi2UfLU5DCBGpGEAbJ+hWrm0r8q4/UvdZs6NxhvdGaOuYcVa/LoO2QHPvvBSgC
Mbm4LHNKM3ycE6E9dLjz7Zr+SR2SeMbbPeePRBjsQj9dBJPLNEIV8NJPEMRWDphULadAqIOcfkoq
wABoloIdBtTVPYj6ASnfWdKEd2mu9vvyq7vaUs6V5btafckxaLTi6NiZpX5yekIEGbdiSNuFDSH7
dOJdnyAY4Redx5G6m0CMqY+2GR6lxoN0y32dQ37e1YXX1MlJGjXl8c9uJTQn3pTfQ4TQStZHmmiM
sbmMzYpe4DXMJU15ytJeWqrJSKKPOr3Ph/yrM5Gxm0jgNikX8IFuzUqASVCvg/0zFlaMbUkAjRSr
LPPGIFz7Jw1misSsc/HXbx6kTU4rDSDCkXcHjRLHqBKaypNXbaviVOBlNJDwHsYVdJqBxHs8QVc/
oXoPWyj1h7z7Z+s3jK7rWXOL0nJXza2sBkoh7Zr9D/Ks5pPKCVMU0kQdrNtMkyb1lWdarwQsud6n
Qc4xH0iixU0QHrN6ccERbmMHgzTy7hc6RERIW/NQggQsubKKlCktnhwu5Pcbew+hZdNVwlJnpkZq
+QnwYnUqvuEgAkw6NvXeuyuYp5GBX7jxPRPeqeH0tkywgbpn4VBV6JxEWgG5C+DC8M4OyYjYZpDs
r9Z2mC7xLGCtOhT5SQWyR8fOEqVItUcNKgVkoY0Bj3MZaiop2ahlAZdaL97NQP8GEtDL4Gp0g21M
QrtGQX+I1WB4QU0Nr3uOE4m+Js4XCcNrUVk9UZLOqiBFHKRPUEFZW+gUntF8HnDkSPQULiEbpEba
5b1I9gpm8CioKQmMhvbQZlkoh10ys1bY0dRDS1L5TJItMoMglCy+K0irr43QhiJmti1STNNOyBqi
v80HkkGTauGziavVYt3OmYnm/qYJCYTUeQAvQLqDpNivhHQaTngRUNaOYN5JNGr2X5txXDIgQggw
hDTSM46MOZtwQZtvSb6F6T5rd2BuIbWlxHrTla2Y8s7RhFji8PHNXToSw1vXA2gmV7SB73Zt4l35
7fbImCh5lyX3EIbLLb0HNYxRBre9DYkw2+iM9U0oTDeWy5VuIYvIzi0fSlDDzbYvLgUAuRhGOnQD
k2xeSEYaTzRfze3muLq3kAlgrN/uPXgkwlFPXzbJgErrFNQd2v/Eku62wgyyFgXfd/PUTJFPOQVp
Nyx1YGxlqyLESckwE6RaacbyNNP5C8MQYocVjTss0T42no+hiGV70kvFpmGvyd+h2qrZuKUmwATl
hPve6dgh3Xg2CgrL5x1JsA40gNxTy5+VM6xmYNaJG1YxH9WbN+R7oTy1MxGxWLkjT9L2Ibv5mTV8
AIdWNR7P5zkrEHCPtSVu1NzJczc8yZx+pE0ZNMtVeeFgc88B8VvncQVxT8eV+moO5IPg0Eem435s
rFcmz13uAPNMDZhi+bxbOmKgtv9t8F1FjHA01wLncysDL/XW5rdnnNKDplZp9SP3VPV7u130f0Jl
Lk9PrgzRTMi97+6H2WalFd8v/DGanXa1Z2QUMbdW4ws1dM/IU+1RfZJwkcdoylE27VOXuvonFWz8
NRbUL6fTanbumrdUR7sNLWmLpEyqJ2ECtCr3IVB65cfEZaAR9Tc0eB0Qe8ryaA/GlrkN53IA5x16
sFNW8DOHtk+ccoVuK0UO/NVbHffYYK9/6LijlSVrDofcmTBI8LYVef0XGVmQos2/A9Ue38mWPTX7
T6V+ufOTcBpy4nTZiLYPidKQO0eV4SOtbdrB+17Y5jmLzdz/K9rTD0NSjOIfNdKw0SzJnk+0oFl3
7r49E+jflzGqTo2jtUX8eNa9Lx9KlgkPZJtM8XwleIH9cVwun8qWMX9jgOjKhxaiQVUPIil8fD/l
b8HASAfVwx6i2AqZqwN0dTNHJw9QUmWLGC94uLEs5Quvudla5iYnhBodr4NGtI6Xud8teLv3poOj
T2wGjgnc6y4X+y2OqcpiMmZg0hnMPOe2hBg5uoHO9bunR6TAlWXK6e9OxaOSIkvyg4ARl3ibbiCa
+yozh0NQ0gp/FzJYkmFLwogYVou0OaDshfkhZbg6N4d6SEc1xv9MzPRxMpRVxkuR41+/3COmEQJV
qfGu+kvdwcZhMDVXyFIc05OpXpJpmjfZqHKXnQg5XeV/SRR/8HOrSL8BOOCMY3iAhuimy15FpdJJ
X5v57m8vWPlvRmllpWCR+YndAqvVJAjMr0IJqOUYjyY+P+/7mNKdtFK+HF5dGJ1BaY6/TIYzdVa0
+yj1IdkEqKIU3iebswIS9lC/GDnv0Bw1+e3GmgZCY/n3m6Gt9PrSd+NvyJwa8FTMVDbFa5o1to1Y
4TDX6YmaEUVIBpemO8iejCZQJvATGNoO2aR3FBAXzYFkCxN9CWuYmdG9WPj/2JbymBQWSmMWXhiE
mBf7wPahEkGbaXFQeI6XfxnxTA+t+aky6/4y2xFPBXheBquf/d7j9JdF84zxkHnS0h1om6OucYk5
dNVZ3oLg/U01xdkySwzayjFHdpbemr1qY9lhdpABE2G0IU/uQ0ssMgmJ8JmN0vp2TS0DDZfScYZG
ZQW3NZiQp8pUTHBx2eanoXn2ziFBmawOqfFXsvWziNspCqi0pYNYuf3u32Yq95FK59HKEC6EYzPW
hF64OA6LwLjmdwJtu574KXE7BQNtg5QxNfOXmGgJ3PRLkAmc5bMVD3LZfKnrxG+lltlvtyhsBgqN
QuohJ11PDVvrHNFFNltWNwb2K85RVy+BCQx9p79NZP3chWQzHtPUr0WGpJKUnXSVIRca6X3/0MX7
66SF7m7TiOtjqMuWLhir8iu/GTbn78p8FemhE3EKmbHUXb+D3em+bAPh0x5Wj83qe0cz7iDLbI9V
7bGkNxOtP32DpdTLF1HtNKQWBNzHEUZdVYfVkjF8D9SI7cpBK+jAIFRG++OyBlPVpKB8YiyV3CTO
S0o3WlpQmTBPIowZSt+7zdIgu64h9aHbOS1VL+r5JZQIevSyp7n1wvcwO9HK2PZNIKnXjOj3osYc
lDZHefrfQ6WGra/Cx7AsNdACRUOqTVKXVL3bHINGhyNqyhUPITrZX18h748GpQilA5k2OdWsPdI0
MAyKzzHuHRh6iNqauLqhD4AOv3mjhuGyapAAct0Ej7GFL9br271hUdDH3qD8UE/wIwZ58jv2CFwH
+orqPgQKDX9gYElBoudOlrlp4qsdl79k1IvyBC03dTrOhEB+LXf3obBbd2OsmO7ucFv5FiktYdgA
OTsKUv28AW6jWIYJVj6OFwd6C1c957zOqd7B3mrsHfhZS9/80HTm1dP2xyuIZ2qeJh2NirzWPy/h
qlStXWVYgI6HrWC41Pw60+1yNQEEtzt1SfCOY/93HWfbQhEX4Xdrn8aSiwCdcAaEzyOjW9JlpxFV
hwfS+Abh9bofpR4G4g4QgunlVr0i3/98ZH89CozYh+2yuzossYf0shxEd5I0E48dN0faF9fXz0Az
LhhpxLLfg+5FbQ1CIcT2ufCkH0NYBQC8k01PeXRrV7f4ZnovV7wpmJJW8LJWZ56u38Msv8s+eqRd
EJ8EFvM1tAklifa0U/7sg5Bw872e+rt4SaBV/O/rvpuFaGlZsJZTfV70iLmNKiQruDNS+uojjWTG
TmVE42qVOReB4mZYC4chMwfmHj++GBHLspL2VLUOxTHA72mAhlpFQMPcuaArXqZiaQ+N7Dyl5qcK
5DOna3bh8VDraBXFKFY9SrAeXjzI+xNfQdSNM3QeIw6vIz7S5VgeYBaeGeyGxBdxto+xYfPKLy8x
vpt7uKJn9Fcn9JFgVtlf8D41WxrnxnDMY7sypoeZiIOlgpSWGPEOB3CAYEey5Y1EnSTpNLlxJJr3
O148+bJ/4DUxsYVQ0E9svSogDqHoNsrf5EZBOz02p2bR7QMCOmhFjML1UMnmr7UK4NiDTbaNdOJO
XFg7kKBIeCDIcjmiwVGeWUQIVyc7asxwvQGuNnTriPoRtjngnBFpxAWGlSx49OjlHCTxTQbirAZJ
zX5WP+0BWDin+fANxsm/diN7SWpVarmr/3fGPg7UUslDwBBiDqI8nv+9pB09GlGvf01YWP2rGVkq
9V6yfMcPJXvRWotFx5Sa9hFUiyZdDYhirHFV94z8joeEIx6OM9JKzybd+GCLpdpXVZcL/5DVTYb2
5zWd+s0pV2RK5oE72rldJstHAOTjBEKs3nfqvXdBjQwzLgCg6gB8Mnf6nKh5y8gYww7OT7TK5/+O
cxEzoH8wt/HyjKl+hRRt+MS6gswSoNnW2i5Dn3KCvuV2ZeTr1cyBdxpqJzB/XZQhRE/PNo1kvc6K
6L9E2iPdm2SqgxzQeuRb+ppxXhlkDsVz7BpNudMRMEhl1LQfsdPohGAvisX4WqYJknaE9JVPBqB/
KsZNauNM18CnPbMp+nkYDzrPIKjxv3P2B0McawtTlcCIzaYGpu9fld2RMLtRSNHLRQgjXaZa5sSO
k0RS5Y+0kxOG0IuzUcoybEdMfyR2eys0+jRjt/Ddt52Tc/2Ha55CRsAf395TNKG/gf33jiNXlonI
GQIMnB6N2ddxnywaoQIIY2kupCIaFZsUTMyJ8bXZKbhAe4jk21Hv2kHsnsMdIxjk96VyETej4uz+
KEPE6vkDemPZM8OMobcPT/RyVtx7smpGG+yWdQvduzqCfaGG64BiuD4cWEYNysd4SARVRcuTqeiD
7XEAeD5CrjQxfLDqPM3Ark0GEdJdwrn9tQlSENABFyBUuNFI/s6/YNQHhzihfnq57V8MGyBb4IOM
8aPcZhn0DqmCp2qIP15I/m7XIFtTSj/7Q8UoPWaC7qS0VqVCqcym1hvC98i7EHhKjyyKuWCSj87h
5sKG+LBPpqqLYGC7sM20c4cikTDTgGaoImN4xf3kqusfHTF3mUKukzqAak+QrU9vrpGJ/DRduVVG
wAFQxna2p5bVuUYjcwqgNOKeYccHl6Ej9HsmD3wjpuHfM3XCKf2lDNoFItJj0Z/0QnME/uEt6212
NFhGeizD2W/1lT93cejSBx/zzviPy90gIzFEQQHsewu7WoDaGxfBoZmSSkAIyr9ZOef7Bo6bvgVJ
r4+VlQi9Ibgr/m22Stcow9Htb+BIIFvMUdK5q+GksAyNhse4ggIh9sXnNZobuFjFflF7DfD1Yubi
YYAkHuzDqzD8QYt0D0mFb/XtBFD+K0kBcKdiX1wD10C9NTmcZ72SrdrrymcSecQ88qmaiXWHCm2j
mpCUZ7iMMYv1IJ5LebGPvJptNmHuu98+DqzB4g+VURzYlr9bdmqmWmw8yPp3y19NQPQG21RGyldU
k48yke7xcsA5zcFuABc0DBB7kz+pEqAnLAUfwqnZb0qYSM+Gsux9JtPanOPOxWSybNkbrwuxe9Yj
xaqd94dXZ1DTLZ5ajyfoOBREYgwBycidQfx1yX/xCrWuXhE3Hb7jdRE+dQ8SmQyYSc7VTXQmL6tL
X7F2YYMgUc/ZQuAxKlINCvdYiAZqc+Q9HxYPWWwbAK6n7fMfDBSsIaIRHSp9SSPyL/XL5Prxlhpe
xCNejQoVdg6z5cDV8d6IdFc8F3NZm/7G0ZKwcTRezrGC0HySXQx+xv9UY+Fdjc45W1CTkY2GU7dR
7uH0Qct89LzkdyHRGQR6NsOYbW50h8LIFBl5FkVRyRHQY4Q1ro36G/xxtXjnVesQBaXUUf/MNoOO
xQvP3KS1jCEgEfqMUcu+F0FSFz4MQGGcMX1nfbI1OPm7JxPYeF7krOEEGn7xHFI8+XcCFOpDWIfk
7NqJXD/bItNo2ck+Oi+Slhb3++Cc1BaEVoaPT0xwfB35+9fs4Dl0R0HQZ6H33At3Ac7kZtCBgAA0
PM+ec3CKUV3pQawHq0LMA5pS/K++kXUno79iUIckpaZkLSHgVOYp26K229xZybh6p/oC2hbmk/UG
c2UvENX5nPNooKY+fTCFOcM9gb1e3vO8JCo4nnrXNbhkv1zSWMZisYR2HWDbRgNmFABwHneRJnAj
2XCINRr5hnS5PpsNxAJVeJ1uB/VPQyWUpUKPDGfzA6u33XM6hi3LXLRYBh/xe6lflp6ZPty4yCfA
R6F3HeO76IYFw+GB0Al8HMZbHEXgR9gPwFUBeIab0i3FKRcY1dftKdPVkMTr4N3ZOz2DgRyAEPD3
RbpN7rw7EOf6goORSXTjBCCRIiAsC21YIIP958DQpjpece5YUtTUFt42hhBphpivld5ffirAC2km
gxj2VUBk+SOfkskXpv/Xf86SkLIf5eS6L8hU01b8ss6HH6v7ZqOvYIRV/eewhQ8dDJ3WTQg2OChV
bwGhYpCgR1zaYL/zTqpE3UB+0hkIrcUn6xXctdX4pF7n74HDUBv7Ax7SBN2Q1/w5Icf3wLwy2HGy
9FP4sMWkoeXEuIMMQE/KrUuV60aRF6YFt/QVA8jv0LBKuX1V1lat/fp6awoVEzhipI7zTTdSFxnx
aHGGRW+e0HX+sGTdDn//PpVZrFIYJFpsNYfc3XegVD74yCRlsKMR7XtH61RrcVpzmbtY8Cd4L1c1
42MrleZI5q/hUBdC6SF4A431t2bz2ZPZM2tsBNr+ZDCqzHBBCFQ46L4Hha10Z8B0ospQk8QQCQoZ
/+DJukohu8qd4XMS+Gmn3RXPflKh4/qIjfsSvOFyfQcfbNRYzeKjGVW7I9TsuxdKdzm497QBGCTe
zbM5y9blRehQF9H26Me9b4rQthsJfF0tHzyXS775D/cklVA1u+Em3J+4TSVH9HBPSfH/C8GOtGhj
Sgm5KHA+m4TTVUBN2oIsBG2IyrCAE4yeGHMiS5ECGtxPTnjeX/pJW4qG0wf3mMyiR6wWRPENC/kH
MkGQhLlmXsI2HK9i/I2F1E2Fv93D0ZOzQioQPmnLxO7hnGeAgJfpYCqEFJPtS8DXJC6eebN4vP+y
EG8rpfvUaSHu/EEMTNeoZMk71RDSSn9DvNBxYlTAHntIXcNDV5nPV7rnywfU+XHWj8OeRAiVy9CL
oPMeinrRKchq3FWg6Xe07FaVdr4wVkgPuBLPNyX7/Q4tvQJHAeXYa8P49bw8J0qprtGz+ghzfeLH
4SRlITJ1efNpqvEJ9i+rpiAnWhiSLb+oELVMiMwb5oZWEe7dt3ghcbczr5JlNBttvYut1wG5w8pr
Lq9azZVIWIXDSQF+xa/QwIyq0Q6l3UUJebUFfLCOCWu/t+p9uIGamDpgcUuB2X024FA2sbZCa5lv
mFY5hhw/UeKU7crotDcDcshI9/EZmDoxAlEdQErvyU3F7aul5tk3wXBeJoPH5KuPNrel2TT05Aio
iuFL8YmgR4LjBxoMQgnrwmSK6cK7IxJdApT7bIjjZ8GYfssWUVe/e5UkpMJn4E5PDYvhwUUKBj1N
HNn3hDB1q3tAjn1sjyPmCp8nPvmMs0torGj5hFq+JJPe4MzbhbJYKkAWye3UClBylntqgfo3X19N
vS1KbrqnqVF43kF78Lyhz6WRfgrGLEMueUWfgdjIXAPf2HfAKgIElLsc3vREQCogOnjQd6O8TAwe
ka9FUr5n6IRAi+RHjl7166cAvWCcbEAYP+BBjU+A3VwIqAPsr+Hux2oSKHMOHFnM1oJ9R0UQ3fxQ
Rc/D2C2fiAcC3O5BrT+lc4caq94ksmOJG7r8N115++OS13aLjAbrUJzDi2ZHv4UdXWby0NjBIpe4
o2aHhz5W5uPkD/d1QaDI/XA6tGf+Q7boNXRIVT1/JgzWmyilzWcKnnnfgsorIVY2WeDKMuYtPMB7
ZCVTo/zXGR2ldwDnBYV+YZSAovbdck2OaLBuGCw1nH8RA6mapQHcAclFpLE3SiLvmh1WJ6Guy4N4
7gqq9wBMX8WPbYb3ysnNEvBuGjAovo8IBHXgPC1UXalW+G1a0oxbf7pUdMxOIAH360y7kTUgW+k5
zSuzd/UyEVACGPxJErbkqtdigVtVtbhVkRQxngilyAyrpSU+Oi+1CmQY65iOYwIJAyIJlrgUcZvr
kaMMAYCrz7Dd6e5HtqK1KIdJ+0wlI8J8EablDcpJLMLzB4oRwoSwkPQopBzg7mby4kTCa/XdlmZp
BrD82jZvO89c6hq9sRmqUKRwLfeoPIgTnu13lTd8CuNuZrnJHFd+4ZCUMjkKB861oraKIW3Wism8
9xeBVuDCAjYAuAgo5J4w9+qv5H9HaK/1DzCPTVm4FAQnGQebHeAbfoE/2ijUtxKzjcU171cq+DPy
PQTytGnpPE5jeayTsfm0ON+OXv0z8gw8kuRsJYfuXWfUBuJ8rs+OCpsn07HscC5IYuajT+qILoVG
M6uEPjxT8hcVHd4cnbb8NmgP9vFkywwQqO1VfFGhaWFetkbaB1a5vp2/I2MfY1nU+APtCkO74zgA
hFUgt2OdfaeKlUMd/ZlsdZINOn3RX1150q6nTJ+kIgwvvwtfkxLJyGG61o1fmeTz8jaR9qWLVgsR
vDUeuFMOVFD9DAkS/zF4XB8lF9D2F+ck54GVZt+94qcO8i+ki+1pEmECG3VcBe4gjxUJSLCUFS5S
XilDjpMLtVTGWN0eiNUr7oNZNiHMwHFRCW26IuitYc9zjSzPy9WbvdSXFGul1OTWhz9LAH1CJupy
IjYN5gxqLoQSEeMqnvqAAJPYUbIeK2dtK6yCb9G5O1UE48oCmZOM1gYNaYmDSc4kpMrO+8ez/YSr
fLFVBnh//8PZkmeic9mreUUdEW/vSpwZTaVuyX9OLd4bCItWmX4eDQ+sbYKUN1pYr7dN0MeO+rW+
+Ioi7yb0GClGrUNu8b3qYl5TYGoNHLz4o835CXRP5TSAug7eEywSjUb7ZEVuJUOHTOcXarxf1hjR
9Hw10jBW9rAYgKiChqYDbXs2CcgwmPTs6DCIvx+uBc14vkIkPZbOl8RSCf1v4j9ORxScFAC2Ot92
YU7ckZAxaKHI8XSg6XiH00A7ECq6M6aMhSLy0IaKsyAldtQliCA5PvKjZeYDP+nSc2SXoVy9gAci
pslVi5IDxw4MkvRDsfEiReFcZNHsJiul0LtMJAG06ibsr2R8gy3Jg5DhgBEPXU4Qmm6k8ikN4GqL
hYddjFjL3zpT2RCEZw/muUa/ExS6jY8n+rF6LknJJjqt0SDhF/Y5+mSfn1PmOn198yzqmGaZG0MU
PzsMuzi8kxx6Db30E1ETvQKQDV5+hxIhqEuyOX/eQvXJyEgUxox/CDPGqEHta1kK5GnA2CQiIBcU
VIYrjGAVwm+HYncqrl4VJzIoPRRWLU9DXwT67E3ys/4zKaQA5CF/ClBSiCJLbq++tOIqwYGKo4NY
guVK40q0Gkq9bd6nCt7BywU5A16n2N7VBdgyKK6O9NFQA/qcvv+h7XOFBEp+tEwbY+T52pth3vmj
mtykrIQ5plI6jRr7w/5vpWXOAUkza8QnsgE2srdHT++66QExG+iXWDMVLEPlZXiGatoJbEKctNx7
2p01tlPpB9HQHlTuP9in4gdf7j6NjS+58geLcV5TZvfY5PdEjYyMVQdUJ4LVeE8n4cXwlM6Y7McG
5ThGdqZkRfevUL+iouJ6QcsKvi8/DWqHFA/1Yf6sZAtCpovyMC9fd+cVwuBuakwtaU6TL3HZIRfV
YCXfb8fUeh6n+0NZoRBsplOz7LXk1/msJSEzjoGMYAL3IDwhNCp59fWOXvrlW3HMw3WmUvM9452y
2mJ9DmnXxVoMgoAwsTDLJhqk9TmkYAPoCC+1N58xIf9XUL3YnNkTKc5UUcGC0UdPJqOvYfKm1och
BgvPHdlADafR8HxSFpwe5Vb7u5T+kW9G8v1OWazIGy1/z6UDOoH27OIaAnIqaYpHH8aeVLDTNJ2K
k5Amjw5V6hMigxA/IzGILiJWwYZHQ19II5WUxok0GzgjDJAMXJoFjsgL8Fu5hv/fuplKHE4g2Iiq
VyrMr3kqky3OFoDRdUJEwEhIukHfNhwgihGpg/1ZWGSgWfwqW39mMaC0wS7ihQs9lnHyfVDCsQ+K
PMPkDWfOOYTnlOqWe8BhdWPaWNa9ojfShvdxbabZuFca0uyfIrPy8FgIXE85rT9EdLzphrj89XCh
v6BdAtrL13xBu07p1qpUEkTUFcpIQfA0bV2XbhpNRa/t4kZ5FjUfG6J9gU9/gdopJTetnhfVPaNg
ChAotGO3sIOJ16Vs2dbRgoj3bKDV4t+Y8kFbjDOcx9R++Co8/hNu6QNNt2jfv5rUv71U2/R9Z3GC
v8Vv/tbLgT47NnzLPgNX/blYQ012KBj1NCXYapQq8qMOwapPyUXQQOhsyQY8euAreLzCbfd1/SB3
MZ+QLCNBBH4AasxbQjx4+36FIQeNtwYLiEBZLTBfJJ0VL3a+nw3qSSmQOFJ2weCqIzqgnH9yrdZv
BlwId1M06qtSydu8eooN1hau1syky5wyZNY/4Vv1QCZkJPmeJnSEJLtY8pR3CX19tvixmaHacjGL
RWUdm4EfaIjtBL3sGZXrkBWfzUCr1ed61lL7wRgAbH7yOVc0JfxSAw0hULBayMAS+k509LY01G9Z
qs9t9zV727D/W47o67kYVxl1SYPEhcpvTPK6JxnyhwKos05zg2OWDSoM6LZqmwLilKl5eF6xc1wl
yZiCoNWHkr8tu9knCT7yBI7Nhc756JaQLtvQp87oppXYt9LjLVTQCp0y+ApvKyDHuq5qIX/EDHr7
mFvDuTphUh6+qWjlfAfd4ZeCA3b2sOiiPJ36WgMdzDAgLfA8d1h0vIkTMDBVEzDRWlgTz38sKUmP
xJgzfCsRClIHdOcSwZq4HpRrgK3K5xEFS4wzPMJG/IzIrvwwgGKAbbDE5o+xXhBvMrU49h6wfEQ5
vSjb4KhiKxu2edOET2q+46V8cSNdATRxSwgKaYz3fSW73dsnsucxWgzh0oxtQJ6h8eWoRh5Txulg
aGD+/ODHTpSu2idMhzci7441T0arMt1aVjBDMYumSBKB5wCaLp5rmQowCvDhiXlMlzZ8hsBAa22F
80PgVyrt+izOOSjeJQxGZyHcJKQYlQmzMmgDcQsSIO1iyk5nIsPZ9BbyzdkELxFXQ0FT2TImIsA+
Vkndtmhgf/Hp+b+KnJwnFU308m0XDMgHJjMxScGXuDGydsNbuKYFiBglkQ+cewUTbN8TUctbNB5D
cLDD62dmeF/5TmmEckD+eBIHsL1VB/O59UQHwm2BIb1962JFwDf+sLfawhE18a9RaUMNlVuTiHwp
TkG6WzOelvP0YMxvlLOHsL6XIloeksUYhMlLMfu+FNubKeQfH54TsLtGbEh3b2QMSZTkLgSHY755
linLCG5/ML2AomTGq2z6mwNGTnnMou/3wJM8HlfZjTZfHbaKSJP5yUXxRg6lNpju8irhLQ6Gc4wl
I/7nuj3w+xXQ3Eh5uZfDNRiVrDJDfADkGaHTNOg2un5oOq95EqD6gajDgXeYMcWlHd/cTIV727Ix
bul9h4PCxmJYoGVEDyQMtlE05okW3cEtum3MkjegpUEm99mnC7w4KtdhsioUWBI9q+ok/Al62Q9M
+gKyJKEOZPlfPwFsNszS+3KnoSzBYQak7lK4fjF8p7bqbWUBt2W4x3NRPWRYfm1lyFayzr3U8gYh
PukT/oyAPoIYQ5jrcE9ZWWcftPGYJ24eCNu/yzuullchNPxLSddB5hAXWZ4OOF1MWZaUwQ9Ytjsm
rwoXF4r89nUOyjRBw4IXB/DRyLOIX71o8ersmJ1OpHdiNAmeRkr5UH4vcaEDHgZUZv9A/khkqiGP
+GiU9M+5BCEwYgV7zpwTnYWw662eXDbe16UgX0GwTuEGtvYIvOhVIc9WNqXcuUIcQmwWokYx9mwT
YFaXQgIPSY0VpN+Yq1Dct8Cnrh0khDR2pixIkRikM4q7hRDmxdkvp4tlx3W353o3uWUwkChKA9vo
WMBWJT5lhXpf1VWmunXds+7eH5ZB3JSyNsaOjRy5ih9foUjr3NlgdScA5zBFp9MGYUEB8QWC+hzp
Kv06xDB2oGwtRkEX6YYwxR0EX7hXzNz3LC7sQOwG9p2/XMy0/95Wnb0Nbsufjo2DQVVuAnUY4fLZ
HoBjpH/VX+DTr2fNJcvwnlQBZGMyxZiZWbCS+oMYVPhtnHQQJt6NJnwV/yhi7fkWNWt+hqfWD1xW
7ILLFHV+hEVS9SWI+r03SNOW5XiXXqu/Mei1rWTiYytI8PlBzSy5mGpmL3FIxMv/v4YAZFOqWDWw
Ys1Q76W3dzmS9Y78C/SukJrD/q9D6LuK82w1tnL0cBWguNd7WJklB31HOJ3p8a/f1M4jRw6O80KJ
dm9T1IbgmpFdFhIohxwjb+BsqEIe2qzAcg6In70lZNP1lfd3hXOyiOHnZAgug53uMZDIT95o4YiD
vc7PVRxB08pP6jnCBe0V7KNfB2AwR9MMB9XFEmOMQw5e2OrY+/wYop3s8q2oe2dcQsOdL4a9oDtv
7mtblvx7TzmXMdOOEhgHFnvVzevZtQxziaEZas9p96fI8ELDCJ8namGKJ+buM2fL4+aZTcPWoEfi
3G4ekydGec8a25HwnE2HWgnb2OlSVm8w9CTm5w6EGbj/dWPMBAHmC80VpYIoKcYfno6LPbEC9loD
RSELkaoqCs6d0EtO+dKwn3mYBfMHuIDDL0sDgGpc1D41zZCv+gKjistMysCgTnorU4SkQY+WtNVF
LCQce5zkaN/jOApp1752/p4RyGRHVW0UvJ7VgTfFRsC7ZOC+Ia4AdBOCetle4EVNicz9Ueg14ekp
teIR0VoIUNwfgPm92jMb3awO7ZSgqLjKXeVa/nGEAHdJ7+KlaGur4adKlsmeJys8KCsp0ywJIdPK
1HoZGjkCVn7bvG29435jesB/IezYsznBT7hIEfTClvSMN26xLIMt9ucqIeziabmRhhY9hJcR/mUu
mrK4dP5aIfCSLyb80XofwoBl9RIfsDQXKKzWmA48fo1LjMgu9EGjvxmT9EXyfkV6Wu+rg9lQoTX0
njFJcmSGkquQel/mzK/g/wvsbQ24GU1564n021cupvhf/WSyakXMpD7KaUYOZN3iSePdUM12GfrB
PZCNigklQr3UWHPJ//dqPmpMW2Sii0PdeJt+5Fql38rFO586m9ww1bJoKegB+J0QrCX4RVDlGlOy
Ysk9YffysvWeKwz9gnoU0vrMTfbPsLWTn3S8BzaQK8+n24yaD7nRmIhrsUjK36ADl3holheCYzFA
gg++qZNNtIpYD84+ot0W27i2VMyf3jb2cHGunz7ASDYL90OdofkvJjlQJNiCsvuW6PD5rwL8aQuY
zY0hJK5tLRw7MHJzFpF+93LsFbYEvEYIndmjP8cyHZhzC7bFVswEIRxCjje3J+0KZEj8MszjWSWW
tkv424m1h3qLmmoUVfU20wBTaC+WaKOa3zoH+R1lJzrYgBDyRQtjrvonDvVTy9eseUg/8BDKEmW5
vGFGHs98WntfWVlDbMMzz2qG90Dj9Me8EAgZQxPXcOws73VrG3i4FW1C/ewSvbOs1tbsxjRd+nQq
vhCruEDzuwvqF00fneSaCbtTg/q0/fTrf1N5p81rlHZ6A7mEdjrwK8+OCdPa3P++Q0e2WXLlHAY3
verNnSW3iw4O9E/rPk43xMBuqVsKiAiU/Tv0lViOYTQP92rYwFCbLx3LNwChTdZM3Od0Hjy0CvuF
dYL4DoyRESoy2Kiejj55BoKatPSrw7sVGL5eldFT0UdVhXNqgQ9iZtKn41fDo1JWc6D4XfeqD+mW
pv6Ej6tDEJBj+6WHn/MXvi9FZoB8f3OhMYO05dA0OlGK1pRnojczUe1N8smsbJj0VA2lmpw/90RJ
XMozup6J816ewZzoZhRlH1Jvnz+jUkizD7WAJUoVk2PrcSA59nDxR1DdJ22xlsmsh4+eIAyXfsVJ
1TQW7QSFGaGo3ccEmIzr/1Y/cgUTkbTQAXATLOlHTGKAECQQfxHzse2oXajmRKrOLdAzFy/UGWBz
R06XNF5T9lCVczdP08Td5Og2nA+FIWgG7DfdH+uNdkvWKPoDX0khfpGA99QAzIdB+5GtQCMObaay
dKMBHuqjC6xEiAJeTFSvowjbkKHxPXdW867EHYo3peMVZavhdQRVvj+QxqcMhW1vIHFbJFQBTLLC
1/p6lezsVKBg/ZxK460byrgXY51mBCjNZU48GUa9JBkmnPrYAzxQVAkpRsfcIZr6f77fnSUrPMLl
rZZ+j4OzM7Wp+GyW1Pz9rU94v9jphXF0nsvABYvRvWF5uUxOrFwNHOttSXqmgQPJUszJjUb8QMtZ
OXBSQDu0eEbcJL/B1M7VQdvhgD0HY97GI+xRCgoCzvCDQOUsHGKyHw4JMmdzPuC4PCQE5eu6wmv4
3V8KWgPsLrsadjJkH9bNoM+806H1d6APOmjpsWTtfJlbxEdG/KhzUnHom2/i1PFSFIGxH8Ioiqg3
M3lX7gvq9iuVs2QNQ42lCelGVHlzAYcHBtOKT9fk/JUMk6F0hJePd+YxhblDe6mLqLDBYbdri3CO
8ZWVwaQ6deM0p9kmlX5ifYjGwGvUKqy4qEN75mR5UJiEgQfozGBNKGNtCx3X+dr+sBFE4MLVgE4N
YvNFe5G/J/jJA1IXdAnpW3+xeuxpbUk/Kvr9OouXWou0p0DCMiWeKGWntjS2ebaQxzLkX9Sobd8A
rhUwg9HgtmmXeDWZzol6G8PfVE4xHo6Iybtzgo70KLUF9r+k6Qr+2nZ8gKv/xq1bK72DQgKCSNJQ
doVZltaNoI+eA7hKIgeBfn0U+zFE6qchi6o+oMLrwlG4L+Sd1pLhR7BCJ4D8hVdMpZsI8dMzzfxd
rCshJi7lDm58/rm/U2fGFpapxoO/SE31v7DGztRy61TwylNHGrZET0VV/Gn1nh2puUbnoPWkTdR0
MujVMrnqqLbeFyKji0oVZKVC2/qejadIpqfAXFvjKqKNYKJUSf3R1SjhWgvMjVks96ECWLj979ca
2CiGMFUbhmtUyArI1IdiBwx/Q8PFH0h0A2vWwU7bqqv+Y5V/aManG20A23m0JfcfQthGCGJbP3wo
/iXWE4kzChAJtPXhzgkQ5KB4rMlDckJcODcW946NotKZ+nSZ9fiVPsHJ89+2Za7xw6Riwkh890BX
oZmWD2PEgt7SBwOYax864MMkgKByyaz/8CA45OCovgrRVubcV3ppHZlCQZpzusHR8vylTBSy3GG9
F24ChABy0iXwGoyUOjeawebOvYUCN4XxKL+o8N6BZLBFzxhHSI26UwsRDgPCqSYBcmr0ALOfjGMu
VsPhZB8VOk4KpFDjq1eE6zLJXXDqcYdQXY98yPCWR3sUuHF9xfY68jjr2cgI8GBRkxmBfIGv0rQB
wZVVRGkIa1wce+ysnqCcOnekHMRz46+6kq400puGgdFlXHEIJ7GMCQ9DHRZFcpGcZlv/BwhRwvIl
6MXmRaHbswUnIdl4RcioxftIoUrhTY8U4W/iD1fRSE6D5WQwIZEpAnk1Bx+lb02UfBVHug0MkfpL
7Rfu8JKk9GeTTnFV+MYfJKyQN5vZsNM5LtxHcmVMfIEo5lhkMU5S9OiUemtRnYlE0kSrIciQb0yD
mjZlYdM+mFYUY0lVlR+YS+rzHP6OEi1ArxS93vNZkqpFHKU/bu9Bim5IxBwteyMixuxHk9kfl8CE
P3qB2ruPzH5HJgfbdgLEWhcOh5hYRYsWoSeD0pyIf/qX0MRzGzAT8FQO4V+6T3Jq30F0Dm1/pz/I
vzXfE8NNGtTTSVSYyaX2yvcRG5+qJJvl8TGm2ziiusdo99wh1ayOswE5upiJA2RXutByNfr/xgm3
9ghqAr558ezs8CpUW8SrYYlK0N7ccLyTTpb/oowiLV/+SzKSsB5n1uKLNc23tpvwd18ZU+g+En0A
QkUyfa+HUIP+HeqSsU2BX80xQ896y+prsO2iDoTnWPfaNADTkoJu4EPXk8QOYAre+hHn84sH3jYg
Xa3PGKx5lbwZAC80rQPVAAe34eI6uHv9XkcBToPF8p8gDHTwvu2o2bAweRPJ1iGp71W+smQak+n5
q8jyYf+jL4LVVvSsTMLvB4NY/UpQBr0ZxAhb6U8zagrGoQ+P2emt7lNmOLa8/f77r8CqTB1DmOQC
155v+hbZtqtSNWe5lfrwLKrwL55UrKukUC7/OQm8ihKMmQH9iMR2avclTJowbQMSqqNywFm2mREI
c9IlUOHKq9TG/08FvdYDPT4yIQUqfABgxs3xPMTu3uALR/m8uQsjWMatrLZce8vp2Fo9Vx6gp8Tn
l/Zrjk5xuT18U2ENTh3eNaYLfcluGIxbXoU5XhXScOxtf0f3uZqx3t4uOvL3mxRQYDdOd//h5KxA
ehObByKrlaXTzUKckRoE1c2XBn7vOdYJaaGuKhEW+iuX0+4L3x5EvPO90OVC6RMWCPPEUqNX+zpk
DnXBRIYWoyc8mXs+/0l3BPYknO9ds5KjzeFsnpsYdqu3+xgHxUR5MWjVQ1ob56Qe4RkFjGQOdXzn
3g46WSdCrhE0UjjO7BkdcGfdYrkFEVnHN7xvhcsc0vuHnACXkabD5wUyCcnmCPYfzS9zUlzo05VX
hTJoRbBnkC9ooILHj4rrC9oHK21UWLKXlvva3SP/usafY4BoEnEOiR0Mgs9UF+okaf04e2dR8NjL
uuw9L2SVNEohmLukwh+La7hrRhthGBLfXHZMDgQl8ZvIO3D2Xiw5EqC+AELhm2/L9rrQD+lHd+3J
wmg4FJVbE5FjXPnpOkjWglZwt6CKjkn4FGm04usuHfa7g/iXHDXtbV1feNTmT094qFod88N/5yqa
lLv3boBsuZCNKZ+ElVMqDU1KtMELq3wXT7jT9ZinsmQnovZDSflDPcxdG4KTBVmiUs3Lg7nFHhg3
FBLnn9KFfFJx/Z37zF/m/Hc+uFHD12ywDloOpTnSluBv+RrqC5ZF8ImQfCJ92p6Zk29r7AmVZBDD
Qv68JvqGGF94bUf18E2N4gjCMR0NvBeirltv+RqL1IfirTkYJlODRys6aACmnZlQ41KBTnwZWQsm
DOsajX43KDomFxBCZBY6EuI9XYy/KYMNNyMj2DuKe3JhHV/WpjcS476CD+hRdAozgWULYUxs3hdA
F/wsF43px14MXnbqZWFGCeYsvDxBtRqc5SyIfO7hq9WrF8Q5nZEOSpR3Aa7lHg==
`pragma protect end_protected
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
