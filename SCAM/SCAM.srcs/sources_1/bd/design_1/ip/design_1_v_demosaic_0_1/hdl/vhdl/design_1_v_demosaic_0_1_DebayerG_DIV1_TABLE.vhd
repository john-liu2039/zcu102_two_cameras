-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE_rom is 
    generic(
             dwidth     : integer := 10; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          addr1      : in std_logic_vector(awidth-1 downto 0); 
          ce1       : in std_logic; 
          q1         : out std_logic_vector(dwidth-1 downto 0);
          addr2      : in std_logic_vector(awidth-1 downto 0); 
          ce2       : in std_logic; 
          q2         : out std_logic_vector(dwidth-1 downto 0);
          addr3      : in std_logic_vector(awidth-1 downto 0); 
          ce3       : in std_logic; 
          q3         : out std_logic_vector(dwidth-1 downto 0);
          addr4      : in std_logic_vector(awidth-1 downto 0); 
          ce4       : in std_logic; 
          q4         : out std_logic_vector(dwidth-1 downto 0);
          addr5      : in std_logic_vector(awidth-1 downto 0); 
          ce5       : in std_logic; 
          q5         : out std_logic_vector(dwidth-1 downto 0);
          addr6      : in std_logic_vector(awidth-1 downto 0); 
          ce6       : in std_logic; 
          q6         : out std_logic_vector(dwidth-1 downto 0);
          addr7      : in std_logic_vector(awidth-1 downto 0); 
          ce7       : in std_logic; 
          q7         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr1_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr2_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr3_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr4_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr5_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr6_tmp : std_logic_vector(awidth-1 downto 0); 
signal addr7_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem0 : mem_array := (
    0 to 1=> "1111111111", 2 => "0111111111", 3 => "0101010101", 4 => "0011111111", 
    5 => "0011001100", 6 => "0010101010", 7 => "0010010010", 8 => "0001111111", 
    9 => "0001110001", 10 => "0001100110", 11 => "0001011101", 12 => "0001010101", 
    13 => "0001001110", 14 => "0001001001", 15 => "0001000100", 16 => "0000111111", 
    17 => "0000111100", 18 => "0000111000", 19 => "0000110101", 20 => "0000110011", 
    21 => "0000110000", 22 => "0000101110", 23 => "0000101100", 24 => "0000101010", 
    25 => "0000101000", 26 => "0000100111", 27 => "0000100101", 28 => "0000100100", 
    29 => "0000100011", 30 => "0000100010", 31 => "0000100001", 32 to 33=> "0000011111", 
    34 => "0000011110", 35 => "0000011101", 36 => "0000011100", 37 => "0000011011", 
    38 to 39=> "0000011010", 40 => "0000011001", 41 to 42=> "0000011000", 43 to 44=> "0000010111", 
    45 to 46=> "0000010110", 47 to 48=> "0000010101", 49 to 51=> "0000010100", 52 to 53=> "0000010011", 
    54 to 56=> "0000010010", 57 to 60=> "0000010001", 61 to 63=> "0000010000", 64 to 68=> "0000001111", 
    69 to 73=> "0000001110", 74 to 78=> "0000001101", 79 to 85=> "0000001100", 86 to 93=> "0000001011", 
    94 to 102=> "0000001010", 103 to 113=> "0000001001", 114 to 127=> "0000001000", 128 to 146=> "0000000111", 
    147 to 170=> "0000000110", 171 to 204=> "0000000101", 205 to 255=> "0000000100", 256 to 341=> "0000000011", 
    342 to 511=> "0000000010", 512 to 1023=> "0000000001" );
signal mem1 : mem_array := (
    0 to 1=> "1111111111", 2 => "0111111111", 3 => "0101010101", 4 => "0011111111", 
    5 => "0011001100", 6 => "0010101010", 7 => "0010010010", 8 => "0001111111", 
    9 => "0001110001", 10 => "0001100110", 11 => "0001011101", 12 => "0001010101", 
    13 => "0001001110", 14 => "0001001001", 15 => "0001000100", 16 => "0000111111", 
    17 => "0000111100", 18 => "0000111000", 19 => "0000110101", 20 => "0000110011", 
    21 => "0000110000", 22 => "0000101110", 23 => "0000101100", 24 => "0000101010", 
    25 => "0000101000", 26 => "0000100111", 27 => "0000100101", 28 => "0000100100", 
    29 => "0000100011", 30 => "0000100010", 31 => "0000100001", 32 to 33=> "0000011111", 
    34 => "0000011110", 35 => "0000011101", 36 => "0000011100", 37 => "0000011011", 
    38 to 39=> "0000011010", 40 => "0000011001", 41 to 42=> "0000011000", 43 to 44=> "0000010111", 
    45 to 46=> "0000010110", 47 to 48=> "0000010101", 49 to 51=> "0000010100", 52 to 53=> "0000010011", 
    54 to 56=> "0000010010", 57 to 60=> "0000010001", 61 to 63=> "0000010000", 64 to 68=> "0000001111", 
    69 to 73=> "0000001110", 74 to 78=> "0000001101", 79 to 85=> "0000001100", 86 to 93=> "0000001011", 
    94 to 102=> "0000001010", 103 to 113=> "0000001001", 114 to 127=> "0000001000", 128 to 146=> "0000000111", 
    147 to 170=> "0000000110", 171 to 204=> "0000000101", 205 to 255=> "0000000100", 256 to 341=> "0000000011", 
    342 to 511=> "0000000010", 512 to 1023=> "0000000001" );
signal mem2 : mem_array := (
    0 to 1=> "1111111111", 2 => "0111111111", 3 => "0101010101", 4 => "0011111111", 
    5 => "0011001100", 6 => "0010101010", 7 => "0010010010", 8 => "0001111111", 
    9 => "0001110001", 10 => "0001100110", 11 => "0001011101", 12 => "0001010101", 
    13 => "0001001110", 14 => "0001001001", 15 => "0001000100", 16 => "0000111111", 
    17 => "0000111100", 18 => "0000111000", 19 => "0000110101", 20 => "0000110011", 
    21 => "0000110000", 22 => "0000101110", 23 => "0000101100", 24 => "0000101010", 
    25 => "0000101000", 26 => "0000100111", 27 => "0000100101", 28 => "0000100100", 
    29 => "0000100011", 30 => "0000100010", 31 => "0000100001", 32 to 33=> "0000011111", 
    34 => "0000011110", 35 => "0000011101", 36 => "0000011100", 37 => "0000011011", 
    38 to 39=> "0000011010", 40 => "0000011001", 41 to 42=> "0000011000", 43 to 44=> "0000010111", 
    45 to 46=> "0000010110", 47 to 48=> "0000010101", 49 to 51=> "0000010100", 52 to 53=> "0000010011", 
    54 to 56=> "0000010010", 57 to 60=> "0000010001", 61 to 63=> "0000010000", 64 to 68=> "0000001111", 
    69 to 73=> "0000001110", 74 to 78=> "0000001101", 79 to 85=> "0000001100", 86 to 93=> "0000001011", 
    94 to 102=> "0000001010", 103 to 113=> "0000001001", 114 to 127=> "0000001000", 128 to 146=> "0000000111", 
    147 to 170=> "0000000110", 171 to 204=> "0000000101", 205 to 255=> "0000000100", 256 to 341=> "0000000011", 
    342 to 511=> "0000000010", 512 to 1023=> "0000000001" );
signal mem3 : mem_array := (
    0 to 1=> "1111111111", 2 => "0111111111", 3 => "0101010101", 4 => "0011111111", 
    5 => "0011001100", 6 => "0010101010", 7 => "0010010010", 8 => "0001111111", 
    9 => "0001110001", 10 => "0001100110", 11 => "0001011101", 12 => "0001010101", 
    13 => "0001001110", 14 => "0001001001", 15 => "0001000100", 16 => "0000111111", 
    17 => "0000111100", 18 => "0000111000", 19 => "0000110101", 20 => "0000110011", 
    21 => "0000110000", 22 => "0000101110", 23 => "0000101100", 24 => "0000101010", 
    25 => "0000101000", 26 => "0000100111", 27 => "0000100101", 28 => "0000100100", 
    29 => "0000100011", 30 => "0000100010", 31 => "0000100001", 32 to 33=> "0000011111", 
    34 => "0000011110", 35 => "0000011101", 36 => "0000011100", 37 => "0000011011", 
    38 to 39=> "0000011010", 40 => "0000011001", 41 to 42=> "0000011000", 43 to 44=> "0000010111", 
    45 to 46=> "0000010110", 47 to 48=> "0000010101", 49 to 51=> "0000010100", 52 to 53=> "0000010011", 
    54 to 56=> "0000010010", 57 to 60=> "0000010001", 61 to 63=> "0000010000", 64 to 68=> "0000001111", 
    69 to 73=> "0000001110", 74 to 78=> "0000001101", 79 to 85=> "0000001100", 86 to 93=> "0000001011", 
    94 to 102=> "0000001010", 103 to 113=> "0000001001", 114 to 127=> "0000001000", 128 to 146=> "0000000111", 
    147 to 170=> "0000000110", 171 to 204=> "0000000101", 205 to 255=> "0000000100", 256 to 341=> "0000000011", 
    342 to 511=> "0000000010", 512 to 1023=> "0000000001" );

attribute syn_rom_style : string;
attribute syn_rom_style of mem0 : signal is "block_rom";
attribute syn_rom_style of mem1 : signal is "block_rom";
attribute syn_rom_style of mem2 : signal is "block_rom";
attribute syn_rom_style of mem3 : signal is "block_rom";
attribute ROM_STYLE : string;
attribute ROM_STYLE of mem0 : signal is "block";
attribute ROM_STYLE of mem1 : signal is "block";
attribute ROM_STYLE of mem2 : signal is "block";
attribute ROM_STYLE of mem3 : signal is "block";

attribute EQUIVALENT_REGISTER_REMOVAL : string;
signal q0_t0 : std_logic_vector(dwidth-1 downto 0);
signal q0_t1 : std_logic_vector(dwidth-1 downto 0);
signal q1_t0 : std_logic_vector(dwidth-1 downto 0);
signal q1_t1 : std_logic_vector(dwidth-1 downto 0);
signal q2_t0 : std_logic_vector(dwidth-1 downto 0);
signal q2_t1 : std_logic_vector(dwidth-1 downto 0);
signal q3_t0 : std_logic_vector(dwidth-1 downto 0);
signal q3_t1 : std_logic_vector(dwidth-1 downto 0);
signal q4_t0 : std_logic_vector(dwidth-1 downto 0);
signal q4_t1 : std_logic_vector(dwidth-1 downto 0);
signal q5_t0 : std_logic_vector(dwidth-1 downto 0);
signal q5_t1 : std_logic_vector(dwidth-1 downto 0);
signal q6_t0 : std_logic_vector(dwidth-1 downto 0);
signal q6_t1 : std_logic_vector(dwidth-1 downto 0);
signal q7_t0 : std_logic_vector(dwidth-1 downto 0);
signal q7_t1 : std_logic_vector(dwidth-1 downto 0);
begin 

q0 <= q0_t1;
q1 <= q1_t1;
q2 <= q2_t1;
q3 <= q3_t1;
q4 <= q4_t1;
q5 <= q5_t1;
q6 <= q6_t1;
q7 <= q7_t1;

p_IO_pipeline_reg : process (clk)  
begin
    if (clk'event and clk = '1') then
      if (ce0 = '1') then 
        q0_t1 <= q0_t0;
      end if;
      if (ce1 = '1') then 
        q1_t1 <= q1_t0;
      end if;
      if (ce2 = '1') then 
        q2_t1 <= q2_t0;
      end if;
      if (ce3 = '1') then 
        q3_t1 <= q3_t0;
      end if;
      if (ce4 = '1') then 
        q4_t1 <= q4_t0;
      end if;
      if (ce5 = '1') then 
        q5_t1 <= q5_t0;
      end if;
      if (ce6 = '1') then 
        q6_t1 <= q6_t0;
      end if;
      if (ce7 = '1') then 
        q7_t1 <= q7_t0;
      end if;
    end if;
end process;

memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

memory_access_guard_1: process (addr1) 
begin
      addr1_tmp <= addr1;
--synthesis translate_off
      if (CONV_INTEGER(addr1) > mem_size-1) then
           addr1_tmp <= (others => '0');
      else 
           addr1_tmp <= addr1;
      end if;
--synthesis translate_on
end process;

memory_access_guard_2: process (addr2) 
begin
      addr2_tmp <= addr2;
--synthesis translate_off
      if (CONV_INTEGER(addr2) > mem_size-1) then
           addr2_tmp <= (others => '0');
      else 
           addr2_tmp <= addr2;
      end if;
--synthesis translate_on
end process;

memory_access_guard_3: process (addr3) 
begin
      addr3_tmp <= addr3;
--synthesis translate_off
      if (CONV_INTEGER(addr3) > mem_size-1) then
           addr3_tmp <= (others => '0');
      else 
           addr3_tmp <= addr3;
      end if;
--synthesis translate_on
end process;

memory_access_guard_4: process (addr4) 
begin
      addr4_tmp <= addr4;
--synthesis translate_off
      if (CONV_INTEGER(addr4) > mem_size-1) then
           addr4_tmp <= (others => '0');
      else 
           addr4_tmp <= addr4;
      end if;
--synthesis translate_on
end process;

memory_access_guard_5: process (addr5) 
begin
      addr5_tmp <= addr5;
--synthesis translate_off
      if (CONV_INTEGER(addr5) > mem_size-1) then
           addr5_tmp <= (others => '0');
      else 
           addr5_tmp <= addr5;
      end if;
--synthesis translate_on
end process;

memory_access_guard_6: process (addr6) 
begin
      addr6_tmp <= addr6;
--synthesis translate_off
      if (CONV_INTEGER(addr6) > mem_size-1) then
           addr6_tmp <= (others => '0');
      else 
           addr6_tmp <= addr6;
      end if;
--synthesis translate_on
end process;

memory_access_guard_7: process (addr7) 
begin
      addr7_tmp <= addr7;
--synthesis translate_off
      if (CONV_INTEGER(addr7) > mem_size-1) then
           addr7_tmp <= (others => '0');
      else 
           addr7_tmp <= addr7;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0_t0 <= mem0(CONV_INTEGER(addr0_tmp)); 
        end if;
        if (ce1 = '1') then 
            q1_t0 <= mem0(CONV_INTEGER(addr1_tmp)); 
        end if;
        if (ce2 = '1') then 
            q2_t0 <= mem1(CONV_INTEGER(addr2_tmp)); 
        end if;
        if (ce3 = '1') then 
            q3_t0 <= mem1(CONV_INTEGER(addr3_tmp)); 
        end if;
        if (ce4 = '1') then 
            q4_t0 <= mem2(CONV_INTEGER(addr4_tmp)); 
        end if;
        if (ce5 = '1') then 
            q5_t0 <= mem2(CONV_INTEGER(addr5_tmp)); 
        end if;
        if (ce6 = '1') then 
            q6_t0 <= mem3(CONV_INTEGER(addr6_tmp)); 
        end if;
        if (ce7 = '1') then 
            q7_t0 <= mem3(CONV_INTEGER(addr7_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address1 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address2 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address3 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address4 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address5 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address6 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        address7 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE is
    component design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR;
            addr1 : IN STD_LOGIC_VECTOR;
            ce1 : IN STD_LOGIC;
            q1 : OUT STD_LOGIC_VECTOR;
            addr2 : IN STD_LOGIC_VECTOR;
            ce2 : IN STD_LOGIC;
            q2 : OUT STD_LOGIC_VECTOR;
            addr3 : IN STD_LOGIC_VECTOR;
            ce3 : IN STD_LOGIC;
            q3 : OUT STD_LOGIC_VECTOR;
            addr4 : IN STD_LOGIC_VECTOR;
            ce4 : IN STD_LOGIC;
            q4 : OUT STD_LOGIC_VECTOR;
            addr5 : IN STD_LOGIC_VECTOR;
            ce5 : IN STD_LOGIC;
            q5 : OUT STD_LOGIC_VECTOR;
            addr6 : IN STD_LOGIC_VECTOR;
            ce6 : IN STD_LOGIC;
            q6 : OUT STD_LOGIC_VECTOR;
            addr7 : IN STD_LOGIC_VECTOR;
            ce7 : IN STD_LOGIC;
            q7 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE_rom_U :  component design_1_v_demosaic_0_1_DebayerG_DIV1_TABLE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0,
        addr1 => address1,
        ce1 => ce1,
        q1 => q1,
        addr2 => address2,
        ce2 => ce2,
        q2 => q2,
        addr3 => address3,
        ce3 => ce3,
        q3 => q3,
        addr4 => address4,
        ce4 => ce4,
        q4 => q4,
        addr5 => address5,
        ce5 => ce5,
        q5 => q5,
        addr6 => address6,
        ce6 => ce6,
        q6 => q6,
        addr7 => address7,
        ce7 => ce7,
        q7 => q7);

end architecture;


